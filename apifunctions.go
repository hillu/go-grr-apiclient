// This file has been autogenerated by gen-functions.go

package apiclient

import (
	"net/url"
	"path"
	"strconv"
)

func (c *APIClient) ListArtifacts(rq ApiListArtifactsArgs) (rs *ApiListArtifactsResult, err error) {
	rs = new(ApiListArtifactsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/artifacts", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) UploadArtifact(rq ApiUploadArtifactArgs) error {
	return c.post("/api/artifacts/upload", &rq)
}
func (c *APIClient) DeleteArtifacts(rq ApiDeleteArtifactsArgs) error {
	return c.post("/api/artifacts/delete", &rq)
}
func (c *APIClient) SearchClients(rq ApiSearchClientsArgs) (rs *ApiSearchClientsResult, err error) {
	rs = new(ApiSearchClientsResult)
	values := make(url.Values)
	if rq.Query != nil {
		values.Set("query", *rq.Query)
	}
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/clients", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetClient(rq ApiGetClientArgs) (rs *ApiGetClientResult, err error) {
	rs = new(ApiGetClientResult)
	values := make(url.Values)
	if rq.Timestamp != nil {
		values.Set("timestamp", strconv.FormatUint(uint64(*rq.Timestamp), 10))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetClientVersionTimes(clientId string) (rs *ApiGetClientVersionTimesResult, err error) {
	rs = new(ApiGetClientVersionTimesResult)
	if err := c.get("/api/clients/"+clientId+"/version-times", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) InterrogateClient(rq ApiInterrogateClientArgs) (rs *ApiInterrogateClientResult, err error) {
	rs = new(ApiInterrogateClientResult)
	if err := c.do("POST", "/api/clients/"+path.Base(rq.GetClientId())+"/actions/interrogate", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetLastClientIPAddress(clientId string) (rs *ApiGetLastClientIPAddressResult, err error) {
	rs = new(ApiGetLastClientIPAddressResult)
	if err := c.get("/api/clients/"+clientId+"/last-ip", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListFiles(rq ApiListFilesArgs) (rs *ApiListFilesResult, err error) {
	rs = new(ApiListFilesResult)
	values := make(url.Values)
	if rq.FilePath != nil {
		values.Set("file_path", *rq.FilePath)
	}
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if rq.DirectoriesOnly != nil {
		values.Set("directories_only", strconv.FormatBool(*rq.DirectoriesOnly))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/vfs-index/", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetFileDetails(rq ApiGetFileDetailsArgs) (rs *ApiGetFileDetailsResult, err error) {
	rs = new(ApiGetFileDetailsResult)
	values := make(url.Values)
	if rq.Timestamp != nil {
		values.Set("timestamp", strconv.FormatUint(uint64(*rq.Timestamp), 10))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/vfs-details/"+path.Base(rq.GetFilePath()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetFileText(rq ApiGetFileTextArgs) (rs *ApiGetFileTextResult, err error) {
	rs = new(ApiGetFileTextResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Length != nil {
		values.Set("length", strconv.FormatInt(int64(*rq.Length), 10))
	}
	if rq.Encoding != nil {
		values.Set("encoding", strconv.FormatInt(int64(*rq.Encoding), 10))
	}
	if rq.Timestamp != nil {
		values.Set("timestamp", strconv.FormatUint(uint64(*rq.Timestamp), 10))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/vfs-text/"+path.Base(rq.GetFilePath()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetFileVersionTimes(rq ApiGetFileVersionTimesArgs) (rs *ApiGetFileVersionTimesResult, err error) {
	rs = new(ApiGetFileVersionTimesResult)
	values := make(url.Values)
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/vfs-version-times/"+path.Base(rq.GetFilePath()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetFileDownloadCommand(rq ApiGetFileDownloadCommandArgs) (rs *ApiGetFileDownloadCommandResult, err error) {
	rs = new(ApiGetFileDownloadCommandResult)
	values := make(url.Values)
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/vfs-download-command/"+path.Base(rq.GetFilePath()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CreateVfsRefreshOperation(rq ApiCreateVfsRefreshOperationArgs) (rs *ApiCreateVfsRefreshOperationResult, err error) {
	rs = new(ApiCreateVfsRefreshOperationResult)
	if err := c.do("POST", "/api/clients/"+path.Base(rq.GetClientId())+"/vfs-refresh-operations", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetVfsTimeline(rq ApiGetVfsTimelineArgs) (rs *ApiGetVfsTimelineResult, err error) {
	rs = new(ApiGetVfsTimelineResult)
	values := make(url.Values)
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/vfs-timeline/"+path.Base(rq.GetFilePath()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) UpdateVfsFileContent(rq ApiUpdateVfsFileContentArgs) (rs *ApiUpdateVfsFileContentResult, err error) {
	rs = new(ApiUpdateVfsFileContentResult)
	if err := c.do("POST", "/api/clients/"+path.Base(rq.GetClientId())+"/vfs-update", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListClientsLabels() (rs *ApiListClientsLabelsResult, err error) {
	rs = new(ApiListClientsLabelsResult)
	if err := c.get("/api/clients/labels", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) AddClientsLabels(rq ApiAddClientsLabelsArgs) error {
	return c.post("/api/clients/labels/add", &rq)
}
func (c *APIClient) RemoveClientsLabels(rq ApiRemoveClientsLabelsArgs) error {
	return c.post("/api/clients/labels/remove", &rq)
}
func (c *APIClient) ListFlows(rq ApiListFlowsArgs) (rs *ApiListFlowsResult, err error) {
	rs = new(ApiListFlowsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetFlow(rq ApiGetFlowArgs) (rs *ApiFlow, err error) {
	rs = new(ApiFlow)
	values := make(url.Values)
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CreateFlow(rq ApiCreateFlowArgs) (rs *ApiFlow, err error) {
	rs = new(ApiFlow)
	if err := c.do("POST", "/api/clients/"+path.Base(rq.GetClientId())+"/flows", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CancelFlow(rq ApiCancelFlowArgs, clientId string, flowId string) error {
	return c.post("/api/clients/"+clientId+"/flows/"+flowId+"/actions/cancel", &rq)
}
func (c *APIClient) ListFlowResults(rq ApiListFlowResultsArgs) (rs *ApiListFlowResultsResult, err error) {
	rs = new(ApiListFlowResultsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId())+"/results", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetFlowResultsExportCommand(rq ApiGetFlowResultsExportCommandArgs) (rs *ApiGetFlowResultsExportCommandResult, err error) {
	rs = new(ApiGetFlowResultsExportCommandResult)
	values := make(url.Values)
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId())+"/results/export-command", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListFlowOutputPlugins(rq ApiListFlowOutputPluginsArgs) (rs *ApiListFlowOutputPluginsResult, err error) {
	rs = new(ApiListFlowOutputPluginsResult)
	values := make(url.Values)
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId())+"/output-plugins", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListFlowOutputPluginLogs(rq ApiListFlowOutputPluginLogsArgs) (rs *ApiListFlowOutputPluginLogsResult, err error) {
	rs = new(ApiListFlowOutputPluginLogsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId())+"/output-plugins/"+path.Base(rq.GetPluginId())+"/errors", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListFlowOutputPluginErrors(rq ApiListFlowOutputPluginErrorsArgs) (rs *ApiListFlowOutputPluginErrorsResult, err error) {
	rs = new(ApiListFlowOutputPluginErrorsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId())+"/output-plugins/"+path.Base(rq.GetPluginId())+"/errors", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListFlowLogs(rq ApiListFlowLogsArgs) (rs *ApiListFlowLogsResult, err error) {
	rs = new(ApiListFlowLogsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if err := c.get("/api/clients/"+path.Base(rq.GetClientId())+"/flows/"+path.Base(rq.GetFlowId())+"/log", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CreateGlobalFlow(rq ApiCreateFlowArgs) (rs *ApiFlow, err error) {
	rs = new(ApiFlow)
	if err := c.do("POST", "/api/flows", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListCronJobs(rq ApiListCronJobsArgs) (rs *ApiListCronJobsResult, err error) {
	rs = new(ApiListCronJobsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/cron-jobs", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CreateCronJob(rq ApiCronJob) error {
	return c.post("/api/cron-jobs", &rq)
}
func (c *APIClient) DeleteCronJob(rq ApiDeleteCronJobArgs, cronJobId string) error {
	return c.post("/api/cron-jobs/"+cronJobId+"/actions/delete", &rq)
}
func (c *APIClient) ListHunts(rq ApiListHuntsArgs) (rs *ApiListHuntsResult, err error) {
	rs = new(ApiListHuntsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.CreatedBy != nil {
		values.Set("created_by", *rq.CreatedBy)
	}
	if rq.DescriptionContains != nil {
		values.Set("description_contains", *rq.DescriptionContains)
	}
	if rq.ActiveWithin != nil {
		values.Set("active_within", strconv.FormatUint(uint64(*rq.ActiveWithin), 10))
	}
	if err := c.get("/api/hunts", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetHunt(huntId string) (rs *ApiHunt, err error) {
	rs = new(ApiHunt)
	if err := c.get("/api/hunts/"+huntId, nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntErrors(rq ApiListHuntErrorsArgs) (rs *ApiListHuntErrorsResult, err error) {
	rs = new(ApiListHuntErrorsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/errors", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntLogs(rq ApiListHuntLogsArgs) (rs *ApiListHuntLogsResult, err error) {
	rs = new(ApiListHuntLogsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/log", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntResults(rq ApiListHuntResultsArgs) (rs *ApiListHuntResultsResult, err error) {
	rs = new(ApiListHuntResultsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/results", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetHuntResultsExportCommand(rq ApiGetHuntResultsExportCommandArgs) (rs *ApiGetHuntResultsExportCommandResult, err error) {
	rs = new(ApiGetHuntResultsExportCommandResult)
	values := make(url.Values)
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/results/export-command", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntOutputPlugins(rq ApiListHuntOutputPluginsArgs) (rs *ApiListHuntOutputPluginsResult, err error) {
	rs = new(ApiListHuntOutputPluginsResult)
	values := make(url.Values)
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/output-plugins", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntOutputPluginLogs(rq ApiListHuntOutputPluginLogsArgs) (rs *ApiListHuntOutputPluginLogsResult, err error) {
	rs = new(ApiListHuntOutputPluginLogsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/output-plugins/"+path.Base(rq.GetPluginId())+"/logs", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntOutputPluginErrors(rq ApiListHuntOutputPluginErrorsArgs) (rs *ApiListHuntOutputPluginErrorsResult, err error) {
	rs = new(ApiListHuntOutputPluginErrorsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/output-plugins/"+path.Base(rq.GetPluginId())+"/errors", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListHuntCrashes(rq ApiListHuntCrashesArgs) (rs *ApiListHuntCrashesResult, err error) {
	rs = new(ApiListHuntCrashesResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.Filter != nil {
		values.Set("filter", *rq.Filter)
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/crashes", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetHuntClientCompletionStats(rq ApiGetHuntClientCompletionStatsArgs) (rs *ApiGetHuntClientCompletionStatsResult, err error) {
	rs = new(ApiGetHuntClientCompletionStatsResult)
	values := make(url.Values)
	if rq.Size != nil {
		values.Set("size", strconv.FormatInt(int64(*rq.Size), 10))
	}
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/client-completion-stats", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetHuntStats(rq ApiGetHuntStatsArgs) (rs *ApiGetHuntStatsResult, err error) {
	rs = new(ApiGetHuntStatsResult)
	values := make(url.Values)
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/stats", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetHuntContext(rq ApiGetHuntContextArgs) (rs *ApiGetHuntContextResult, err error) {
	rs = new(ApiGetHuntContextResult)
	values := make(url.Values)
	if err := c.get("/api/hunts/"+path.Base(rq.GetHuntId())+"/context", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CreateHunt(rq ApiCreateHuntArgs) (rs *ApiHunt, err error) {
	rs = new(ApiHunt)
	if err := c.do("POST", "/api/hunts", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) CreateUserClientApproval(rq ApiCreateUserClientApprovalArgs) (rs *ApiUserClientApproval, err error) {
	rs = new(ApiUserClientApproval)
	if err := c.do("POST", "/api/users/me/approvals/client/"+path.Base(rq.GetClientId()), &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetUserClientApproval(rq ApiGetUserClientApprovalArgs) (rs *ApiUserClientApproval, err error) {
	rs = new(ApiUserClientApproval)
	values := make(url.Values)
	if rq.Reason != nil {
		values.Set("reason", *rq.Reason)
	}
	if err := c.get("/api/users/me/approvals/client/"+path.Base(rq.GetClientId()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListUserClientApprovals(rq ApiListUserClientApprovalsArgs) (rs *ApiListUserClientApprovalsResult, err error) {
	rs = new(ApiListUserClientApprovalsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if rq.ClientId != nil {
		values.Set("client_id", *rq.ClientId)
	}
	if rq.State != nil {
		values.Set("state", strconv.FormatInt(int64(*rq.State), 10))
	}
	if err := c.get("/api/users/me/approvals/client", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListUserHuntApprovals(rq ApiListUserHuntApprovalsArgs) (rs *ApiListUserHuntApprovalsResult, err error) {
	rs = new(ApiListUserHuntApprovalsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/users/me/approvals/hunt", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListUserCronApprovals(rq ApiListUserCronApprovalsArgs) (rs *ApiListUserCronApprovalsResult, err error) {
	rs = new(ApiListUserCronApprovalsResult)
	values := make(url.Values)
	if rq.Offset != nil {
		values.Set("offset", strconv.FormatInt(int64(*rq.Offset), 10))
	}
	if rq.Count != nil {
		values.Set("count", strconv.FormatInt(int64(*rq.Count), 10))
	}
	if err := c.get("/api/users/me/approvals/cron", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetPendingUserNotificationsCount() (rs *ApiGetPendingUserNotificationsCountResult, err error) {
	rs = new(ApiGetPendingUserNotificationsCountResult)
	if err := c.get("/api/users/me/notifications/pending/count", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListPendingUserNotifications(rq ApiListPendingUserNotificationsArgs) (rs *ApiListPendingUserNotificationsResult, err error) {
	rs = new(ApiListPendingUserNotificationsResult)
	values := make(url.Values)
	if rq.Timestamp != nil {
		values.Set("timestamp", strconv.FormatUint(uint64(*rq.Timestamp), 10))
	}
	if err := c.get("/api/users/me/notifications/pending", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListAndResetUserNotifications(rq ApiListAndResetUserNotificationsArgs) (rs *ApiListAndResetUserNotificationsResult, err error) {
	rs = new(ApiListAndResetUserNotificationsResult)
	if err := c.do("POST", "/api/users/me/notifications", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetGrrUser() (rs *ApiGrrUser, err error) {
	rs = new(ApiGrrUser)
	if err := c.get("/api/users/me", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) UpdateGrrUser(rq ApiGrrUser) error {
	return c.post("/api/users/me", &rq)
}
func (c *APIClient) ListPendingGlobalNotifications() (rs *ApiListPendingGlobalNotificationsResult, err error) {
	rs = new(ApiListPendingGlobalNotificationsResult)
	if err := c.get("/api/users/me/notifications/pending/global", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetConfig() (rs *ApiGetConfigResult, err error) {
	rs = new(ApiGetConfigResult)
	if err := c.get("/api/config", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetConfigOption(rq ApiGetConfigOptionArgs) (rs *ApiConfigOption, err error) {
	rs = new(ApiConfigOption)
	values := make(url.Values)
	if err := c.get("/api/config/"+path.Base(rq.GetName()), values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListKbFields() (rs *ApiListKbFieldsResult, err error) {
	rs = new(ApiListKbFieldsResult)
	if err := c.get("/api/clients/kb-fields", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListFlowDescriptors(rq ApiListFlowDescriptorsArgs) (rs *ApiListFlowDescriptorsResult, err error) {
	rs = new(ApiListFlowDescriptorsResult)
	values := make(url.Values)
	if rq.FlowType != nil {
		values.Set("flow_type", strconv.FormatInt(int64(*rq.FlowType), 10))
	}
	if err := c.get("/api/flows/descriptors", values, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) ListKnownEncodings() (rs *ApiListKnownEncodingsResult, err error) {
	rs = new(ApiListKnownEncodingsResult)
	if err := c.get("/api/reflection/file-encodings", nil, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) StartRobotGetFilesOperation(rq ApiStartRobotGetFilesOperationArgs) (rs *ApiStartRobotGetFilesOperationResult, err error) {
	rs = new(ApiStartRobotGetFilesOperationResult)
	if err := c.do("POST", "/api/robot-actions/get-files", &rq, rs); err != nil {
		return nil, err
	}
	return
}
func (c *APIClient) GetRobotGetFilesOperationState(rq ApiGetRobotGetFilesOperationStateArgs) (rs *ApiGetRobotGetFilesOperationStateResult, err error) {
	rs = new(ApiGetRobotGetFilesOperationStateResult)
	values := make(url.Values)
	if err := c.get("/api/robot-actions/get-files/"+path.Base(rq.GetOperationId()), values, rs); err != nil {
		return nil, err
	}
	return
}

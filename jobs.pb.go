// Code generated by protoc-gen-go.
// source: jobs.proto
// DO NOT EDIT!

package apiclient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is done because signing is done on a group of messages as they arrive
// over the POST, but after decryption and unpacking, messages are queued
// individually and therefore need to retain their authenticated status.
type GrrMessage_AuthorizationState int32

const (
	GrrMessage_UNAUTHENTICATED GrrMessage_AuthorizationState = 0
	GrrMessage_AUTHENTICATED   GrrMessage_AuthorizationState = 1
	// This indicates that clocks are out of sync and this message may be a
	// replay.
	GrrMessage_DESYNCHRONIZED GrrMessage_AuthorizationState = 2
)

var GrrMessage_AuthorizationState_name = map[int32]string{
	0: "UNAUTHENTICATED",
	1: "AUTHENTICATED",
	2: "DESYNCHRONIZED",
}
var GrrMessage_AuthorizationState_value = map[string]int32{
	"UNAUTHENTICATED": 0,
	"AUTHENTICATED":   1,
	"DESYNCHRONIZED":  2,
}

func (x GrrMessage_AuthorizationState) Enum() *GrrMessage_AuthorizationState {
	p := new(GrrMessage_AuthorizationState)
	*p = x
	return p
}
func (x GrrMessage_AuthorizationState) String() string {
	return proto.EnumName(GrrMessage_AuthorizationState_name, int32(x))
}
func (x *GrrMessage_AuthorizationState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GrrMessage_AuthorizationState_value, data, "GrrMessage_AuthorizationState")
	if err != nil {
		return err
	}
	*x = GrrMessage_AuthorizationState(value)
	return nil
}
func (GrrMessage_AuthorizationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{1, 0}
}

type GrrMessage_Type int32

const (
	GrrMessage_MESSAGE  GrrMessage_Type = 0
	GrrMessage_STATUS   GrrMessage_Type = 1
	GrrMessage_ITERATOR GrrMessage_Type = 2
)

var GrrMessage_Type_name = map[int32]string{
	0: "MESSAGE",
	1: "STATUS",
	2: "ITERATOR",
}
var GrrMessage_Type_value = map[string]int32{
	"MESSAGE":  0,
	"STATUS":   1,
	"ITERATOR": 2,
}

func (x GrrMessage_Type) Enum() *GrrMessage_Type {
	p := new(GrrMessage_Type)
	*p = x
	return p
}
func (x GrrMessage_Type) String() string {
	return proto.EnumName(GrrMessage_Type_name, int32(x))
}
func (x *GrrMessage_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GrrMessage_Type_value, data, "GrrMessage_Type")
	if err != nil {
		return err
	}
	*x = GrrMessage_Type(value)
	return nil
}
func (GrrMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{1, 1} }

type GrrMessage_Priority int32

const (
	GrrMessage_LOW_PRIORITY    GrrMessage_Priority = 0
	GrrMessage_MEDIUM_PRIORITY GrrMessage_Priority = 1
	GrrMessage_HIGH_PRIORITY   GrrMessage_Priority = 2
)

var GrrMessage_Priority_name = map[int32]string{
	0: "LOW_PRIORITY",
	1: "MEDIUM_PRIORITY",
	2: "HIGH_PRIORITY",
}
var GrrMessage_Priority_value = map[string]int32{
	"LOW_PRIORITY":    0,
	"MEDIUM_PRIORITY": 1,
	"HIGH_PRIORITY":   2,
}

func (x GrrMessage_Priority) Enum() *GrrMessage_Priority {
	p := new(GrrMessage_Priority)
	*p = x
	return p
}
func (x GrrMessage_Priority) String() string {
	return proto.EnumName(GrrMessage_Priority_name, int32(x))
}
func (x *GrrMessage_Priority) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GrrMessage_Priority_value, data, "GrrMessage_Priority")
	if err != nil {
		return err
	}
	*x = GrrMessage_Priority(value)
	return nil
}
func (GrrMessage_Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{1, 2} }

type SignedMessageList_CompressionType int32

const (
	SignedMessageList_UNCOMPRESSED SignedMessageList_CompressionType = 0
	// Compressed using the zlib.compress() function.
	SignedMessageList_ZCOMPRESSION SignedMessageList_CompressionType = 1
)

var SignedMessageList_CompressionType_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "ZCOMPRESSION",
}
var SignedMessageList_CompressionType_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"ZCOMPRESSION": 1,
}

func (x SignedMessageList_CompressionType) Enum() *SignedMessageList_CompressionType {
	p := new(SignedMessageList_CompressionType)
	*p = x
	return p
}
func (x SignedMessageList_CompressionType) String() string {
	return proto.EnumName(SignedMessageList_CompressionType_name, int32(x))
}
func (x *SignedMessageList_CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SignedMessageList_CompressionType_value, data, "SignedMessageList_CompressionType")
	if err != nil {
		return err
	}
	*x = SignedMessageList_CompressionType(value)
	return nil
}
func (SignedMessageList_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{3, 0}
}

type CipherProperties_HMACType int32

const (
	// Older clients use a HMAC only on the encrypted message.
	CipherProperties_SIMPLE_HMAC CipherProperties_HMACType = 0
	// Newer clients also include the encrypted cipher and API version in the
	// hmac.
	CipherProperties_FULL_HMAC CipherProperties_HMACType = 1
)

var CipherProperties_HMACType_name = map[int32]string{
	0: "SIMPLE_HMAC",
	1: "FULL_HMAC",
}
var CipherProperties_HMACType_value = map[string]int32{
	"SIMPLE_HMAC": 0,
	"FULL_HMAC":   1,
}

func (x CipherProperties_HMACType) Enum() *CipherProperties_HMACType {
	p := new(CipherProperties_HMACType)
	*p = x
	return p
}
func (x CipherProperties_HMACType) String() string {
	return proto.EnumName(CipherProperties_HMACType_name, int32(x))
}
func (x *CipherProperties_HMACType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CipherProperties_HMACType_value, data, "CipherProperties_HMACType")
	if err != nil {
		return err
	}
	*x = CipherProperties_HMACType(value)
	return nil
}
func (CipherProperties_HMACType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{4, 0}
}

// This status code applies for the entire communication.
type ClientCommunication_Status int32

const (
	ClientCommunication_OK           ClientCommunication_Status = 200
	ClientCommunication_BAD_REQUEST  ClientCommunication_Status = 400
	ClientCommunication_CIPHER_ERROR ClientCommunication_Status = 406
)

var ClientCommunication_Status_name = map[int32]string{
	200: "OK",
	400: "BAD_REQUEST",
	406: "CIPHER_ERROR",
}
var ClientCommunication_Status_value = map[string]int32{
	"OK":           200,
	"BAD_REQUEST":  400,
	"CIPHER_ERROR": 406,
}

func (x ClientCommunication_Status) Enum() *ClientCommunication_Status {
	p := new(ClientCommunication_Status)
	*p = x
	return p
}
func (x ClientCommunication_Status) String() string {
	return proto.EnumName(ClientCommunication_Status_name, int32(x))
}
func (x *ClientCommunication_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientCommunication_Status_value, data, "ClientCommunication_Status")
	if err != nil {
		return err
	}
	*x = ClientCommunication_Status(value)
	return nil
}
func (ClientCommunication_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0}
}

type GrrStatus_ReturnedStatus int32

const (
	GrrStatus_OK                      GrrStatus_ReturnedStatus = 0
	GrrStatus_IOERROR                 GrrStatus_ReturnedStatus = 1
	GrrStatus_RETRANSMISSION_DETECTED GrrStatus_ReturnedStatus = 2
	GrrStatus_CLIENT_KILLED           GrrStatus_ReturnedStatus = 3
	GrrStatus_NETWORK_LIMIT_EXCEEDED  GrrStatus_ReturnedStatus = 4
	GrrStatus_WORKER_STUCK            GrrStatus_ReturnedStatus = 9
	GrrStatus_GENERIC_ERROR           GrrStatus_ReturnedStatus = 10
)

var GrrStatus_ReturnedStatus_name = map[int32]string{
	0:  "OK",
	1:  "IOERROR",
	2:  "RETRANSMISSION_DETECTED",
	3:  "CLIENT_KILLED",
	4:  "NETWORK_LIMIT_EXCEEDED",
	9:  "WORKER_STUCK",
	10: "GENERIC_ERROR",
}
var GrrStatus_ReturnedStatus_value = map[string]int32{
	"OK":                      0,
	"IOERROR":                 1,
	"RETRANSMISSION_DETECTED": 2,
	"CLIENT_KILLED":           3,
	"NETWORK_LIMIT_EXCEEDED":  4,
	"WORKER_STUCK":            9,
	"GENERIC_ERROR":           10,
}

func (x GrrStatus_ReturnedStatus) Enum() *GrrStatus_ReturnedStatus {
	p := new(GrrStatus_ReturnedStatus)
	*p = x
	return p
}
func (x GrrStatus_ReturnedStatus) String() string {
	return proto.EnumName(GrrStatus_ReturnedStatus_name, int32(x))
}
func (x *GrrStatus_ReturnedStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GrrStatus_ReturnedStatus_value, data, "GrrStatus_ReturnedStatus")
	if err != nil {
		return err
	}
	*x = GrrStatus_ReturnedStatus(value)
	return nil
}
func (GrrStatus_ReturnedStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{7, 0} }

type HuntNotification_Status int32

const (
	HuntNotification_UNKNOWN HuntNotification_Status = 0
	HuntNotification_OK      HuntNotification_Status = 1
	HuntNotification_ERROR   HuntNotification_Status = 2
	HuntNotification_BAD     HuntNotification_Status = 3
)

var HuntNotification_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "ERROR",
	3: "BAD",
}
var HuntNotification_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"ERROR":   2,
	"BAD":     3,
}

func (x HuntNotification_Status) Enum() *HuntNotification_Status {
	p := new(HuntNotification_Status)
	*p = x
	return p
}
func (x HuntNotification_Status) String() string {
	return proto.EnumName(HuntNotification_Status_name, int32(x))
}
func (x *HuntNotification_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HuntNotification_Status_value, data, "HuntNotification_Status")
	if err != nil {
		return err
	}
	*x = HuntNotification_Status(value)
	return nil
}
func (HuntNotification_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{10, 0} }

type FlowNotification_Status int32

const (
	FlowNotification_UNKNOWN FlowNotification_Status = 0
	FlowNotification_OK      FlowNotification_Status = 1
	FlowNotification_ERROR   FlowNotification_Status = 2
)

var FlowNotification_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "ERROR",
}
var FlowNotification_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"ERROR":   2,
}

func (x FlowNotification_Status) Enum() *FlowNotification_Status {
	p := new(FlowNotification_Status)
	*p = x
	return p
}
func (x FlowNotification_Status) String() string {
	return proto.EnumName(FlowNotification_Status_name, int32(x))
}
func (x *FlowNotification_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlowNotification_Status_value, data, "FlowNotification_Status")
	if err != nil {
		return err
	}
	*x = FlowNotification_Status(value)
	return nil
}
func (FlowNotification_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{12, 0} }

type DataBlob_CompressionType int32

const (
	DataBlob_UNCOMPRESSED DataBlob_CompressionType = 0
	// Compressed using the zlib.compress() function.
	DataBlob_ZCOMPRESSION DataBlob_CompressionType = 1
)

var DataBlob_CompressionType_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "ZCOMPRESSION",
}
var DataBlob_CompressionType_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"ZCOMPRESSION": 1,
}

func (x DataBlob_CompressionType) Enum() *DataBlob_CompressionType {
	p := new(DataBlob_CompressionType)
	*p = x
	return p
}
func (x DataBlob_CompressionType) String() string {
	return proto.EnumName(DataBlob_CompressionType_name, int32(x))
}
func (x *DataBlob_CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataBlob_CompressionType_value, data, "DataBlob_CompressionType")
	if err != nil {
		return err
	}
	*x = DataBlob_CompressionType(value)
	return nil
}
func (DataBlob_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{15, 0}
}

type Flow_State int32

const (
	Flow_RUNNING    Flow_State = 0
	Flow_TERMINATED Flow_State = 1
	Flow_ERROR      Flow_State = 3
	// A well known flow will not queue any messages and always
	// forward messages to the worker:
	Flow_WELL_KNOWN Flow_State = 2
)

var Flow_State_name = map[int32]string{
	0: "RUNNING",
	1: "TERMINATED",
	3: "ERROR",
	2: "WELL_KNOWN",
}
var Flow_State_value = map[string]int32{
	"RUNNING":    0,
	"TERMINATED": 1,
	"ERROR":      3,
	"WELL_KNOWN": 2,
}

func (x Flow_State) Enum() *Flow_State {
	p := new(Flow_State)
	*p = x
	return p
}
func (x Flow_State) String() string {
	return proto.EnumName(Flow_State_name, int32(x))
}
func (x *Flow_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Flow_State_value, data, "Flow_State")
	if err != nil {
		return err
	}
	*x = Flow_State(value)
	return nil
}
func (Flow_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{21, 0} }

type PathSpec_PathType int32

const (
	PathSpec_UNSET    PathSpec_PathType = -1
	PathSpec_OS       PathSpec_PathType = 0
	PathSpec_TSK      PathSpec_PathType = 1
	PathSpec_REGISTRY PathSpec_PathType = 2
	PathSpec_MEMORY   PathSpec_PathType = 3
	PathSpec_TMPFILE  PathSpec_PathType = 4
)

var PathSpec_PathType_name = map[int32]string{
	-1: "UNSET",
	0:  "OS",
	1:  "TSK",
	2:  "REGISTRY",
	3:  "MEMORY",
	4:  "TMPFILE",
}
var PathSpec_PathType_value = map[string]int32{
	"UNSET":    -1,
	"OS":       0,
	"TSK":      1,
	"REGISTRY": 2,
	"MEMORY":   3,
	"TMPFILE":  4,
}

func (x PathSpec_PathType) Enum() *PathSpec_PathType {
	p := new(PathSpec_PathType)
	*p = x
	return p
}
func (x PathSpec_PathType) String() string {
	return proto.EnumName(PathSpec_PathType_name, int32(x))
}
func (x *PathSpec_PathType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PathSpec_PathType_value, data, "PathSpec_PathType")
	if err != nil {
		return err
	}
	*x = PathSpec_PathType(value)
	return nil
}
func (PathSpec_PathType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{29, 0} }

type PathSpec_Options int32

const (
	PathSpec_CASE_INSENSITIVE PathSpec_Options = 0
	PathSpec_CASE_LITERAL     PathSpec_Options = 1
	// The path component is a regular expression.
	PathSpec_REGEX PathSpec_Options = 2
	// Indicates that this pathspec represents any subdirectory recursively.
	PathSpec_RECURSIVE PathSpec_Options = 3
)

var PathSpec_Options_name = map[int32]string{
	0: "CASE_INSENSITIVE",
	1: "CASE_LITERAL",
	2: "REGEX",
	3: "RECURSIVE",
}
var PathSpec_Options_value = map[string]int32{
	"CASE_INSENSITIVE": 0,
	"CASE_LITERAL":     1,
	"REGEX":            2,
	"RECURSIVE":        3,
}

func (x PathSpec_Options) Enum() *PathSpec_Options {
	p := new(PathSpec_Options)
	*p = x
	return p
}
func (x PathSpec_Options) String() string {
	return proto.EnumName(PathSpec_Options_name, int32(x))
}
func (x *PathSpec_Options) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PathSpec_Options_value, data, "PathSpec_Options")
	if err != nil {
		return err
	}
	*x = PathSpec_Options(value)
	return nil
}
func (PathSpec_Options) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{29, 1} }

type PathSpecTskFsAttrType int32

const (
	PathSpec_TSK_FS_ATTR_TYPE_DEFAULT       PathSpecTskFsAttrType = 1
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_SI       PathSpecTskFsAttrType = 16
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_ATTRLIST PathSpecTskFsAttrType = 32
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_FNAME    PathSpecTskFsAttrType = 48
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_VVER     PathSpecTskFsAttrType = 64
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_OBJID    PathSpecTskFsAttrType = 64
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_SEC      PathSpecTskFsAttrType = 80
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_VNAME    PathSpecTskFsAttrType = 96
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_VINFO    PathSpecTskFsAttrType = 112
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_DATA     PathSpecTskFsAttrType = 128
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_IDXROOT  PathSpecTskFsAttrType = 144
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_IDXALLOC PathSpecTskFsAttrType = 160
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_BITMAP   PathSpecTskFsAttrType = 176
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_SYMLNK   PathSpecTskFsAttrType = 192
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_REPARSE  PathSpecTskFsAttrType = 192
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_EAINFO   PathSpecTskFsAttrType = 208
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_EA       PathSpecTskFsAttrType = 224
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_PROP     PathSpecTskFsAttrType = 240
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_LOG      PathSpecTskFsAttrType = 256
	PathSpec_TSK_FS_ATTR_TYPE_UNIX_INDIR    PathSpecTskFsAttrType = 4097
)

var PathSpecTskFsAttrType_name = map[int32]string{
	1:  "TSK_FS_ATTR_TYPE_DEFAULT",
	16: "TSK_FS_ATTR_TYPE_NTFS_SI",
	32: "TSK_FS_ATTR_TYPE_NTFS_ATTRLIST",
	48: "TSK_FS_ATTR_TYPE_NTFS_FNAME",
	64: "TSK_FS_ATTR_TYPE_NTFS_VVER",
	// Duplicate value: 64: "TSK_FS_ATTR_TYPE_NTFS_OBJID",
	80:  "TSK_FS_ATTR_TYPE_NTFS_SEC",
	96:  "TSK_FS_ATTR_TYPE_NTFS_VNAME",
	112: "TSK_FS_ATTR_TYPE_NTFS_VINFO",
	128: "TSK_FS_ATTR_TYPE_NTFS_DATA",
	144: "TSK_FS_ATTR_TYPE_NTFS_IDXROOT",
	160: "TSK_FS_ATTR_TYPE_NTFS_IDXALLOC",
	176: "TSK_FS_ATTR_TYPE_NTFS_BITMAP",
	192: "TSK_FS_ATTR_TYPE_NTFS_SYMLNK",
	// Duplicate value: 192: "TSK_FS_ATTR_TYPE_NTFS_REPARSE",
	208:  "TSK_FS_ATTR_TYPE_NTFS_EAINFO",
	224:  "TSK_FS_ATTR_TYPE_NTFS_EA",
	240:  "TSK_FS_ATTR_TYPE_NTFS_PROP",
	256:  "TSK_FS_ATTR_TYPE_NTFS_LOG",
	4097: "TSK_FS_ATTR_TYPE_UNIX_INDIR",
}
var PathSpecTskFsAttrType_value = map[string]int32{
	"TSK_FS_ATTR_TYPE_DEFAULT":       1,
	"TSK_FS_ATTR_TYPE_NTFS_SI":       16,
	"TSK_FS_ATTR_TYPE_NTFS_ATTRLIST": 32,
	"TSK_FS_ATTR_TYPE_NTFS_FNAME":    48,
	"TSK_FS_ATTR_TYPE_NTFS_VVER":     64,
	"TSK_FS_ATTR_TYPE_NTFS_OBJID":    64,
	"TSK_FS_ATTR_TYPE_NTFS_SEC":      80,
	"TSK_FS_ATTR_TYPE_NTFS_VNAME":    96,
	"TSK_FS_ATTR_TYPE_NTFS_VINFO":    112,
	"TSK_FS_ATTR_TYPE_NTFS_DATA":     128,
	"TSK_FS_ATTR_TYPE_NTFS_IDXROOT":  144,
	"TSK_FS_ATTR_TYPE_NTFS_IDXALLOC": 160,
	"TSK_FS_ATTR_TYPE_NTFS_BITMAP":   176,
	"TSK_FS_ATTR_TYPE_NTFS_SYMLNK":   192,
	"TSK_FS_ATTR_TYPE_NTFS_REPARSE":  192,
	"TSK_FS_ATTR_TYPE_NTFS_EAINFO":   208,
	"TSK_FS_ATTR_TYPE_NTFS_EA":       224,
	"TSK_FS_ATTR_TYPE_NTFS_PROP":     240,
	"TSK_FS_ATTR_TYPE_NTFS_LOG":      256,
	"TSK_FS_ATTR_TYPE_UNIX_INDIR":    4097,
}

func (x PathSpecTskFsAttrType) Enum() *PathSpecTskFsAttrType {
	p := new(PathSpecTskFsAttrType)
	*p = x
	return p
}
func (x PathSpecTskFsAttrType) String() string {
	return proto.EnumName(PathSpecTskFsAttrType_name, int32(x))
}
func (x *PathSpecTskFsAttrType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PathSpecTskFsAttrType_value, data, "PathSpecTskFsAttrType")
	if err != nil {
		return err
	}
	*x = PathSpecTskFsAttrType(value)
	return nil
}
func (PathSpecTskFsAttrType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{29, 2} }

// These are used when mapping registry keys to the VFS
type StatEntry_RegistryType int32

const (
	StatEntry_REG_NONE                StatEntry_RegistryType = 0
	StatEntry_REG_SZ                  StatEntry_RegistryType = 1
	StatEntry_REG_EXPAND_SZ           StatEntry_RegistryType = 2
	StatEntry_REG_BINARY              StatEntry_RegistryType = 3
	StatEntry_REG_DWORD               StatEntry_RegistryType = 4
	StatEntry_REG_DWORD_LITTLE_ENDIAN StatEntry_RegistryType = 4
	StatEntry_REG_DWORD_BIG_ENDIAN    StatEntry_RegistryType = 5
	StatEntry_REG_LINK                StatEntry_RegistryType = 6
	StatEntry_REG_MULTI_SZ            StatEntry_RegistryType = 7
	StatEntry_REG_QWORD               StatEntry_RegistryType = 11
)

var StatEntry_RegistryType_name = map[int32]string{
	0: "REG_NONE",
	1: "REG_SZ",
	2: "REG_EXPAND_SZ",
	3: "REG_BINARY",
	4: "REG_DWORD",
	// Duplicate value: 4: "REG_DWORD_LITTLE_ENDIAN",
	5:  "REG_DWORD_BIG_ENDIAN",
	6:  "REG_LINK",
	7:  "REG_MULTI_SZ",
	11: "REG_QWORD",
}
var StatEntry_RegistryType_value = map[string]int32{
	"REG_NONE":                0,
	"REG_SZ":                  1,
	"REG_EXPAND_SZ":           2,
	"REG_BINARY":              3,
	"REG_DWORD":               4,
	"REG_DWORD_LITTLE_ENDIAN": 4,
	"REG_DWORD_BIG_ENDIAN":    5,
	"REG_LINK":                6,
	"REG_MULTI_SZ":            7,
	"REG_QWORD":               11,
}

func (x StatEntry_RegistryType) Enum() *StatEntry_RegistryType {
	p := new(StatEntry_RegistryType)
	*p = x
	return p
}
func (x StatEntry_RegistryType) String() string {
	return proto.EnumName(StatEntry_RegistryType_name, int32(x))
}
func (x *StatEntry_RegistryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatEntry_RegistryType_value, data, "StatEntry_RegistryType")
	if err != nil {
		return err
	}
	*x = StatEntry_RegistryType(value)
	return nil
}
func (StatEntry_RegistryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{32, 0} }

type Certificate_Type int32

const (
	Certificate_CSR Certificate_Type = 0
	Certificate_CRT Certificate_Type = 1
	Certificate_CA  Certificate_Type = 2
)

var Certificate_Type_name = map[int32]string{
	0: "CSR",
	1: "CRT",
	2: "CA",
}
var Certificate_Type_value = map[string]int32{
	"CSR": 0,
	"CRT": 1,
	"CA":  2,
}

func (x Certificate_Type) Enum() *Certificate_Type {
	p := new(Certificate_Type)
	*p = x
	return p
}
func (x Certificate_Type) String() string {
	return proto.EnumName(Certificate_Type_name, int32(x))
}
func (x *Certificate_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Certificate_Type_value, data, "Certificate_Type")
	if err != nil {
		return err
	}
	*x = Certificate_Type(value)
	return nil
}
func (Certificate_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{38, 0} }

type NetworkAddress_Family int32

const (
	NetworkAddress_INET  NetworkAddress_Family = 0
	NetworkAddress_INET6 NetworkAddress_Family = 1
)

var NetworkAddress_Family_name = map[int32]string{
	0: "INET",
	1: "INET6",
}
var NetworkAddress_Family_value = map[string]int32{
	"INET":  0,
	"INET6": 1,
}

func (x NetworkAddress_Family) Enum() *NetworkAddress_Family {
	p := new(NetworkAddress_Family)
	*p = x
	return p
}
func (x NetworkAddress_Family) String() string {
	return proto.EnumName(NetworkAddress_Family_name, int32(x))
}
func (x *NetworkAddress_Family) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NetworkAddress_Family_value, data, "NetworkAddress_Family")
	if err != nil {
		return err
	}
	*x = NetworkAddress_Family(value)
	return nil
}
func (NetworkAddress_Family) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{41, 0} }

// The fingerprinting methods the fingerprinter can be asked to perform.
// If none is given, all are applied.
type FingerprintTuple_Type int32

const (
	FingerprintTuple_FPT_GENERIC FingerprintTuple_Type = 0
	FingerprintTuple_FPT_PE_COFF FingerprintTuple_Type = 1
)

var FingerprintTuple_Type_name = map[int32]string{
	0: "FPT_GENERIC",
	1: "FPT_PE_COFF",
}
var FingerprintTuple_Type_value = map[string]int32{
	"FPT_GENERIC": 0,
	"FPT_PE_COFF": 1,
}

func (x FingerprintTuple_Type) Enum() *FingerprintTuple_Type {
	p := new(FingerprintTuple_Type)
	*p = x
	return p
}
func (x FingerprintTuple_Type) String() string {
	return proto.EnumName(FingerprintTuple_Type_name, int32(x))
}
func (x *FingerprintTuple_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FingerprintTuple_Type_value, data, "FingerprintTuple_Type")
	if err != nil {
		return err
	}
	*x = FingerprintTuple_Type(value)
	return nil
}
func (FingerprintTuple_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{45, 0} }

// The hash functions that a fingerprinting method may employ.
// If none is given, all applicable ones are used.
type FingerprintTuple_HashType int32

const (
	FingerprintTuple_MD5    FingerprintTuple_HashType = 0
	FingerprintTuple_SHA1   FingerprintTuple_HashType = 1
	FingerprintTuple_SHA256 FingerprintTuple_HashType = 2
)

var FingerprintTuple_HashType_name = map[int32]string{
	0: "MD5",
	1: "SHA1",
	2: "SHA256",
}
var FingerprintTuple_HashType_value = map[string]int32{
	"MD5":    0,
	"SHA1":   1,
	"SHA256": 2,
}

func (x FingerprintTuple_HashType) Enum() *FingerprintTuple_HashType {
	p := new(FingerprintTuple_HashType)
	*p = x
	return p
}
func (x FingerprintTuple_HashType) String() string {
	return proto.EnumName(FingerprintTuple_HashType_name, int32(x))
}
func (x *FingerprintTuple_HashType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FingerprintTuple_HashType_value, data, "FingerprintTuple_HashType")
	if err != nil {
		return err
	}
	*x = FingerprintTuple_HashType(value)
	return nil
}
func (FingerprintTuple_HashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{45, 1}
}

type SignedBlob_HashType int32

const (
	SignedBlob_MD5    SignedBlob_HashType = 0
	SignedBlob_SHA1   SignedBlob_HashType = 1
	SignedBlob_SHA256 SignedBlob_HashType = 2
)

var SignedBlob_HashType_name = map[int32]string{
	0: "MD5",
	1: "SHA1",
	2: "SHA256",
}
var SignedBlob_HashType_value = map[string]int32{
	"MD5":    0,
	"SHA1":   1,
	"SHA256": 2,
}

func (x SignedBlob_HashType) Enum() *SignedBlob_HashType {
	p := new(SignedBlob_HashType)
	*p = x
	return p
}
func (x SignedBlob_HashType) String() string {
	return proto.EnumName(SignedBlob_HashType_name, int32(x))
}
func (x *SignedBlob_HashType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SignedBlob_HashType_value, data, "SignedBlob_HashType")
	if err != nil {
		return err
	}
	*x = SignedBlob_HashType(value)
	return nil
}
func (SignedBlob_HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{48, 0} }

type SignedBlob_SignatureType int32

const (
	SignedBlob_RSA_2048 SignedBlob_SignatureType = 0
)

var SignedBlob_SignatureType_name = map[int32]string{
	0: "RSA_2048",
}
var SignedBlob_SignatureType_value = map[string]int32{
	"RSA_2048": 0,
}

func (x SignedBlob_SignatureType) Enum() *SignedBlob_SignatureType {
	p := new(SignedBlob_SignatureType)
	*p = x
	return p
}
func (x SignedBlob_SignatureType) String() string {
	return proto.EnumName(SignedBlob_SignatureType_name, int32(x))
}
func (x *SignedBlob_SignatureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SignedBlob_SignatureType_value, data, "SignedBlob_SignatureType")
	if err != nil {
		return err
	}
	*x = SignedBlob_SignatureType(value)
	return nil
}
func (SignedBlob_SignatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{48, 1}
}

type SymmetricCipher_Algorithm int32

const (
	SymmetricCipher_NONE      SymmetricCipher_Algorithm = 0
	SymmetricCipher_AES128CBC SymmetricCipher_Algorithm = 1
)

var SymmetricCipher_Algorithm_name = map[int32]string{
	0: "NONE",
	1: "AES128CBC",
}
var SymmetricCipher_Algorithm_value = map[string]int32{
	"NONE":      0,
	"AES128CBC": 1,
}

func (x SymmetricCipher_Algorithm) Enum() *SymmetricCipher_Algorithm {
	p := new(SymmetricCipher_Algorithm)
	*p = x
	return p
}
func (x SymmetricCipher_Algorithm) String() string {
	return proto.EnumName(SymmetricCipher_Algorithm_name, int32(x))
}
func (x *SymmetricCipher_Algorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SymmetricCipher_Algorithm_value, data, "SymmetricCipher_Algorithm")
	if err != nil {
		return err
	}
	*x = SymmetricCipher_Algorithm(value)
	return nil
}
func (SymmetricCipher_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{49, 0}
}

// Linux specific options.
type DriverInstallTemplate_RewriteMode int32

const (
	DriverInstallTemplate_DISABLE DriverInstallTemplate_RewriteMode = 0
	DriverInstallTemplate_ENABLE  DriverInstallTemplate_RewriteMode = 1
	DriverInstallTemplate_FORCE   DriverInstallTemplate_RewriteMode = 2
)

var DriverInstallTemplate_RewriteMode_name = map[int32]string{
	0: "DISABLE",
	1: "ENABLE",
	2: "FORCE",
}
var DriverInstallTemplate_RewriteMode_value = map[string]int32{
	"DISABLE": 0,
	"ENABLE":  1,
	"FORCE":   2,
}

func (x DriverInstallTemplate_RewriteMode) Enum() *DriverInstallTemplate_RewriteMode {
	p := new(DriverInstallTemplate_RewriteMode)
	*p = x
	return p
}
func (x DriverInstallTemplate_RewriteMode) String() string {
	return proto.EnumName(DriverInstallTemplate_RewriteMode_name, int32(x))
}
func (x *DriverInstallTemplate_RewriteMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverInstallTemplate_RewriteMode_value, data, "DriverInstallTemplate_RewriteMode")
	if err != nil {
		return err
	}
	*x = DriverInstallTemplate_RewriteMode(value)
	return nil
}
func (DriverInstallTemplate_RewriteMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{57, 0}
}

type GrepSpec_Mode int32

const (
	GrepSpec_ALL_HITS  GrepSpec_Mode = 0
	GrepSpec_FIRST_HIT GrepSpec_Mode = 1
)

var GrepSpec_Mode_name = map[int32]string{
	0: "ALL_HITS",
	1: "FIRST_HIT",
}
var GrepSpec_Mode_value = map[string]int32{
	"ALL_HITS":  0,
	"FIRST_HIT": 1,
}

func (x GrepSpec_Mode) Enum() *GrepSpec_Mode {
	p := new(GrepSpec_Mode)
	*p = x
	return p
}
func (x GrepSpec_Mode) String() string {
	return proto.EnumName(GrepSpec_Mode_name, int32(x))
}
func (x *GrepSpec_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GrepSpec_Mode_value, data, "GrepSpec_Mode")
	if err != nil {
		return err
	}
	*x = GrepSpec_Mode(value)
	return nil
}
func (GrepSpec_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{59, 0} }

type ForemanClientRuleSet_MatchMode int32

const (
	ForemanClientRuleSet_MATCH_ALL ForemanClientRuleSet_MatchMode = 0
	ForemanClientRuleSet_MATCH_ANY ForemanClientRuleSet_MatchMode = 1
)

var ForemanClientRuleSet_MatchMode_name = map[int32]string{
	0: "MATCH_ALL",
	1: "MATCH_ANY",
}
var ForemanClientRuleSet_MatchMode_value = map[string]int32{
	"MATCH_ALL": 0,
	"MATCH_ANY": 1,
}

func (x ForemanClientRuleSet_MatchMode) Enum() *ForemanClientRuleSet_MatchMode {
	p := new(ForemanClientRuleSet_MatchMode)
	*p = x
	return p
}
func (x ForemanClientRuleSet_MatchMode) String() string {
	return proto.EnumName(ForemanClientRuleSet_MatchMode_name, int32(x))
}
func (x *ForemanClientRuleSet_MatchMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForemanClientRuleSet_MatchMode_value, data, "ForemanClientRuleSet_MatchMode")
	if err != nil {
		return err
	}
	*x = ForemanClientRuleSet_MatchMode(value)
	return nil
}
func (ForemanClientRuleSet_MatchMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{63, 0}
}

type ForemanClientRule_Type int32

const (
	ForemanClientRule_OS      ForemanClientRule_Type = 0
	ForemanClientRule_LABEL   ForemanClientRule_Type = 1
	ForemanClientRule_REGEX   ForemanClientRule_Type = 2
	ForemanClientRule_INTEGER ForemanClientRule_Type = 3
)

var ForemanClientRule_Type_name = map[int32]string{
	0: "OS",
	1: "LABEL",
	2: "REGEX",
	3: "INTEGER",
}
var ForemanClientRule_Type_value = map[string]int32{
	"OS":      0,
	"LABEL":   1,
	"REGEX":   2,
	"INTEGER": 3,
}

func (x ForemanClientRule_Type) Enum() *ForemanClientRule_Type {
	p := new(ForemanClientRule_Type)
	*p = x
	return p
}
func (x ForemanClientRule_Type) String() string {
	return proto.EnumName(ForemanClientRule_Type_name, int32(x))
}
func (x *ForemanClientRule_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForemanClientRule_Type_value, data, "ForemanClientRule_Type")
	if err != nil {
		return err
	}
	*x = ForemanClientRule_Type(value)
	return nil
}
func (ForemanClientRule_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{64, 0} }

type ForemanLabelClientRule_MatchMode int32

const (
	ForemanLabelClientRule_MATCH_ALL          ForemanLabelClientRule_MatchMode = 0
	ForemanLabelClientRule_MATCH_ANY          ForemanLabelClientRule_MatchMode = 1
	ForemanLabelClientRule_DOES_NOT_MATCH_ALL ForemanLabelClientRule_MatchMode = 2
	ForemanLabelClientRule_DOES_NOT_MATCH_ANY ForemanLabelClientRule_MatchMode = 3
)

var ForemanLabelClientRule_MatchMode_name = map[int32]string{
	0: "MATCH_ALL",
	1: "MATCH_ANY",
	2: "DOES_NOT_MATCH_ALL",
	3: "DOES_NOT_MATCH_ANY",
}
var ForemanLabelClientRule_MatchMode_value = map[string]int32{
	"MATCH_ALL":          0,
	"MATCH_ANY":          1,
	"DOES_NOT_MATCH_ALL": 2,
	"DOES_NOT_MATCH_ANY": 3,
}

func (x ForemanLabelClientRule_MatchMode) Enum() *ForemanLabelClientRule_MatchMode {
	p := new(ForemanLabelClientRule_MatchMode)
	*p = x
	return p
}
func (x ForemanLabelClientRule_MatchMode) String() string {
	return proto.EnumName(ForemanLabelClientRule_MatchMode_name, int32(x))
}
func (x *ForemanLabelClientRule_MatchMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForemanLabelClientRule_MatchMode_value, data, "ForemanLabelClientRule_MatchMode")
	if err != nil {
		return err
	}
	*x = ForemanLabelClientRule_MatchMode(value)
	return nil
}
func (ForemanLabelClientRule_MatchMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{66, 0}
}

type ForemanIntegerClientRule_Operator int32

const (
	ForemanIntegerClientRule_EQUAL        ForemanIntegerClientRule_Operator = 0
	ForemanIntegerClientRule_LESS_THAN    ForemanIntegerClientRule_Operator = 1
	ForemanIntegerClientRule_GREATER_THAN ForemanIntegerClientRule_Operator = 2
)

var ForemanIntegerClientRule_Operator_name = map[int32]string{
	0: "EQUAL",
	1: "LESS_THAN",
	2: "GREATER_THAN",
}
var ForemanIntegerClientRule_Operator_value = map[string]int32{
	"EQUAL":        0,
	"LESS_THAN":    1,
	"GREATER_THAN": 2,
}

func (x ForemanIntegerClientRule_Operator) Enum() *ForemanIntegerClientRule_Operator {
	p := new(ForemanIntegerClientRule_Operator)
	*p = x
	return p
}
func (x ForemanIntegerClientRule_Operator) String() string {
	return proto.EnumName(ForemanIntegerClientRule_Operator_name, int32(x))
}
func (x *ForemanIntegerClientRule_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForemanIntegerClientRule_Operator_value, data, "ForemanIntegerClientRule_Operator")
	if err != nil {
		return err
	}
	*x = ForemanIntegerClientRule_Operator(value)
	return nil
}
func (ForemanIntegerClientRule_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{68, 0}
}

// When the iterator is complete, we this state should be set to FINISHED.
type Iterator_State int32

const (
	Iterator_RUNNING  Iterator_State = 0
	Iterator_FINISHED Iterator_State = 1
)

var Iterator_State_name = map[int32]string{
	0: "RUNNING",
	1: "FINISHED",
}
var Iterator_State_value = map[string]int32{
	"RUNNING":  0,
	"FINISHED": 1,
}

func (x Iterator_State) Enum() *Iterator_State {
	p := new(Iterator_State)
	*p = x
	return p
}
func (x Iterator_State) String() string {
	return proto.EnumName(Iterator_State_name, int32(x))
}
func (x *Iterator_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Iterator_State_value, data, "Iterator_State")
	if err != nil {
		return err
	}
	*x = Iterator_State(value)
	return nil
}
func (Iterator_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{78, 0} }

type GlobalNotification_Type int32

const (
	GlobalNotification_INFO    GlobalNotification_Type = 0
	GlobalNotification_WARNING GlobalNotification_Type = 1
	GlobalNotification_ERROR   GlobalNotification_Type = 2
)

var GlobalNotification_Type_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
}
var GlobalNotification_Type_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
}

func (x GlobalNotification_Type) Enum() *GlobalNotification_Type {
	p := new(GlobalNotification_Type)
	*p = x
	return p
}
func (x GlobalNotification_Type) String() string {
	return proto.EnumName(GlobalNotification_Type_name, int32(x))
}
func (x *GlobalNotification_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GlobalNotification_Type_value, data, "GlobalNotification_Type")
	if err != nil {
		return err
	}
	*x = GlobalNotification_Type(value)
	return nil
}
func (GlobalNotification_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{81, 0} }

type AuditEvent_Action int32

const (
	AuditEvent_UNKNOWN                             AuditEvent_Action = 0
	AuditEvent_RUN_FLOW                            AuditEvent_Action = 1
	AuditEvent_CLIENT_APPROVAL_BREAK_GLASS_REQUEST AuditEvent_Action = 2
	AuditEvent_CLIENT_APPROVAL_GRANT               AuditEvent_Action = 3
	AuditEvent_CLIENT_APPROVAL_REQUEST             AuditEvent_Action = 4
	AuditEvent_CRON_APPROVAL_GRANT                 AuditEvent_Action = 5
	AuditEvent_CRON_APPROVAL_REQUEST               AuditEvent_Action = 6
	AuditEvent_HUNT_APPROVAL_GRANT                 AuditEvent_Action = 7
	AuditEvent_HUNT_APPROVAL_REQUEST               AuditEvent_Action = 8
	AuditEvent_HUNT_CREATED                        AuditEvent_Action = 9
	AuditEvent_HUNT_MODIFIED                       AuditEvent_Action = 10
	AuditEvent_HUNT_PAUSED                         AuditEvent_Action = 11
	AuditEvent_HUNT_STARTED                        AuditEvent_Action = 12
	AuditEvent_HUNT_STOPPED                        AuditEvent_Action = 13
	AuditEvent_CLIENT_ADD_LABEL                    AuditEvent_Action = 14
	AuditEvent_CLIENT_REMOVE_LABEL                 AuditEvent_Action = 15
)

var AuditEvent_Action_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "RUN_FLOW",
	2:  "CLIENT_APPROVAL_BREAK_GLASS_REQUEST",
	3:  "CLIENT_APPROVAL_GRANT",
	4:  "CLIENT_APPROVAL_REQUEST",
	5:  "CRON_APPROVAL_GRANT",
	6:  "CRON_APPROVAL_REQUEST",
	7:  "HUNT_APPROVAL_GRANT",
	8:  "HUNT_APPROVAL_REQUEST",
	9:  "HUNT_CREATED",
	10: "HUNT_MODIFIED",
	11: "HUNT_PAUSED",
	12: "HUNT_STARTED",
	13: "HUNT_STOPPED",
	14: "CLIENT_ADD_LABEL",
	15: "CLIENT_REMOVE_LABEL",
}
var AuditEvent_Action_value = map[string]int32{
	"UNKNOWN":                             0,
	"RUN_FLOW":                            1,
	"CLIENT_APPROVAL_BREAK_GLASS_REQUEST": 2,
	"CLIENT_APPROVAL_GRANT":               3,
	"CLIENT_APPROVAL_REQUEST":             4,
	"CRON_APPROVAL_GRANT":                 5,
	"CRON_APPROVAL_REQUEST":               6,
	"HUNT_APPROVAL_GRANT":                 7,
	"HUNT_APPROVAL_REQUEST":               8,
	"HUNT_CREATED":                        9,
	"HUNT_MODIFIED":                       10,
	"HUNT_PAUSED":                         11,
	"HUNT_STARTED":                        12,
	"HUNT_STOPPED":                        13,
	"CLIENT_ADD_LABEL":                    14,
	"CLIENT_REMOVE_LABEL":                 15,
}

func (x AuditEvent_Action) Enum() *AuditEvent_Action {
	p := new(AuditEvent_Action)
	*p = x
	return p
}
func (x AuditEvent_Action) String() string {
	return proto.EnumName(AuditEvent_Action_name, int32(x))
}
func (x *AuditEvent_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AuditEvent_Action_value, data, "AuditEvent_Action")
	if err != nil {
		return err
	}
	*x = AuditEvent_Action(value)
	return nil
}
func (AuditEvent_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{85, 0} }

type CronJobRunStatus_Status int32

const (
	CronJobRunStatus_OK      CronJobRunStatus_Status = 0
	CronJobRunStatus_TIMEOUT CronJobRunStatus_Status = 1
	CronJobRunStatus_ERROR   CronJobRunStatus_Status = 2
)

var CronJobRunStatus_Status_name = map[int32]string{
	0: "OK",
	1: "TIMEOUT",
	2: "ERROR",
}
var CronJobRunStatus_Status_value = map[string]int32{
	"OK":      0,
	"TIMEOUT": 1,
	"ERROR":   2,
}

func (x CronJobRunStatus_Status) Enum() *CronJobRunStatus_Status {
	p := new(CronJobRunStatus_Status)
	*p = x
	return p
}
func (x CronJobRunStatus_Status) String() string {
	return proto.EnumName(CronJobRunStatus_Status_name, int32(x))
}
func (x *CronJobRunStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CronJobRunStatus_Status_value, data, "CronJobRunStatus_Status")
	if err != nil {
		return err
	}
	*x = CronJobRunStatus_Status(value)
	return nil
}
func (CronJobRunStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{87, 0} }

type MetricFieldDefinition_FieldType int32

const (
	MetricFieldDefinition_INT MetricFieldDefinition_FieldType = 0
	MetricFieldDefinition_STR MetricFieldDefinition_FieldType = 1
)

var MetricFieldDefinition_FieldType_name = map[int32]string{
	0: "INT",
	1: "STR",
}
var MetricFieldDefinition_FieldType_value = map[string]int32{
	"INT": 0,
	"STR": 1,
}

func (x MetricFieldDefinition_FieldType) Enum() *MetricFieldDefinition_FieldType {
	p := new(MetricFieldDefinition_FieldType)
	*p = x
	return p
}
func (x MetricFieldDefinition_FieldType) String() string {
	return proto.EnumName(MetricFieldDefinition_FieldType_name, int32(x))
}
func (x *MetricFieldDefinition_FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricFieldDefinition_FieldType_value, data, "MetricFieldDefinition_FieldType")
	if err != nil {
		return err
	}
	*x = MetricFieldDefinition_FieldType(value)
	return nil
}
func (MetricFieldDefinition_FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{88, 0}
}

type MetricMetadata_MetricType int32

const (
	MetricMetadata_COUNTER MetricMetadata_MetricType = 0
	MetricMetadata_GAUGE   MetricMetadata_MetricType = 1
	MetricMetadata_EVENT   MetricMetadata_MetricType = 2
)

var MetricMetadata_MetricType_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "EVENT",
}
var MetricMetadata_MetricType_value = map[string]int32{
	"COUNTER": 0,
	"GAUGE":   1,
	"EVENT":   2,
}

func (x MetricMetadata_MetricType) Enum() *MetricMetadata_MetricType {
	p := new(MetricMetadata_MetricType)
	*p = x
	return p
}
func (x MetricMetadata_MetricType) String() string {
	return proto.EnumName(MetricMetadata_MetricType_name, int32(x))
}
func (x *MetricMetadata_MetricType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricMetadata_MetricType_value, data, "MetricMetadata_MetricType")
	if err != nil {
		return err
	}
	*x = MetricMetadata_MetricType(value)
	return nil
}
func (MetricMetadata_MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{89, 0}
}

type MetricMetadata_MetricUnits int32

const (
	MetricMetadata_SECONDS      MetricMetadata_MetricUnits = 0
	MetricMetadata_MILLISECONDS MetricMetadata_MetricUnits = 1
	MetricMetadata_MICROSECONDS MetricMetadata_MetricUnits = 2
	MetricMetadata_NANOSECONDS  MetricMetadata_MetricUnits = 3
	MetricMetadata_BITS         MetricMetadata_MetricUnits = 10
	MetricMetadata_BYTES        MetricMetadata_MetricUnits = 11
	MetricMetadata_KILOBYTES    MetricMetadata_MetricUnits = 12
	MetricMetadata_MEGABYTES    MetricMetadata_MetricUnits = 13
	MetricMetadata_GIGABYTES    MetricMetadata_MetricUnits = 14
)

var MetricMetadata_MetricUnits_name = map[int32]string{
	0:  "SECONDS",
	1:  "MILLISECONDS",
	2:  "MICROSECONDS",
	3:  "NANOSECONDS",
	10: "BITS",
	11: "BYTES",
	12: "KILOBYTES",
	13: "MEGABYTES",
	14: "GIGABYTES",
}
var MetricMetadata_MetricUnits_value = map[string]int32{
	"SECONDS":      0,
	"MILLISECONDS": 1,
	"MICROSECONDS": 2,
	"NANOSECONDS":  3,
	"BITS":         10,
	"BYTES":        11,
	"KILOBYTES":    12,
	"MEGABYTES":    13,
	"GIGABYTES":    14,
}

func (x MetricMetadata_MetricUnits) Enum() *MetricMetadata_MetricUnits {
	p := new(MetricMetadata_MetricUnits)
	*p = x
	return p
}
func (x MetricMetadata_MetricUnits) String() string {
	return proto.EnumName(MetricMetadata_MetricUnits_name, int32(x))
}
func (x *MetricMetadata_MetricUnits) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricMetadata_MetricUnits_value, data, "MetricMetadata_MetricUnits")
	if err != nil {
		return err
	}
	*x = MetricMetadata_MetricUnits(value)
	return nil
}
func (MetricMetadata_MetricUnits) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{89, 1}
}

// COUNTER metric must have an INT type and EVENT metric must have a
// DISTRIBUTION type. GAUGE metrics can be INT, FLOAT or STR.
type MetricMetadata_ValueType int32

const (
	MetricMetadata_INT          MetricMetadata_ValueType = 0
	MetricMetadata_FLOAT        MetricMetadata_ValueType = 1
	MetricMetadata_STR          MetricMetadata_ValueType = 2
	MetricMetadata_DISTRIBUTION MetricMetadata_ValueType = 3
)

var MetricMetadata_ValueType_name = map[int32]string{
	0: "INT",
	1: "FLOAT",
	2: "STR",
	3: "DISTRIBUTION",
}
var MetricMetadata_ValueType_value = map[string]int32{
	"INT":          0,
	"FLOAT":        1,
	"STR":          2,
	"DISTRIBUTION": 3,
}

func (x MetricMetadata_ValueType) Enum() *MetricMetadata_ValueType {
	p := new(MetricMetadata_ValueType)
	*p = x
	return p
}
func (x MetricMetadata_ValueType) String() string {
	return proto.EnumName(MetricMetadata_ValueType_name, int32(x))
}
func (x *MetricMetadata_ValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricMetadata_ValueType_value, data, "MetricMetadata_ValueType")
	if err != nil {
		return err
	}
	*x = MetricMetadata_ValueType(value)
	return nil
}
func (MetricMetadata_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{89, 2}
}

type NSRLInformation_FileType int32

const (
	NSRLInformation_NORMAL_FILE    NSRLInformation_FileType = 0
	NSRLInformation_MALICIOUS_FILE NSRLInformation_FileType = 1
	NSRLInformation_SPECIAL_FILE   NSRLInformation_FileType = 2
)

var NSRLInformation_FileType_name = map[int32]string{
	0: "NORMAL_FILE",
	1: "MALICIOUS_FILE",
	2: "SPECIAL_FILE",
}
var NSRLInformation_FileType_value = map[string]int32{
	"NORMAL_FILE":    0,
	"MALICIOUS_FILE": 1,
	"SPECIAL_FILE":   2,
}

func (x NSRLInformation_FileType) Enum() *NSRLInformation_FileType {
	p := new(NSRLInformation_FileType)
	*p = x
	return p
}
func (x NSRLInformation_FileType) String() string {
	return proto.EnumName(NSRLInformation_FileType_name, int32(x))
}
func (x *NSRLInformation_FileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NSRLInformation_FileType_value, data, "NSRLInformation_FileType")
	if err != nil {
		return err
	}
	*x = NSRLInformation_FileType(value)
	return nil
}
func (NSRLInformation_FileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{101, 0}
}

type HttpRequest struct {
	RawHeaders       *string `protobuf:"bytes,1,opt,name=raw_headers,json=rawHeaders" json:"raw_headers,omitempty"`
	UserAgent        *string `protobuf:"bytes,2,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	SourceIp         *string `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	Url              *string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	User             *string `protobuf:"bytes,5,opt,name=user,def=anonymous" json:"user,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Method           *string `protobuf:"bytes,7,opt,name=method,def=GET" json:"method,omitempty"`
	Referrer         *string `protobuf:"bytes,8,opt,name=referrer" json:"referrer,omitempty"`
	Size             *uint64 `protobuf:"varint,9,opt,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HttpRequest) Reset()                    { *m = HttpRequest{} }
func (m *HttpRequest) String() string            { return proto.CompactTextString(m) }
func (*HttpRequest) ProtoMessage()               {}
func (*HttpRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

const Default_HttpRequest_User string = "anonymous"
const Default_HttpRequest_Method string = "GET"

func (m *HttpRequest) GetRawHeaders() string {
	if m != nil && m.RawHeaders != nil {
		return *m.RawHeaders
	}
	return ""
}

func (m *HttpRequest) GetUserAgent() string {
	if m != nil && m.UserAgent != nil {
		return *m.UserAgent
	}
	return ""
}

func (m *HttpRequest) GetSourceIp() string {
	if m != nil && m.SourceIp != nil {
		return *m.SourceIp
	}
	return ""
}

func (m *HttpRequest) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *HttpRequest) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return Default_HttpRequest_User
}

func (m *HttpRequest) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *HttpRequest) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return Default_HttpRequest_Method
}

func (m *HttpRequest) GetReferrer() string {
	if m != nil && m.Referrer != nil {
		return *m.Referrer
	}
	return ""
}

func (m *HttpRequest) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// This message is sent between the client and the server.
type GrrMessage struct {
	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	RequestId  *uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ResponseId *uint64 `protobuf:"varint,3,opt,name=response_id,json=responseId" json:"response_id,omitempty"`
	Name       *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// This field contains an encoded rdfvalue.
	Args []byte `protobuf:"bytes,5,opt,name=args" json:"args,omitempty"`
	// Due to superceed the args field (not yet implemented). Contains the
	// argument to the client action, or the response from the client action.
	Arg       *EmbeddedRDFValue              `protobuf:"bytes,20,opt,name=arg" json:"arg,omitempty"`
	Source    *string                        `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	AuthState *GrrMessage_AuthorizationState `protobuf:"varint,7,opt,name=auth_state,json=authState,enum=GrrMessage_AuthorizationState,def=0" json:"auth_state,omitempty"`
	// The final response to a request carries this type which indicates it is a
	// status message.
	Type            *GrrMessage_Type     `protobuf:"varint,8,opt,name=type,enum=GrrMessage_Type,def=0" json:"type,omitempty"`
	Priority        *GrrMessage_Priority `protobuf:"varint,9,opt,name=priority,enum=GrrMessage_Priority,def=1" json:"priority,omitempty"`
	Ttl             *uint32              `protobuf:"varint,10,opt,name=ttl,def=10" json:"ttl,omitempty"`
	RequireFastpoll *bool                `protobuf:"varint,11,opt,name=require_fastpoll,json=requireFastpoll,def=1" json:"require_fastpoll,omitempty"`
	CpuLimit        *float32             `protobuf:"fixed32,12,opt,name=cpu_limit,json=cpuLimit,def=3600" json:"cpu_limit,omitempty"`
	ArgsAge         *uint64              `protobuf:"varint,13,opt,name=args_age,json=argsAge" json:"args_age,omitempty"`
	// The rdfvalue class of the args.
	ArgsRdfName *string `protobuf:"bytes,14,opt,name=args_rdf_name,json=argsRdfName" json:"args_rdf_name,omitempty"`
	// The id of this message in the scheduler.
	TaskId *uint64 `protobuf:"varint,15,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// The ttl used in the task scheduler.
	TaskTtl *int32  `protobuf:"varint,16,opt,name=task_ttl,json=taskTtl,def=7" json:"task_ttl,omitempty"`
	Queue   *string `protobuf:"bytes,17,opt,name=queue" json:"queue,omitempty"`
	Eta     *uint64 `protobuf:"varint,18,opt,name=eta" json:"eta,omitempty"`
	// Human readable info about the last process leasing this message.
	LastLease         *string `protobuf:"bytes,19,opt,name=last_lease,json=lastLease" json:"last_lease,omitempty"`
	NetworkBytesLimit *uint64 `protobuf:"varint,21,opt,name=network_bytes_limit,json=networkBytesLimit,def=10737418240" json:"network_bytes_limit,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *GrrMessage) Reset()                    { *m = GrrMessage{} }
func (m *GrrMessage) String() string            { return proto.CompactTextString(m) }
func (*GrrMessage) ProtoMessage()               {}
func (*GrrMessage) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

const Default_GrrMessage_AuthState GrrMessage_AuthorizationState = GrrMessage_UNAUTHENTICATED
const Default_GrrMessage_Type GrrMessage_Type = GrrMessage_MESSAGE
const Default_GrrMessage_Priority GrrMessage_Priority = GrrMessage_MEDIUM_PRIORITY
const Default_GrrMessage_Ttl uint32 = 10
const Default_GrrMessage_RequireFastpoll bool = true
const Default_GrrMessage_CpuLimit float32 = 3600
const Default_GrrMessage_TaskTtl int32 = 7
const Default_GrrMessage_NetworkBytesLimit uint64 = 10737418240

func (m *GrrMessage) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *GrrMessage) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *GrrMessage) GetResponseId() uint64 {
	if m != nil && m.ResponseId != nil {
		return *m.ResponseId
	}
	return 0
}

func (m *GrrMessage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GrrMessage) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *GrrMessage) GetArg() *EmbeddedRDFValue {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *GrrMessage) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *GrrMessage) GetAuthState() GrrMessage_AuthorizationState {
	if m != nil && m.AuthState != nil {
		return *m.AuthState
	}
	return Default_GrrMessage_AuthState
}

func (m *GrrMessage) GetType() GrrMessage_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_GrrMessage_Type
}

func (m *GrrMessage) GetPriority() GrrMessage_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_GrrMessage_Priority
}

func (m *GrrMessage) GetTtl() uint32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return Default_GrrMessage_Ttl
}

func (m *GrrMessage) GetRequireFastpoll() bool {
	if m != nil && m.RequireFastpoll != nil {
		return *m.RequireFastpoll
	}
	return Default_GrrMessage_RequireFastpoll
}

func (m *GrrMessage) GetCpuLimit() float32 {
	if m != nil && m.CpuLimit != nil {
		return *m.CpuLimit
	}
	return Default_GrrMessage_CpuLimit
}

func (m *GrrMessage) GetArgsAge() uint64 {
	if m != nil && m.ArgsAge != nil {
		return *m.ArgsAge
	}
	return 0
}

func (m *GrrMessage) GetArgsRdfName() string {
	if m != nil && m.ArgsRdfName != nil {
		return *m.ArgsRdfName
	}
	return ""
}

func (m *GrrMessage) GetTaskId() uint64 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *GrrMessage) GetTaskTtl() int32 {
	if m != nil && m.TaskTtl != nil {
		return *m.TaskTtl
	}
	return Default_GrrMessage_TaskTtl
}

func (m *GrrMessage) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return ""
}

func (m *GrrMessage) GetEta() uint64 {
	if m != nil && m.Eta != nil {
		return *m.Eta
	}
	return 0
}

func (m *GrrMessage) GetLastLease() string {
	if m != nil && m.LastLease != nil {
		return *m.LastLease
	}
	return ""
}

func (m *GrrMessage) GetNetworkBytesLimit() uint64 {
	if m != nil && m.NetworkBytesLimit != nil {
		return *m.NetworkBytesLimit
	}
	return Default_GrrMessage_NetworkBytesLimit
}

// This is a list of messages
type MessageList struct {
	Job              []*GrrMessage `protobuf:"bytes,1,rep,name=job" json:"job,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MessageList) Reset()                    { *m = MessageList{} }
func (m *MessageList) String() string            { return proto.CompactTextString(m) }
func (*MessageList) ProtoMessage()               {}
func (*MessageList) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *MessageList) GetJob() []*GrrMessage {
	if m != nil {
		return m.Job
	}
	return nil
}

// This is the protobuf which is transmitted on the wire
type SignedMessageList struct {
	// This is a serialized MessageList for signing
	MessageList []byte  `protobuf:"bytes,1,opt,name=message_list,json=messageList" json:"message_list,omitempty"`
	Source      *string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// How the message_list element is compressed
	Compression      *SignedMessageList_CompressionType `protobuf:"varint,4,opt,name=compression,enum=SignedMessageList_CompressionType,def=0" json:"compression,omitempty"`
	Timestamp        *uint64                            `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *SignedMessageList) Reset()                    { *m = SignedMessageList{} }
func (m *SignedMessageList) String() string            { return proto.CompactTextString(m) }
func (*SignedMessageList) ProtoMessage()               {}
func (*SignedMessageList) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

const Default_SignedMessageList_Compression SignedMessageList_CompressionType = SignedMessageList_UNCOMPRESSED

func (m *SignedMessageList) GetMessageList() []byte {
	if m != nil {
		return m.MessageList
	}
	return nil
}

func (m *SignedMessageList) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *SignedMessageList) GetCompression() SignedMessageList_CompressionType {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return Default_SignedMessageList_Compression
}

func (m *SignedMessageList) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CipherProperties struct {
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Key  []byte  `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	// This IV is used to encrypt the cipher metadata block. Note: Both the
	// CipherProperties() and the CipherMetadata() protobufs do not change for all
	// messages in this session.
	MetadataIv []byte `protobuf:"bytes,3,opt,name=metadata_iv,json=metadataIv" json:"metadata_iv,omitempty"`
	// The key used for the hmac.
	HmacKey []byte `protobuf:"bytes,5,opt,name=hmac_key,json=hmacKey" json:"hmac_key,omitempty"`
	// The API version of the cipher.
	HmacType         *CipherProperties_HMACType `protobuf:"varint,6,opt,name=hmac_type,json=hmacType,enum=CipherProperties_HMACType,def=0" json:"hmac_type,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CipherProperties) Reset()                    { *m = CipherProperties{} }
func (m *CipherProperties) String() string            { return proto.CompactTextString(m) }
func (*CipherProperties) ProtoMessage()               {}
func (*CipherProperties) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

const Default_CipherProperties_HmacType CipherProperties_HMACType = CipherProperties_SIMPLE_HMAC

func (m *CipherProperties) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CipherProperties) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CipherProperties) GetMetadataIv() []byte {
	if m != nil {
		return m.MetadataIv
	}
	return nil
}

func (m *CipherProperties) GetHmacKey() []byte {
	if m != nil {
		return m.HmacKey
	}
	return nil
}

func (m *CipherProperties) GetHmacType() CipherProperties_HMACType {
	if m != nil && m.HmacType != nil {
		return *m.HmacType
	}
	return Default_CipherProperties_HmacType
}

type CipherMetadata struct {
	Source *string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// The signature of the encrypted cipher block.
	Signature        []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CipherMetadata) Reset()                    { *m = CipherMetadata{} }
func (m *CipherMetadata) String() string            { return proto.CompactTextString(m) }
func (*CipherMetadata) ProtoMessage()               {}
func (*CipherMetadata) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *CipherMetadata) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *CipherMetadata) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Next field: 11
type ClientCommunication struct {
	// This message is a serialized SignedMessageList() protobuf, encrypted using
	// the session key (Encrypted inside field 2) and the per-packet IV (field 8).
	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// This is a CipherProperties() protobuf encrypted with the public key of the
	// receiver. Contains the session key and iv, as well as hmac key. This IV
	// does not change for the duration of the session. It is used to decrypt the
	// CipherMetadata() (field 9).
	EncryptedCipher []byte `protobuf:"bytes,2,opt,name=encrypted_cipher,json=encryptedCipher" json:"encrypted_cipher,omitempty"`
	// A serialized CipherMetadata() protobuf, encrypted with the session
	// key. Contains the RSA signature of the digest of the serialized
	// CipherProperties() above, signed with the sender's private key.
	EncryptedCipherMetadata []byte `protobuf:"bytes,9,opt,name=encrypted_cipher_metadata,json=encryptedCipherMetadata" json:"encrypted_cipher_metadata,omitempty"`
	// This iv is used to encrypt the encrypted field (No. 1). This IV changes for
	// each packet.
	PacketIv    []byte       `protobuf:"bytes,8,opt,name=packet_iv,json=packetIv" json:"packet_iv,omitempty"`
	OrigRequest *HttpRequest `protobuf:"bytes,3,opt,name=orig_request,json=origRequest" json:"orig_request,omitempty"`
	// The number of messages waiting on the input queue. The client
	// fills this in so the server can limit the number of messages
	// issued to the client as a means of throttling it.
	QueueSize  *uint32                     `protobuf:"varint,4,opt,name=queue_size,json=queueSize,def=0" json:"queue_size,omitempty"`
	Status     *ClientCommunication_Status `protobuf:"varint,5,opt,name=status,enum=ClientCommunication_Status,def=200" json:"status,omitempty"`
	ApiVersion *uint32                     `protobuf:"varint,6,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	// This is the SIMPLE_HMAC. It covers the "encrypted" field only.
	Hmac []byte `protobuf:"bytes,7,opt,name=hmac" json:"hmac,omitempty"`
	// This is the FULL_HMAC. It coverts:
	// 1) the "encrypted" field,
	// 2) The "encrypted_cipher" field.
	// 3) The encrypted_cipher_metadata field
	// 4) The packet iv
	// 5) the api_version.
	FullHmac         []byte `protobuf:"bytes,10,opt,name=full_hmac,json=fullHmac" json:"full_hmac,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClientCommunication) Reset()                    { *m = ClientCommunication{} }
func (m *ClientCommunication) String() string            { return proto.CompactTextString(m) }
func (*ClientCommunication) ProtoMessage()               {}
func (*ClientCommunication) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

const Default_ClientCommunication_QueueSize uint32 = 0
const Default_ClientCommunication_Status ClientCommunication_Status = ClientCommunication_OK

func (m *ClientCommunication) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *ClientCommunication) GetEncryptedCipher() []byte {
	if m != nil {
		return m.EncryptedCipher
	}
	return nil
}

func (m *ClientCommunication) GetEncryptedCipherMetadata() []byte {
	if m != nil {
		return m.EncryptedCipherMetadata
	}
	return nil
}

func (m *ClientCommunication) GetPacketIv() []byte {
	if m != nil {
		return m.PacketIv
	}
	return nil
}

func (m *ClientCommunication) GetOrigRequest() *HttpRequest {
	if m != nil {
		return m.OrigRequest
	}
	return nil
}

func (m *ClientCommunication) GetQueueSize() uint32 {
	if m != nil && m.QueueSize != nil {
		return *m.QueueSize
	}
	return Default_ClientCommunication_QueueSize
}

func (m *ClientCommunication) GetStatus() ClientCommunication_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_ClientCommunication_Status
}

func (m *ClientCommunication) GetApiVersion() uint32 {
	if m != nil && m.ApiVersion != nil {
		return *m.ApiVersion
	}
	return 0
}

func (m *ClientCommunication) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *ClientCommunication) GetFullHmac() []byte {
	if m != nil {
		return m.FullHmac
	}
	return nil
}

// This is a status response that is sent for each complete
// transaction. It is always the last message in the transaction.
type GrrStatus struct {
	Status           *GrrStatus_ReturnedStatus `protobuf:"varint,1,opt,name=status,enum=GrrStatus_ReturnedStatus,def=0" json:"status,omitempty"`
	ErrorMessage     *string                   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,def=" json:"error_message,omitempty"`
	Backtrace        *string                   `protobuf:"bytes,3,opt,name=backtrace,def=" json:"backtrace,omitempty"`
	CpuTimeUsed      *CpuSeconds               `protobuf:"bytes,4,opt,name=cpu_time_used,json=cpuTimeUsed" json:"cpu_time_used,omitempty"`
	ChildSessionId   *string                   `protobuf:"bytes,5,opt,name=child_session_id,json=childSessionId" json:"child_session_id,omitempty"`
	NetworkBytesSent *uint64                   `protobuf:"varint,6,opt,name=network_bytes_sent,json=networkBytesSent" json:"network_bytes_sent,omitempty"`
	NannyStatus      *string                   `protobuf:"bytes,7,opt,name=nanny_status,json=nannyStatus" json:"nanny_status,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *GrrStatus) Reset()                    { *m = GrrStatus{} }
func (m *GrrStatus) String() string            { return proto.CompactTextString(m) }
func (*GrrStatus) ProtoMessage()               {}
func (*GrrStatus) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

const Default_GrrStatus_Status GrrStatus_ReturnedStatus = GrrStatus_OK

func (m *GrrStatus) GetStatus() GrrStatus_ReturnedStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_GrrStatus_Status
}

func (m *GrrStatus) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *GrrStatus) GetBacktrace() string {
	if m != nil && m.Backtrace != nil {
		return *m.Backtrace
	}
	return ""
}

func (m *GrrStatus) GetCpuTimeUsed() *CpuSeconds {
	if m != nil {
		return m.CpuTimeUsed
	}
	return nil
}

func (m *GrrStatus) GetChildSessionId() string {
	if m != nil && m.ChildSessionId != nil {
		return *m.ChildSessionId
	}
	return ""
}

func (m *GrrStatus) GetNetworkBytesSent() uint64 {
	if m != nil && m.NetworkBytesSent != nil {
		return *m.NetworkBytesSent
	}
	return 0
}

func (m *GrrStatus) GetNannyStatus() string {
	if m != nil && m.NannyStatus != nil {
		return *m.NannyStatus
	}
	return ""
}

type GrrNotification struct {
	SessionId        *string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Priority         *GrrMessage_Priority `protobuf:"varint,2,opt,name=priority,enum=GrrMessage_Priority,def=1" json:"priority,omitempty"`
	FirstQueued      *uint64              `protobuf:"varint,3,opt,name=first_queued,json=firstQueued" json:"first_queued,omitempty"`
	LastStatus       *uint64              `protobuf:"varint,4,opt,name=last_status,json=lastStatus" json:"last_status,omitempty"`
	InProgress       *bool                `protobuf:"varint,5,opt,name=in_progress,json=inProgress,def=0" json:"in_progress,omitempty"`
	Timestamp        *uint64              `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *GrrNotification) Reset()                    { *m = GrrNotification{} }
func (m *GrrNotification) String() string            { return proto.CompactTextString(m) }
func (*GrrNotification) ProtoMessage()               {}
func (*GrrNotification) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

const Default_GrrNotification_Priority GrrMessage_Priority = GrrMessage_MEDIUM_PRIORITY
const Default_GrrNotification_InProgress bool = false

func (m *GrrNotification) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *GrrNotification) GetPriority() GrrMessage_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_GrrNotification_Priority
}

func (m *GrrNotification) GetFirstQueued() uint64 {
	if m != nil && m.FirstQueued != nil {
		return *m.FirstQueued
	}
	return 0
}

func (m *GrrNotification) GetLastStatus() uint64 {
	if m != nil && m.LastStatus != nil {
		return *m.LastStatus
	}
	return 0
}

func (m *GrrNotification) GetInProgress() bool {
	if m != nil && m.InProgress != nil {
		return *m.InProgress
	}
	return Default_GrrNotification_InProgress
}

func (m *GrrNotification) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type ClientCrash struct {
	ClientId         *string            `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	SessionId        *string            `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ClientInfo       *ClientInformation `protobuf:"bytes,3,opt,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	Timestamp        *uint64            `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	CrashType        *string            `protobuf:"bytes,5,opt,name=crash_type,json=crashType" json:"crash_type,omitempty"`
	CrashMessage     *string            `protobuf:"bytes,6,opt,name=crash_message,json=crashMessage" json:"crash_message,omitempty"`
	Backtrace        *string            `protobuf:"bytes,7,opt,name=backtrace" json:"backtrace,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ClientCrash) Reset()                    { *m = ClientCrash{} }
func (m *ClientCrash) String() string            { return proto.CompactTextString(m) }
func (*ClientCrash) ProtoMessage()               {}
func (*ClientCrash) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

func (m *ClientCrash) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *ClientCrash) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *ClientCrash) GetClientInfo() *ClientInformation {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *ClientCrash) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ClientCrash) GetCrashType() string {
	if m != nil && m.CrashType != nil {
		return *m.CrashType
	}
	return ""
}

func (m *ClientCrash) GetCrashMessage() string {
	if m != nil && m.CrashMessage != nil {
		return *m.CrashMessage
	}
	return ""
}

func (m *ClientCrash) GetBacktrace() string {
	if m != nil && m.Backtrace != nil {
		return *m.Backtrace
	}
	return ""
}

type HuntNotification struct {
	SessionId        *string                  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ClientId         *string                  `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Status           *HuntNotification_Status `protobuf:"varint,3,opt,name=status,enum=HuntNotification_Status" json:"status,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *HuntNotification) Reset()                    { *m = HuntNotification{} }
func (m *HuntNotification) String() string            { return proto.CompactTextString(m) }
func (*HuntNotification) ProtoMessage()               {}
func (*HuntNotification) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *HuntNotification) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *HuntNotification) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *HuntNotification) GetStatus() HuntNotification_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return HuntNotification_UNKNOWN
}

type HuntResultNotification struct {
	ResultCollectionUrn *string `protobuf:"bytes,1,opt,name=result_collection_urn,json=resultCollectionUrn" json:"result_collection_urn,omitempty"`
	Timestamp           *uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Suffix              *uint64 `protobuf:"varint,3,opt,name=suffix" json:"suffix,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *HuntResultNotification) Reset()                    { *m = HuntResultNotification{} }
func (m *HuntResultNotification) String() string            { return proto.CompactTextString(m) }
func (*HuntResultNotification) ProtoMessage()               {}
func (*HuntResultNotification) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

func (m *HuntResultNotification) GetResultCollectionUrn() string {
	if m != nil && m.ResultCollectionUrn != nil {
		return *m.ResultCollectionUrn
	}
	return ""
}

func (m *HuntResultNotification) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *HuntResultNotification) GetSuffix() uint64 {
	if m != nil && m.Suffix != nil {
		return *m.Suffix
	}
	return 0
}

type FlowNotification struct {
	SessionId        *string                  `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	FlowName         *string                  `protobuf:"bytes,2,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	ClientId         *string                  `protobuf:"bytes,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Status           *FlowNotification_Status `protobuf:"varint,4,opt,name=status,enum=FlowNotification_Status" json:"status,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *FlowNotification) Reset()                    { *m = FlowNotification{} }
func (m *FlowNotification) String() string            { return proto.CompactTextString(m) }
func (*FlowNotification) ProtoMessage()               {}
func (*FlowNotification) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

func (m *FlowNotification) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *FlowNotification) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

func (m *FlowNotification) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *FlowNotification) GetStatus() FlowNotification_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return FlowNotification_UNKNOWN
}

// Stores information about the GRR client itself
type ClientInformation struct {
	ClientName        *string  `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	ClientVersion     *uint32  `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Revision          *uint64  `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	BuildTime         *string  `protobuf:"bytes,4,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	ClientDescription *string  `protobuf:"bytes,5,opt,name=client_description,json=clientDescription" json:"client_description,omitempty"`
	Labels            []string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *ClientInformation) Reset()                    { *m = ClientInformation{} }
func (m *ClientInformation) String() string            { return proto.CompactTextString(m) }
func (*ClientInformation) ProtoMessage()               {}
func (*ClientInformation) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

func (m *ClientInformation) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

func (m *ClientInformation) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *ClientInformation) GetRevision() uint64 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return 0
}

func (m *ClientInformation) GetBuildTime() string {
	if m != nil && m.BuildTime != nil {
		return *m.BuildTime
	}
	return ""
}

func (m *ClientInformation) GetClientDescription() string {
	if m != nil && m.ClientDescription != nil {
		return *m.ClientDescription
	}
	return ""
}

func (m *ClientInformation) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// This is used to store a task in task scheduler
// DEPRECATED. The task scheduler now directly supports GRRMessages.
type Task struct {
	Id    *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Number of retransmission before the task is discarded. Note this is a low
	// level task scheduler parameter which is not related to the
	// RequestState.transmission_count. A task will be retransmitted automatically
	// even if the worker does not process it.
	Ttl              *int32               `protobuf:"varint,3,opt,name=ttl,def=5" json:"ttl,omitempty"`
	Eta              *uint64              `protobuf:"varint,4,opt,name=eta" json:"eta,omitempty"`
	Queue            *string              `protobuf:"bytes,5,opt,name=queue" json:"queue,omitempty"`
	Priority         *GrrMessage_Priority `protobuf:"varint,6,opt,name=priority,enum=GrrMessage_Priority,def=1" json:"priority,omitempty"`
	LastLease        *string              `protobuf:"bytes,7,opt,name=last_lease,json=lastLease" json:"last_lease,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{14} }

const Default_Task_Ttl int32 = 5
const Default_Task_Priority GrrMessage_Priority = GrrMessage_MEDIUM_PRIORITY

func (m *Task) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Task) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Task) GetTtl() int32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return Default_Task_Ttl
}

func (m *Task) GetEta() uint64 {
	if m != nil && m.Eta != nil {
		return *m.Eta
	}
	return 0
}

func (m *Task) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return ""
}

func (m *Task) GetPriority() GrrMessage_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_Task_Priority
}

func (m *Task) GetLastLease() string {
	if m != nil && m.LastLease != nil {
		return *m.LastLease
	}
	return ""
}

// A generic protobuf to deliver some data
// The data can be a single value a protobuf or a list.
type DataBlob struct {
	Integer   *int64            `protobuf:"varint,1,opt,name=integer" json:"integer,omitempty"`
	Data      []byte            `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	String_   *string           `protobuf:"bytes,3,opt,name=string" json:"string,omitempty"`
	ProtoName *string           `protobuf:"bytes,4,opt,name=proto_name,json=protoName" json:"proto_name,omitempty"`
	None      *string           `protobuf:"bytes,5,opt,name=none" json:"none,omitempty"`
	Boolean   *bool             `protobuf:"varint,6,opt,name=boolean" json:"boolean,omitempty"`
	List      *BlobArray        `protobuf:"bytes,8,opt,name=list" json:"list,omitempty"`
	Dict      *Dict             `protobuf:"bytes,9,opt,name=dict" json:"dict,omitempty"`
	RdfValue  *EmbeddedRDFValue `protobuf:"bytes,10,opt,name=rdf_value,json=rdfValue" json:"rdf_value,omitempty"`
	Float     *float32          `protobuf:"fixed32,11,opt,name=float" json:"float,omitempty"`
	// How the message_list element is compressed
	Compression      *DataBlob_CompressionType `protobuf:"varint,7,opt,name=compression,enum=DataBlob_CompressionType,def=0" json:"compression,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *DataBlob) Reset()                    { *m = DataBlob{} }
func (m *DataBlob) String() string            { return proto.CompactTextString(m) }
func (*DataBlob) ProtoMessage()               {}
func (*DataBlob) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{15} }

const Default_DataBlob_Compression DataBlob_CompressionType = DataBlob_UNCOMPRESSED

func (m *DataBlob) GetInteger() int64 {
	if m != nil && m.Integer != nil {
		return *m.Integer
	}
	return 0
}

func (m *DataBlob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataBlob) GetString_() string {
	if m != nil && m.String_ != nil {
		return *m.String_
	}
	return ""
}

func (m *DataBlob) GetProtoName() string {
	if m != nil && m.ProtoName != nil {
		return *m.ProtoName
	}
	return ""
}

func (m *DataBlob) GetNone() string {
	if m != nil && m.None != nil {
		return *m.None
	}
	return ""
}

func (m *DataBlob) GetBoolean() bool {
	if m != nil && m.Boolean != nil {
		return *m.Boolean
	}
	return false
}

func (m *DataBlob) GetList() *BlobArray {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DataBlob) GetDict() *Dict {
	if m != nil {
		return m.Dict
	}
	return nil
}

func (m *DataBlob) GetRdfValue() *EmbeddedRDFValue {
	if m != nil {
		return m.RdfValue
	}
	return nil
}

func (m *DataBlob) GetFloat() float32 {
	if m != nil && m.Float != nil {
		return *m.Float
	}
	return 0
}

func (m *DataBlob) GetCompression() DataBlob_CompressionType {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return Default_DataBlob_Compression
}

// A generic collection of blobs
type BlobArray struct {
	Content          []*DataBlob `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *BlobArray) Reset()                    { *m = BlobArray{} }
func (m *BlobArray) String() string            { return proto.CompactTextString(m) }
func (*BlobArray) ProtoMessage()               {}
func (*BlobArray) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{16} }

func (m *BlobArray) GetContent() []*DataBlob {
	if m != nil {
		return m.Content
	}
	return nil
}

// This is a log message sent from the client to the server logging subsystem.
type PrintStr struct {
	Level            *int32  `protobuf:"varint,1,opt,name=level,def=10" json:"level,omitempty"`
	Data             *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PrintStr) Reset()                    { *m = PrintStr{} }
func (m *PrintStr) String() string            { return proto.CompactTextString(m) }
func (*PrintStr) ProtoMessage()               {}
func (*PrintStr) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{17} }

const Default_PrintStr_Level int32 = 10

func (m *PrintStr) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return Default_PrintStr_Level
}

func (m *PrintStr) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

// CopyPathToFile request and response.
// Request:
//  - offset: byte offset inside src file to start copying from
//  - length: total number of bytes to copy (default 0 will copy whole file)
//  - block_size: how many bytes to copy at a time (default 10 MB)
//  - src_path: source pathspec to copy from
//  - dest_dir: destination directory to copy to
//  - dest_path: unset (GRRTempfile will create a random filename in dest_dir)
//  - gzip_output: if true, output file will be gzipped (default true)
//  - lifetime: number of seconds the file will stay on disk before being
//  deleted (default of 0 means don't delete)
//
// Response:
//  - offset: byte offset from request
//  - length: total bytes copied
//  - block_size: unused
//  - src_path: source pathspec from request
//  - dest_dir: destination dir from request
//  - dest_path: on-disk output pathspec
//  - gzip_output: if true, output file is gzipped
//  - lifetime: unused
//
type CopyPathToFile struct {
	Offset           *uint64   `protobuf:"varint,1,opt,name=offset,def=0" json:"offset,omitempty"`
	Length           *uint64   `protobuf:"varint,2,opt,name=length,def=0" json:"length,omitempty"`
	SrcPath          *PathSpec `protobuf:"bytes,3,opt,name=src_path,json=srcPath" json:"src_path,omitempty"`
	DestDir          *string   `protobuf:"bytes,4,opt,name=dest_dir,json=destDir" json:"dest_dir,omitempty"`
	DestPath         *PathSpec `protobuf:"bytes,5,opt,name=dest_path,json=destPath" json:"dest_path,omitempty"`
	GzipOutput       *bool     `protobuf:"varint,6,opt,name=gzip_output,json=gzipOutput,def=1" json:"gzip_output,omitempty"`
	Lifetime         *float32  `protobuf:"fixed32,7,opt,name=lifetime,def=0" json:"lifetime,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *CopyPathToFile) Reset()                    { *m = CopyPathToFile{} }
func (m *CopyPathToFile) String() string            { return proto.CompactTextString(m) }
func (*CopyPathToFile) ProtoMessage()               {}
func (*CopyPathToFile) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{18} }

const Default_CopyPathToFile_Offset uint64 = 0
const Default_CopyPathToFile_Length uint64 = 0
const Default_CopyPathToFile_GzipOutput bool = true
const Default_CopyPathToFile_Lifetime float32 = 0

func (m *CopyPathToFile) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return Default_CopyPathToFile_Offset
}

func (m *CopyPathToFile) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return Default_CopyPathToFile_Length
}

func (m *CopyPathToFile) GetSrcPath() *PathSpec {
	if m != nil {
		return m.SrcPath
	}
	return nil
}

func (m *CopyPathToFile) GetDestDir() string {
	if m != nil && m.DestDir != nil {
		return *m.DestDir
	}
	return ""
}

func (m *CopyPathToFile) GetDestPath() *PathSpec {
	if m != nil {
		return m.DestPath
	}
	return nil
}

func (m *CopyPathToFile) GetGzipOutput() bool {
	if m != nil && m.GzipOutput != nil {
		return *m.GzipOutput
	}
	return Default_CopyPathToFile_GzipOutput
}

func (m *CopyPathToFile) GetLifetime() float32 {
	if m != nil && m.Lifetime != nil {
		return *m.Lifetime
	}
	return Default_CopyPathToFile_Lifetime
}

type BufferReference struct {
	Offset           *uint64   `protobuf:"varint,1,opt,name=offset,def=0" json:"offset,omitempty"`
	Length           *uint64   `protobuf:"varint,2,opt,name=length,def=0" json:"length,omitempty"`
	Callback         *string   `protobuf:"bytes,3,opt,name=callback" json:"callback,omitempty"`
	Data             []byte    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Pathspec         *PathSpec `protobuf:"bytes,6,opt,name=pathspec" json:"pathspec,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *BufferReference) Reset()                    { *m = BufferReference{} }
func (m *BufferReference) String() string            { return proto.CompactTextString(m) }
func (*BufferReference) ProtoMessage()               {}
func (*BufferReference) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{19} }

const Default_BufferReference_Offset uint64 = 0
const Default_BufferReference_Length uint64 = 0

func (m *BufferReference) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return Default_BufferReference_Offset
}

func (m *BufferReference) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return Default_BufferReference_Length
}

func (m *BufferReference) GetCallback() string {
	if m != nil && m.Callback != nil {
		return *m.Callback
	}
	return ""
}

func (m *BufferReference) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BufferReference) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

// Information for each request. Note that we are keeping all the
// messages in a list until we receive the final Status message - when
// we process them all. This allows us to roll back the transaction in
// case the status is invalid.
type RequestState struct {
	// The number of this request (starts in 1).
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// DEPRECATED: This should not be used. The task id is stored in the request
	// message itself (request_state.request.task_id).  The task scheduler ID
	// corresponding to the message from this request.
	TsId      *uint64    `protobuf:"varint,2,opt,name=ts_id,json=tsId" json:"ts_id,omitempty"`
	NextState *string    `protobuf:"bytes,3,opt,name=next_state,json=nextState" json:"next_state,omitempty"`
	Status    *GrrStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Data      *Dict      `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	// Responses are kept in the datastore now. This just tells us the
	// total number of responses we have for this request.
	ResponseCount *uint32 `protobuf:"varint,6,opt,name=response_count,json=responseCount,def=0" json:"response_count,omitempty"`
	// A count of request retransmits
	TransmissionCount *uint32 `protobuf:"varint,7,opt,name=transmission_count,json=transmissionCount,def=0" json:"transmission_count,omitempty"`
	ClientId          *string `protobuf:"bytes,8,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	SessionId         *string `protobuf:"bytes,9,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// The original message request.
	Request          *GrrMessage `protobuf:"bytes,10,opt,name=request" json:"request,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RequestState) Reset()                    { *m = RequestState{} }
func (m *RequestState) String() string            { return proto.CompactTextString(m) }
func (*RequestState) ProtoMessage()               {}
func (*RequestState) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{20} }

const Default_RequestState_ResponseCount uint32 = 0
const Default_RequestState_TransmissionCount uint32 = 0

func (m *RequestState) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RequestState) GetTsId() uint64 {
	if m != nil && m.TsId != nil {
		return *m.TsId
	}
	return 0
}

func (m *RequestState) GetNextState() string {
	if m != nil && m.NextState != nil {
		return *m.NextState
	}
	return ""
}

func (m *RequestState) GetStatus() *GrrStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RequestState) GetData() *Dict {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RequestState) GetResponseCount() uint32 {
	if m != nil && m.ResponseCount != nil {
		return *m.ResponseCount
	}
	return Default_RequestState_ResponseCount
}

func (m *RequestState) GetTransmissionCount() uint32 {
	if m != nil && m.TransmissionCount != nil {
		return *m.TransmissionCount
	}
	return Default_RequestState_TransmissionCount
}

func (m *RequestState) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *RequestState) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *RequestState) GetRequest() *GrrMessage {
	if m != nil {
		return m.Request
	}
	return nil
}

// Flows are pickled in the data store:
type Flow struct {
	Name      *string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Pickle    []byte      `protobuf:"bytes,2,opt,name=pickle" json:"pickle,omitempty"`
	TsId      *uint64     `protobuf:"varint,3,opt,name=ts_id,json=tsId" json:"ts_id,omitempty"`
	State     *Flow_State `protobuf:"varint,4,opt,name=state,enum=Flow_State,def=0" json:"state,omitempty"`
	SessionId *string     `protobuf:"bytes,5,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// The number of outstanding requests in this flow
	OutstandingRequests *uint32 `protobuf:"varint,6,opt,name=outstanding_requests,json=outstandingRequests,def=0" json:"outstanding_requests,omitempty"`
	Creator             *string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Backtrace           *string `protobuf:"bytes,8,opt,name=backtrace" json:"backtrace,omitempty"`
	CreateTime          *uint64 `protobuf:"varint,9,opt,name=create_time,json=createTime,def=0" json:"create_time,omitempty"`
	// A progress indicator from 0-100.
	Progress *int32 `protobuf:"varint,10,opt,name=progress,def=0" json:"progress,omitempty"`
	// Dict of arguments passed to the flow.
	Args *Dict `protobuf:"bytes,11,opt,name=args" json:"args,omitempty"`
	// Event ID - unique id for user initiated event.
	EventId *string `protobuf:"bytes,12,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	// RequestState - Only populated in child flows
	RequestState *RequestState `protobuf:"bytes,14,opt,name=request_state,json=requestState" json:"request_state,omitempty"`
	// A helpful status message that can be set by flows to track their progress.
	Status *string `protobuf:"bytes,15,opt,name=status" json:"status,omitempty"`
	// The children of this flow.
	Children []string `protobuf:"bytes,16,rep,name=children" json:"children,omitempty"`
	// The client id for this flow.
	ClientId *string `protobuf:"bytes,17,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// The cpu seconds used on the client to complete this flow.
	CpuUsed *CpuSeconds `protobuf:"bytes,18,opt,name=cpu_used,json=cpuUsed" json:"cpu_used,omitempty"`
	// The bandwidth used for this flow.
	NetworkBytesSent *uint64 `protobuf:"varint,19,opt,name=network_bytes_sent,json=networkBytesSent" json:"network_bytes_sent,omitempty"`
	// The priority of this flow.
	Priority         *GrrMessage_Priority `protobuf:"varint,20,opt,name=priority,enum=GrrMessage_Priority" json:"priority,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Flow) Reset()                    { *m = Flow{} }
func (m *Flow) String() string            { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()               {}
func (*Flow) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{21} }

const Default_Flow_State Flow_State = Flow_RUNNING
const Default_Flow_OutstandingRequests uint32 = 0
const Default_Flow_CreateTime uint64 = 0
const Default_Flow_Progress int32 = 0

func (m *Flow) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Flow) GetPickle() []byte {
	if m != nil {
		return m.Pickle
	}
	return nil
}

func (m *Flow) GetTsId() uint64 {
	if m != nil && m.TsId != nil {
		return *m.TsId
	}
	return 0
}

func (m *Flow) GetState() Flow_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_Flow_State
}

func (m *Flow) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *Flow) GetOutstandingRequests() uint32 {
	if m != nil && m.OutstandingRequests != nil {
		return *m.OutstandingRequests
	}
	return Default_Flow_OutstandingRequests
}

func (m *Flow) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Flow) GetBacktrace() string {
	if m != nil && m.Backtrace != nil {
		return *m.Backtrace
	}
	return ""
}

func (m *Flow) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return Default_Flow_CreateTime
}

func (m *Flow) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return Default_Flow_Progress
}

func (m *Flow) GetArgs() *Dict {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Flow) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *Flow) GetRequestState() *RequestState {
	if m != nil {
		return m.RequestState
	}
	return nil
}

func (m *Flow) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Flow) GetChildren() []string {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Flow) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *Flow) GetCpuUsed() *CpuSeconds {
	if m != nil {
		return m.CpuUsed
	}
	return nil
}

func (m *Flow) GetNetworkBytesSent() uint64 {
	if m != nil && m.NetworkBytesSent != nil {
		return *m.NetworkBytesSent
	}
	return 0
}

func (m *Flow) GetPriority() GrrMessage_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return GrrMessage_LOW_PRIORITY
}

type CpuSeconds struct {
	UserCpuTime      *float32 `protobuf:"fixed32,1,opt,name=user_cpu_time,json=userCpuTime" json:"user_cpu_time,omitempty"`
	SystemCpuTime    *float32 `protobuf:"fixed32,2,opt,name=system_cpu_time,json=systemCpuTime" json:"system_cpu_time,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CpuSeconds) Reset()                    { *m = CpuSeconds{} }
func (m *CpuSeconds) String() string            { return proto.CompactTextString(m) }
func (*CpuSeconds) ProtoMessage()               {}
func (*CpuSeconds) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{22} }

func (m *CpuSeconds) GetUserCpuTime() float32 {
	if m != nil && m.UserCpuTime != nil {
		return *m.UserCpuTime
	}
	return 0
}

func (m *CpuSeconds) GetSystemCpuTime() float32 {
	if m != nil && m.SystemCpuTime != nil {
		return *m.SystemCpuTime
	}
	return 0
}

type CpuSample struct {
	UserCpuTime      *float32 `protobuf:"fixed32,1,opt,name=user_cpu_time,json=userCpuTime" json:"user_cpu_time,omitempty"`
	SystemCpuTime    *float32 `protobuf:"fixed32,2,opt,name=system_cpu_time,json=systemCpuTime" json:"system_cpu_time,omitempty"`
	CpuPercent       *float32 `protobuf:"fixed32,3,opt,name=cpu_percent,json=cpuPercent" json:"cpu_percent,omitempty"`
	Timestamp        *uint64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CpuSample) Reset()                    { *m = CpuSample{} }
func (m *CpuSample) String() string            { return proto.CompactTextString(m) }
func (*CpuSample) ProtoMessage()               {}
func (*CpuSample) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{23} }

func (m *CpuSample) GetUserCpuTime() float32 {
	if m != nil && m.UserCpuTime != nil {
		return *m.UserCpuTime
	}
	return 0
}

func (m *CpuSample) GetSystemCpuTime() float32 {
	if m != nil && m.SystemCpuTime != nil {
		return *m.SystemCpuTime
	}
	return 0
}

func (m *CpuSample) GetCpuPercent() float32 {
	if m != nil && m.CpuPercent != nil {
		return *m.CpuPercent
	}
	return 0
}

func (m *CpuSample) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type IOSample struct {
	ReadCount        *uint64 `protobuf:"varint,1,opt,name=read_count,json=readCount" json:"read_count,omitempty"`
	WriteCount       *uint64 `protobuf:"varint,2,opt,name=write_count,json=writeCount" json:"write_count,omitempty"`
	ReadBytes        *uint64 `protobuf:"varint,3,opt,name=read_bytes,json=readBytes" json:"read_bytes,omitempty"`
	WriteBytes       *uint64 `protobuf:"varint,4,opt,name=write_bytes,json=writeBytes" json:"write_bytes,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IOSample) Reset()                    { *m = IOSample{} }
func (m *IOSample) String() string            { return proto.CompactTextString(m) }
func (*IOSample) ProtoMessage()               {}
func (*IOSample) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{24} }

func (m *IOSample) GetReadCount() uint64 {
	if m != nil && m.ReadCount != nil {
		return *m.ReadCount
	}
	return 0
}

func (m *IOSample) GetWriteCount() uint64 {
	if m != nil && m.WriteCount != nil {
		return *m.WriteCount
	}
	return 0
}

func (m *IOSample) GetReadBytes() uint64 {
	if m != nil && m.ReadBytes != nil {
		return *m.ReadBytes
	}
	return 0
}

func (m *IOSample) GetWriteBytes() uint64 {
	if m != nil && m.WriteBytes != nil {
		return *m.WriteBytes
	}
	return 0
}

func (m *IOSample) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type ClientStats struct {
	CpuSamples       []*CpuSample `protobuf:"bytes,1,rep,name=cpu_samples,json=cpuSamples" json:"cpu_samples,omitempty"`
	RSSSize          *uint64      `protobuf:"varint,2,opt,name=RSS_size,json=rSSSize" json:"RSS_size,omitempty"`
	VMSSize          *uint64      `protobuf:"varint,3,opt,name=VMS_size,json=vMSSize" json:"VMS_size,omitempty"`
	MemoryPercent    *float32     `protobuf:"fixed32,4,opt,name=memory_percent,json=memoryPercent" json:"memory_percent,omitempty"`
	BytesReceived    *uint64      `protobuf:"varint,5,opt,name=bytes_received,json=bytesReceived" json:"bytes_received,omitempty"`
	BytesSent        *uint64      `protobuf:"varint,6,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	IoSamples        []*IOSample  `protobuf:"bytes,7,rep,name=io_samples,json=ioSamples" json:"io_samples,omitempty"`
	CreateTime       *uint64      `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	BootTime         *uint64      `protobuf:"varint,9,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ClientStats) Reset()                    { *m = ClientStats{} }
func (m *ClientStats) String() string            { return proto.CompactTextString(m) }
func (*ClientStats) ProtoMessage()               {}
func (*ClientStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{25} }

func (m *ClientStats) GetCpuSamples() []*CpuSample {
	if m != nil {
		return m.CpuSamples
	}
	return nil
}

func (m *ClientStats) GetRSSSize() uint64 {
	if m != nil && m.RSSSize != nil {
		return *m.RSSSize
	}
	return 0
}

func (m *ClientStats) GetVMSSize() uint64 {
	if m != nil && m.VMSSize != nil {
		return *m.VMSSize
	}
	return 0
}

func (m *ClientStats) GetMemoryPercent() float32 {
	if m != nil && m.MemoryPercent != nil {
		return *m.MemoryPercent
	}
	return 0
}

func (m *ClientStats) GetBytesReceived() uint64 {
	if m != nil && m.BytesReceived != nil {
		return *m.BytesReceived
	}
	return 0
}

func (m *ClientStats) GetBytesSent() uint64 {
	if m != nil && m.BytesSent != nil {
		return *m.BytesSent
	}
	return 0
}

func (m *ClientStats) GetIoSamples() []*IOSample {
	if m != nil {
		return m.IoSamples
	}
	return nil
}

func (m *ClientStats) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ClientStats) GetBootTime() uint64 {
	if m != nil && m.BootTime != nil {
		return *m.BootTime
	}
	return 0
}

type StartupInfo struct {
	ClientInfo       *ClientInformation `protobuf:"bytes,1,opt,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	BootTime         *uint64            `protobuf:"varint,2,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *StartupInfo) Reset()                    { *m = StartupInfo{} }
func (m *StartupInfo) String() string            { return proto.CompactTextString(m) }
func (*StartupInfo) ProtoMessage()               {}
func (*StartupInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{26} }

func (m *StartupInfo) GetClientInfo() *ClientInformation {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *StartupInfo) GetBootTime() uint64 {
	if m != nil && m.BootTime != nil {
		return *m.BootTime
	}
	return 0
}

type ExecuteRequest struct {
	Cmd  *string  `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	// An execution time limit, given in seconds.
	TimeLimit        *int32 `protobuf:"varint,3,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{27} }

func (m *ExecuteRequest) GetCmd() string {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return ""
}

func (m *ExecuteRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ExecuteRequest) GetTimeLimit() int32 {
	if m != nil && m.TimeLimit != nil {
		return *m.TimeLimit
	}
	return 0
}

type ExecuteResponse struct {
	Request    *ExecuteRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	ExitStatus *int32          `protobuf:"varint,2,opt,name=exit_status,json=exitStatus" json:"exit_status,omitempty"`
	Stdout     []byte          `protobuf:"bytes,3,opt,name=stdout" json:"stdout,omitempty"`
	Stderr     []byte          `protobuf:"bytes,4,opt,name=stderr" json:"stderr,omitempty"`
	// The time used to execute the cmd, given in microseconds.
	TimeUsed         *int32 `protobuf:"varint,5,opt,name=time_used,json=timeUsed" json:"time_used,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{28} }

func (m *ExecuteResponse) GetRequest() *ExecuteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ExecuteResponse) GetExitStatus() int32 {
	if m != nil && m.ExitStatus != nil {
		return *m.ExitStatus
	}
	return 0
}

func (m *ExecuteResponse) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *ExecuteResponse) GetStderr() []byte {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *ExecuteResponse) GetTimeUsed() int32 {
	if m != nil && m.TimeUsed != nil {
		return *m.TimeUsed
	}
	return 0
}

// A message to encode a filesystem path (maybe for raw access)
// Next field: 15
type PathSpec struct {
	Pathtype   *PathSpec_PathType `protobuf:"varint,1,opt,name=pathtype,enum=PathSpec_PathType,def=-1" json:"pathtype,omitempty"`
	Path       *string            `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	MountPoint *string            `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint" json:"mount_point,omitempty"`
	StreamName *string            `protobuf:"bytes,11,opt,name=stream_name,json=streamName" json:"stream_name,omitempty"`
	NestedPath *PathSpec          `protobuf:"bytes,5,opt,name=nested_path,json=nestedPath" json:"nested_path,omitempty"`
	// Offset for split images
	Offset         *uint64           `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	PathOptions    *PathSpec_Options `protobuf:"varint,7,opt,name=path_options,json=pathOptions,enum=PathSpec_Options,def=0" json:"path_options,omitempty"`
	RecursionDepth *uint64           `protobuf:"varint,12,opt,name=recursion_depth,json=recursionDepth,def=3" json:"recursion_depth,omitempty"`
	// On NTFS, the sleuthkit uses the inode, type and id to uniquely identify a
	// file - instead of the path.
	Inode            *uint64                `protobuf:"varint,8,opt,name=inode" json:"inode,omitempty"`
	NtfsType         *PathSpecTskFsAttrType `protobuf:"varint,9,opt,name=ntfs_type,json=ntfsType,enum=PathSpecTskFsAttrType,def=1" json:"ntfs_type,omitempty"`
	NtfsId           *uint64                `protobuf:"varint,10,opt,name=ntfs_id,json=ntfsId" json:"ntfs_id,omitempty"`
	FileSizeOverride *uint64                `protobuf:"varint,13,opt,name=file_size_override,json=fileSizeOverride,def=512000" json:"file_size_override,omitempty"`
	IsVirtualroot    *bool                  `protobuf:"varint,14,opt,name=is_virtualroot,json=isVirtualroot" json:"is_virtualroot,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *PathSpec) Reset()                    { *m = PathSpec{} }
func (m *PathSpec) String() string            { return proto.CompactTextString(m) }
func (*PathSpec) ProtoMessage()               {}
func (*PathSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{29} }

const Default_PathSpec_Pathtype PathSpec_PathType = PathSpec_UNSET
const Default_PathSpec_PathOptions PathSpec_Options = PathSpec_CASE_INSENSITIVE
const Default_PathSpec_RecursionDepth uint64 = 3
const Default_PathSpec_NtfsType PathSpecTskFsAttrType = PathSpec_TSK_FS_ATTR_TYPE_DEFAULT
const Default_PathSpec_FileSizeOverride uint64 = 512000

func (m *PathSpec) GetPathtype() PathSpec_PathType {
	if m != nil && m.Pathtype != nil {
		return *m.Pathtype
	}
	return Default_PathSpec_Pathtype
}

func (m *PathSpec) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *PathSpec) GetMountPoint() string {
	if m != nil && m.MountPoint != nil {
		return *m.MountPoint
	}
	return ""
}

func (m *PathSpec) GetStreamName() string {
	if m != nil && m.StreamName != nil {
		return *m.StreamName
	}
	return ""
}

func (m *PathSpec) GetNestedPath() *PathSpec {
	if m != nil {
		return m.NestedPath
	}
	return nil
}

func (m *PathSpec) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *PathSpec) GetPathOptions() PathSpec_Options {
	if m != nil && m.PathOptions != nil {
		return *m.PathOptions
	}
	return Default_PathSpec_PathOptions
}

func (m *PathSpec) GetRecursionDepth() uint64 {
	if m != nil && m.RecursionDepth != nil {
		return *m.RecursionDepth
	}
	return Default_PathSpec_RecursionDepth
}

func (m *PathSpec) GetInode() uint64 {
	if m != nil && m.Inode != nil {
		return *m.Inode
	}
	return 0
}

func (m *PathSpec) GetNtfsType() PathSpecTskFsAttrType {
	if m != nil && m.NtfsType != nil {
		return *m.NtfsType
	}
	return Default_PathSpec_NtfsType
}

func (m *PathSpec) GetNtfsId() uint64 {
	if m != nil && m.NtfsId != nil {
		return *m.NtfsId
	}
	return 0
}

func (m *PathSpec) GetFileSizeOverride() uint64 {
	if m != nil && m.FileSizeOverride != nil {
		return *m.FileSizeOverride
	}
	return Default_PathSpec_FileSizeOverride
}

func (m *PathSpec) GetIsVirtualroot() bool {
	if m != nil && m.IsVirtualroot != nil {
		return *m.IsVirtualroot
	}
	return false
}

// Ask the ListDir action to list all files in path (returns StatEntry)
type ListDirRequest struct {
	Pathspec         *PathSpec `protobuf:"bytes,1,opt,name=pathspec" json:"pathspec,omitempty"`
	Iterator         *Iterator `protobuf:"bytes,2,opt,name=iterator" json:"iterator,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ListDirRequest) Reset()                    { *m = ListDirRequest{} }
func (m *ListDirRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDirRequest) ProtoMessage()               {}
func (*ListDirRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{30} }

func (m *ListDirRequest) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *ListDirRequest) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

// StatFS client action request
type StatFSRequest struct {
	PathList         []string           `protobuf:"bytes,1,rep,name=path_list,json=pathList" json:"path_list,omitempty"`
	Pathtype         *PathSpec_PathType `protobuf:"varint,2,opt,name=pathtype,enum=PathSpec_PathType,def=0" json:"pathtype,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *StatFSRequest) Reset()                    { *m = StatFSRequest{} }
func (m *StatFSRequest) String() string            { return proto.CompactTextString(m) }
func (*StatFSRequest) ProtoMessage()               {}
func (*StatFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{31} }

const Default_StatFSRequest_Pathtype PathSpec_PathType = PathSpec_OS

func (m *StatFSRequest) GetPathList() []string {
	if m != nil {
		return m.PathList
	}
	return nil
}

func (m *StatFSRequest) GetPathtype() PathSpec_PathType {
	if m != nil && m.Pathtype != nil {
		return *m.Pathtype
	}
	return Default_StatFSRequest_Pathtype
}

// A stat() record for a given path
type StatEntry struct {
	// This contains the URN of the aff4 object represented by this protobuf.
	Aff4Path     *string                 `protobuf:"bytes,1,opt,name=aff4path" json:"aff4path,omitempty"`
	StMode       *uint64                 `protobuf:"varint,2,opt,name=st_mode,json=stMode,def=0" json:"st_mode,omitempty"`
	StIno        *uint32                 `protobuf:"varint,3,opt,name=st_ino,json=stIno" json:"st_ino,omitempty"`
	StDev        *uint32                 `protobuf:"varint,4,opt,name=st_dev,json=stDev" json:"st_dev,omitempty"`
	StNlink      *uint32                 `protobuf:"varint,5,opt,name=st_nlink,json=stNlink" json:"st_nlink,omitempty"`
	StUid        *uint32                 `protobuf:"varint,6,opt,name=st_uid,json=stUid" json:"st_uid,omitempty"`
	StGid        *uint32                 `protobuf:"varint,7,opt,name=st_gid,json=stGid" json:"st_gid,omitempty"`
	StSize       *uint64                 `protobuf:"varint,8,opt,name=st_size,json=stSize" json:"st_size,omitempty"`
	StAtime      *uint64                 `protobuf:"varint,9,opt,name=st_atime,json=stAtime" json:"st_atime,omitempty"`
	StMtime      *uint64                 `protobuf:"varint,10,opt,name=st_mtime,json=stMtime" json:"st_mtime,omitempty"`
	StCtime      *uint64                 `protobuf:"varint,11,opt,name=st_ctime,json=stCtime" json:"st_ctime,omitempty"`
	StBlocks     *uint32                 `protobuf:"varint,12,opt,name=st_blocks,json=stBlocks" json:"st_blocks,omitempty"`
	StBlksize    *uint32                 `protobuf:"varint,13,opt,name=st_blksize,json=stBlksize" json:"st_blksize,omitempty"`
	StRdev       *uint32                 `protobuf:"varint,14,opt,name=st_rdev,json=stRdev" json:"st_rdev,omitempty"`
	Symlink      *string                 `protobuf:"bytes,15,opt,name=symlink" json:"symlink,omitempty"`
	RegistryType *StatEntry_RegistryType `protobuf:"varint,16,opt,name=registry_type,json=registryType,enum=StatEntry_RegistryType" json:"registry_type,omitempty"`
	// For very small files their data is stored in this record.
	Resident []byte `protobuf:"bytes,17,opt,name=resident" json:"resident,omitempty"`
	// The pathspec which the client can use to re-reach this file.
	Pathspec         *PathSpec `protobuf:"bytes,18,opt,name=pathspec" json:"pathspec,omitempty"`
	RegistryData     *DataBlob `protobuf:"bytes,19,opt,name=registry_data,json=registryData" json:"registry_data,omitempty"`
	StCrtime         *uint64   `protobuf:"varint,20,opt,name=st_crtime,json=stCrtime" json:"st_crtime,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *StatEntry) Reset()                    { *m = StatEntry{} }
func (m *StatEntry) String() string            { return proto.CompactTextString(m) }
func (*StatEntry) ProtoMessage()               {}
func (*StatEntry) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{32} }

const Default_StatEntry_StMode uint64 = 0

func (m *StatEntry) GetAff4Path() string {
	if m != nil && m.Aff4Path != nil {
		return *m.Aff4Path
	}
	return ""
}

func (m *StatEntry) GetStMode() uint64 {
	if m != nil && m.StMode != nil {
		return *m.StMode
	}
	return Default_StatEntry_StMode
}

func (m *StatEntry) GetStIno() uint32 {
	if m != nil && m.StIno != nil {
		return *m.StIno
	}
	return 0
}

func (m *StatEntry) GetStDev() uint32 {
	if m != nil && m.StDev != nil {
		return *m.StDev
	}
	return 0
}

func (m *StatEntry) GetStNlink() uint32 {
	if m != nil && m.StNlink != nil {
		return *m.StNlink
	}
	return 0
}

func (m *StatEntry) GetStUid() uint32 {
	if m != nil && m.StUid != nil {
		return *m.StUid
	}
	return 0
}

func (m *StatEntry) GetStGid() uint32 {
	if m != nil && m.StGid != nil {
		return *m.StGid
	}
	return 0
}

func (m *StatEntry) GetStSize() uint64 {
	if m != nil && m.StSize != nil {
		return *m.StSize
	}
	return 0
}

func (m *StatEntry) GetStAtime() uint64 {
	if m != nil && m.StAtime != nil {
		return *m.StAtime
	}
	return 0
}

func (m *StatEntry) GetStMtime() uint64 {
	if m != nil && m.StMtime != nil {
		return *m.StMtime
	}
	return 0
}

func (m *StatEntry) GetStCtime() uint64 {
	if m != nil && m.StCtime != nil {
		return *m.StCtime
	}
	return 0
}

func (m *StatEntry) GetStBlocks() uint32 {
	if m != nil && m.StBlocks != nil {
		return *m.StBlocks
	}
	return 0
}

func (m *StatEntry) GetStBlksize() uint32 {
	if m != nil && m.StBlksize != nil {
		return *m.StBlksize
	}
	return 0
}

func (m *StatEntry) GetStRdev() uint32 {
	if m != nil && m.StRdev != nil {
		return *m.StRdev
	}
	return 0
}

func (m *StatEntry) GetSymlink() string {
	if m != nil && m.Symlink != nil {
		return *m.Symlink
	}
	return ""
}

func (m *StatEntry) GetRegistryType() StatEntry_RegistryType {
	if m != nil && m.RegistryType != nil {
		return *m.RegistryType
	}
	return StatEntry_REG_NONE
}

func (m *StatEntry) GetResident() []byte {
	if m != nil {
		return m.Resident
	}
	return nil
}

func (m *StatEntry) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *StatEntry) GetRegistryData() *DataBlob {
	if m != nil {
		return m.RegistryData
	}
	return nil
}

func (m *StatEntry) GetStCrtime() uint64 {
	if m != nil && m.StCrtime != nil {
		return *m.StCrtime
	}
	return 0
}

// This stores collection entries.
type Collection struct {
	Items            []*StatEntry `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{33} }

func (m *Collection) GetItems() []*StatEntry {
	if m != nil {
		return m.Items
	}
	return nil
}

// Windows WMI Request.
type WmiRequest struct {
	Query            *string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	BaseObject       *string `protobuf:"bytes,2,opt,name=base_object,json=baseObject" json:"base_object,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WmiRequest) Reset()                    { *m = WmiRequest{} }
func (m *WmiRequest) String() string            { return proto.CompactTextString(m) }
func (*WmiRequest) ProtoMessage()               {}
func (*WmiRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{34} }

func (m *WmiRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *WmiRequest) GetBaseObject() string {
	if m != nil && m.BaseObject != nil {
		return *m.BaseObject
	}
	return ""
}

// A Key Value pair
type KeyValue struct {
	K                *DataBlob `protobuf:"bytes,1,opt,name=k" json:"k,omitempty"`
	V                *DataBlob `protobuf:"bytes,2,opt,name=v" json:"v,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{35} }

func (m *KeyValue) GetK() *DataBlob {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *KeyValue) GetV() *DataBlob {
	if m != nil {
		return m.V
	}
	return nil
}

// A list of Key Value pairs
type Dict struct {
	Dat              []*KeyValue `protobuf:"bytes,1,rep,name=dat" json:"dat,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Dict) Reset()                    { *m = Dict{} }
func (m *Dict) String() string            { return proto.CompactTextString(m) }
func (*Dict) ProtoMessage()               {}
func (*Dict) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{36} }

func (m *Dict) GetDat() []*KeyValue {
	if m != nil {
		return m.Dat
	}
	return nil
}

// A Dict that allows attribute access.
type AttributedDict struct {
	Dat              []*KeyValue `protobuf:"bytes,1,rep,name=dat" json:"dat,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *AttributedDict) Reset()                    { *m = AttributedDict{} }
func (m *AttributedDict) String() string            { return proto.CompactTextString(m) }
func (*AttributedDict) ProtoMessage()               {}
func (*AttributedDict) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{37} }

func (m *AttributedDict) GetDat() []*KeyValue {
	if m != nil {
		return m.Dat
	}
	return nil
}

// Certificates are exchanged with this.
type Certificate struct {
	Type             *Certificate_Type `protobuf:"varint,1,opt,name=type,enum=Certificate_Type" json:"type,omitempty"`
	Pem              []byte            `protobuf:"bytes,2,opt,name=pem" json:"pem,omitempty"`
	Cn               *string           `protobuf:"bytes,3,opt,name=cn" json:"cn,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{38} }

func (m *Certificate) GetType() Certificate_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Certificate_CSR
}

func (m *Certificate) GetPem() []byte {
	if m != nil {
		return m.Pem
	}
	return nil
}

func (m *Certificate) GetCn() string {
	if m != nil && m.Cn != nil {
		return *m.Cn
	}
	return ""
}

// Message to carry uname information.
type Uname struct {
	System           *string `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Node             *string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Release          *string `protobuf:"bytes,3,opt,name=release" json:"release,omitempty"`
	Version          *string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	Machine          *string `protobuf:"bytes,5,opt,name=machine" json:"machine,omitempty"`
	Kernel           *string `protobuf:"bytes,6,opt,name=kernel" json:"kernel,omitempty"`
	Fqdn             *string `protobuf:"bytes,7,opt,name=fqdn" json:"fqdn,omitempty"`
	InstallDate      *uint64 `protobuf:"varint,8,opt,name=install_date,json=installDate" json:"install_date,omitempty"`
	LibcVer          *string `protobuf:"bytes,9,opt,name=libc_ver,json=libcVer" json:"libc_ver,omitempty"`
	Architecture     *string `protobuf:"bytes,10,opt,name=architecture" json:"architecture,omitempty"`
	Pep425Tag        *string `protobuf:"bytes,11,opt,name=pep425tag" json:"pep425tag,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Uname) Reset()                    { *m = Uname{} }
func (m *Uname) String() string            { return proto.CompactTextString(m) }
func (*Uname) ProtoMessage()               {}
func (*Uname) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{39} }

func (m *Uname) GetSystem() string {
	if m != nil && m.System != nil {
		return *m.System
	}
	return ""
}

func (m *Uname) GetNode() string {
	if m != nil && m.Node != nil {
		return *m.Node
	}
	return ""
}

func (m *Uname) GetRelease() string {
	if m != nil && m.Release != nil {
		return *m.Release
	}
	return ""
}

func (m *Uname) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *Uname) GetMachine() string {
	if m != nil && m.Machine != nil {
		return *m.Machine
	}
	return ""
}

func (m *Uname) GetKernel() string {
	if m != nil && m.Kernel != nil {
		return *m.Kernel
	}
	return ""
}

func (m *Uname) GetFqdn() string {
	if m != nil && m.Fqdn != nil {
		return *m.Fqdn
	}
	return ""
}

func (m *Uname) GetInstallDate() uint64 {
	if m != nil && m.InstallDate != nil {
		return *m.InstallDate
	}
	return 0
}

func (m *Uname) GetLibcVer() string {
	if m != nil && m.LibcVer != nil {
		return *m.LibcVer
	}
	return ""
}

func (m *Uname) GetArchitecture() string {
	if m != nil && m.Architecture != nil {
		return *m.Architecture
	}
	return ""
}

func (m *Uname) GetPep425Tag() string {
	if m != nil && m.Pep425Tag != nil {
		return *m.Pep425Tag
	}
	return ""
}

type FolderInformation struct {
	AppData      *string `protobuf:"bytes,1,opt,name=app_data,json=appData" json:"app_data,omitempty"`
	Cache        *string `protobuf:"bytes,2,opt,name=cache" json:"cache,omitempty"`
	Cookies      *string `protobuf:"bytes,3,opt,name=cookies" json:"cookies,omitempty"`
	Desktop      *string `protobuf:"bytes,4,opt,name=desktop" json:"desktop,omitempty"`
	Favorites    *string `protobuf:"bytes,5,opt,name=favorites" json:"favorites,omitempty"`
	History      *string `protobuf:"bytes,6,opt,name=history" json:"history,omitempty"`
	LocalAppData *string `protobuf:"bytes,7,opt,name=local_app_data,json=localAppData" json:"local_app_data,omitempty"`
	// ID 8 previously used by local_settings
	MyMusic          *string `protobuf:"bytes,9,opt,name=my_music,json=myMusic" json:"my_music,omitempty"`
	MyPictures       *string `protobuf:"bytes,10,opt,name=my_pictures,json=myPictures" json:"my_pictures,omitempty"`
	MyVideo          *string `protobuf:"bytes,11,opt,name=my_video,json=myVideo" json:"my_video,omitempty"`
	NetHood          *string `protobuf:"bytes,12,opt,name=net_hood,json=netHood" json:"net_hood,omitempty"`
	Personal         *string `protobuf:"bytes,13,opt,name=personal" json:"personal,omitempty"`
	PrintHood        *string `protobuf:"bytes,14,opt,name=print_hood,json=printHood" json:"print_hood,omitempty"`
	Programs         *string `protobuf:"bytes,15,opt,name=programs" json:"programs,omitempty"`
	Recent           *string `protobuf:"bytes,16,opt,name=recent" json:"recent,omitempty"`
	SendTo           *string `protobuf:"bytes,17,opt,name=send_to,json=sendTo" json:"send_to,omitempty"`
	StartMenu        *string `protobuf:"bytes,18,opt,name=start_menu,json=startMenu" json:"start_menu,omitempty"`
	Startup          *string `protobuf:"bytes,19,opt,name=startup" json:"startup,omitempty"`
	Templates        *string `protobuf:"bytes,20,opt,name=templates" json:"templates,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FolderInformation) Reset()                    { *m = FolderInformation{} }
func (m *FolderInformation) String() string            { return proto.CompactTextString(m) }
func (*FolderInformation) ProtoMessage()               {}
func (*FolderInformation) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{40} }

func (m *FolderInformation) GetAppData() string {
	if m != nil && m.AppData != nil {
		return *m.AppData
	}
	return ""
}

func (m *FolderInformation) GetCache() string {
	if m != nil && m.Cache != nil {
		return *m.Cache
	}
	return ""
}

func (m *FolderInformation) GetCookies() string {
	if m != nil && m.Cookies != nil {
		return *m.Cookies
	}
	return ""
}

func (m *FolderInformation) GetDesktop() string {
	if m != nil && m.Desktop != nil {
		return *m.Desktop
	}
	return ""
}

func (m *FolderInformation) GetFavorites() string {
	if m != nil && m.Favorites != nil {
		return *m.Favorites
	}
	return ""
}

func (m *FolderInformation) GetHistory() string {
	if m != nil && m.History != nil {
		return *m.History
	}
	return ""
}

func (m *FolderInformation) GetLocalAppData() string {
	if m != nil && m.LocalAppData != nil {
		return *m.LocalAppData
	}
	return ""
}

func (m *FolderInformation) GetMyMusic() string {
	if m != nil && m.MyMusic != nil {
		return *m.MyMusic
	}
	return ""
}

func (m *FolderInformation) GetMyPictures() string {
	if m != nil && m.MyPictures != nil {
		return *m.MyPictures
	}
	return ""
}

func (m *FolderInformation) GetMyVideo() string {
	if m != nil && m.MyVideo != nil {
		return *m.MyVideo
	}
	return ""
}

func (m *FolderInformation) GetNetHood() string {
	if m != nil && m.NetHood != nil {
		return *m.NetHood
	}
	return ""
}

func (m *FolderInformation) GetPersonal() string {
	if m != nil && m.Personal != nil {
		return *m.Personal
	}
	return ""
}

func (m *FolderInformation) GetPrintHood() string {
	if m != nil && m.PrintHood != nil {
		return *m.PrintHood
	}
	return ""
}

func (m *FolderInformation) GetPrograms() string {
	if m != nil && m.Programs != nil {
		return *m.Programs
	}
	return ""
}

func (m *FolderInformation) GetRecent() string {
	if m != nil && m.Recent != nil {
		return *m.Recent
	}
	return ""
}

func (m *FolderInformation) GetSendTo() string {
	if m != nil && m.SendTo != nil {
		return *m.SendTo
	}
	return ""
}

func (m *FolderInformation) GetStartMenu() string {
	if m != nil && m.StartMenu != nil {
		return *m.StartMenu
	}
	return ""
}

func (m *FolderInformation) GetStartup() string {
	if m != nil && m.Startup != nil {
		return *m.Startup
	}
	return ""
}

func (m *FolderInformation) GetTemplates() string {
	if m != nil && m.Templates != nil {
		return *m.Templates
	}
	return ""
}

type NetworkAddress struct {
	AddressType      *NetworkAddress_Family `protobuf:"varint,1,opt,name=address_type,json=addressType,enum=NetworkAddress_Family" json:"address_type,omitempty"`
	HumanReadable    *string                `protobuf:"bytes,2,opt,name=human_readable,json=humanReadable" json:"human_readable,omitempty"`
	PackedBytes      []byte                 `protobuf:"bytes,3,opt,name=packed_bytes,json=packedBytes" json:"packed_bytes,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *NetworkAddress) Reset()                    { *m = NetworkAddress{} }
func (m *NetworkAddress) String() string            { return proto.CompactTextString(m) }
func (*NetworkAddress) ProtoMessage()               {}
func (*NetworkAddress) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{41} }

func (m *NetworkAddress) GetAddressType() NetworkAddress_Family {
	if m != nil && m.AddressType != nil {
		return *m.AddressType
	}
	return NetworkAddress_INET
}

func (m *NetworkAddress) GetHumanReadable() string {
	if m != nil && m.HumanReadable != nil {
		return *m.HumanReadable
	}
	return ""
}

func (m *NetworkAddress) GetPackedBytes() []byte {
	if m != nil {
		return m.PackedBytes
	}
	return nil
}

type Interface struct {
	// CyBOX: mac
	MacAddress []byte `protobuf:"bytes,1,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// ip4_addresses is deprecated, use addresses.
	Ip4Addresses [][]byte `protobuf:"bytes,2,rep,name=ip4_addresses,json=ip4Addresses" json:"ip4_addresses,omitempty"`
	// CyBOX: adapter
	Ifname *string `protobuf:"bytes,3,opt,name=ifname" json:"ifname,omitempty"`
	// ip6_addresses is deprecated, use addresses.
	Ip6Addresses [][]byte `protobuf:"bytes,4,rep,name=ip6_addresses,json=ip6Addresses" json:"ip6_addresses,omitempty"`
	// CyBOX: ip_list
	Addresses         []*NetworkAddress `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	DhcpLeaseExpires  *uint64           `protobuf:"varint,6,opt,name=dhcp_lease_expires,json=dhcpLeaseExpires" json:"dhcp_lease_expires,omitempty"`
	DhcpLeaseObtained *uint64           `protobuf:"varint,7,opt,name=dhcp_lease_obtained,json=dhcpLeaseObtained" json:"dhcp_lease_obtained,omitempty"`
	DhcpServerList    []*NetworkAddress `protobuf:"bytes,8,rep,name=dhcp_server_list,json=dhcpServerList" json:"dhcp_server_list,omitempty"`
	IpGatewayList     []*NetworkAddress `protobuf:"bytes,9,rep,name=ip_gateway_list,json=ipGatewayList" json:"ip_gateway_list,omitempty"`
	XXX_unrecognized  []byte            `json:"-"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{42} }

func (m *Interface) GetMacAddress() []byte {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *Interface) GetIp4Addresses() [][]byte {
	if m != nil {
		return m.Ip4Addresses
	}
	return nil
}

func (m *Interface) GetIfname() string {
	if m != nil && m.Ifname != nil {
		return *m.Ifname
	}
	return ""
}

func (m *Interface) GetIp6Addresses() [][]byte {
	if m != nil {
		return m.Ip6Addresses
	}
	return nil
}

func (m *Interface) GetAddresses() []*NetworkAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Interface) GetDhcpLeaseExpires() uint64 {
	if m != nil && m.DhcpLeaseExpires != nil {
		return *m.DhcpLeaseExpires
	}
	return 0
}

func (m *Interface) GetDhcpLeaseObtained() uint64 {
	if m != nil && m.DhcpLeaseObtained != nil {
		return *m.DhcpLeaseObtained
	}
	return 0
}

func (m *Interface) GetDhcpServerList() []*NetworkAddress {
	if m != nil {
		return m.DhcpServerList
	}
	return nil
}

func (m *Interface) GetIpGatewayList() []*NetworkAddress {
	if m != nil {
		return m.IpGatewayList
	}
	return nil
}

type Hash struct {
	Sha256           []byte                    `protobuf:"bytes,1,opt,name=sha256" json:"sha256,omitempty"`
	Sha1             []byte                    `protobuf:"bytes,2,opt,name=sha1" json:"sha1,omitempty"`
	Md5              []byte                    `protobuf:"bytes,3,opt,name=md5" json:"md5,omitempty"`
	PecoffSha1       []byte                    `protobuf:"bytes,4,opt,name=pecoff_sha1,json=pecoffSha1" json:"pecoff_sha1,omitempty"`
	PecoffMd5        []byte                    `protobuf:"bytes,5,opt,name=pecoff_md5,json=pecoffMd5" json:"pecoff_md5,omitempty"`
	PecoffSha256     []byte                    `protobuf:"bytes,7,opt,name=pecoff_sha256,json=pecoffSha256" json:"pecoff_sha256,omitempty"`
	SignedData       []*AuthenticodeSignedData `protobuf:"bytes,6,rep,name=signed_data,json=signedData" json:"signed_data,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{43} }

func (m *Hash) GetSha256() []byte {
	if m != nil {
		return m.Sha256
	}
	return nil
}

func (m *Hash) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

func (m *Hash) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

func (m *Hash) GetPecoffSha1() []byte {
	if m != nil {
		return m.PecoffSha1
	}
	return nil
}

func (m *Hash) GetPecoffMd5() []byte {
	if m != nil {
		return m.PecoffMd5
	}
	return nil
}

func (m *Hash) GetPecoffSha256() []byte {
	if m != nil {
		return m.PecoffSha256
	}
	return nil
}

func (m *Hash) GetSignedData() []*AuthenticodeSignedData {
	if m != nil {
		return m.SignedData
	}
	return nil
}

type AuthenticodeSignedData struct {
	Revision         *uint64 `protobuf:"varint,1,opt,name=revision" json:"revision,omitempty"`
	CertType         *uint64 `protobuf:"varint,2,opt,name=cert_type,json=certType" json:"cert_type,omitempty"`
	Certificate      []byte  `protobuf:"bytes,3,opt,name=certificate" json:"certificate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthenticodeSignedData) Reset()                    { *m = AuthenticodeSignedData{} }
func (m *AuthenticodeSignedData) String() string            { return proto.CompactTextString(m) }
func (*AuthenticodeSignedData) ProtoMessage()               {}
func (*AuthenticodeSignedData) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{44} }

func (m *AuthenticodeSignedData) GetRevision() uint64 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return 0
}

func (m *AuthenticodeSignedData) GetCertType() uint64 {
	if m != nil && m.CertType != nil {
		return *m.CertType
	}
	return 0
}

func (m *AuthenticodeSignedData) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type FingerprintTuple struct {
	FpType           *FingerprintTuple_Type      `protobuf:"varint,1,req,name=fp_type,json=fpType,enum=FingerprintTuple_Type" json:"fp_type,omitempty"`
	Hashers          []FingerprintTuple_HashType `protobuf:"varint,2,rep,name=hashers,enum=FingerprintTuple_HashType" json:"hashers,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *FingerprintTuple) Reset()                    { *m = FingerprintTuple{} }
func (m *FingerprintTuple) String() string            { return proto.CompactTextString(m) }
func (*FingerprintTuple) ProtoMessage()               {}
func (*FingerprintTuple) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{45} }

func (m *FingerprintTuple) GetFpType() FingerprintTuple_Type {
	if m != nil && m.FpType != nil {
		return *m.FpType
	}
	return FingerprintTuple_FPT_GENERIC
}

func (m *FingerprintTuple) GetHashers() []FingerprintTuple_HashType {
	if m != nil {
		return m.Hashers
	}
	return nil
}

// Request fingerprints for a file.
type FingerprintRequest struct {
	Pathspec         *PathSpec           `protobuf:"bytes,1,opt,name=pathspec" json:"pathspec,omitempty"`
	Tuples           []*FingerprintTuple `protobuf:"bytes,2,rep,name=tuples" json:"tuples,omitempty"`
	MaxFilesize      *uint64             `protobuf:"varint,3,opt,name=max_filesize,json=maxFilesize,def=10737418240" json:"max_filesize,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FingerprintRequest) Reset()                    { *m = FingerprintRequest{} }
func (m *FingerprintRequest) String() string            { return proto.CompactTextString(m) }
func (*FingerprintRequest) ProtoMessage()               {}
func (*FingerprintRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{46} }

const Default_FingerprintRequest_MaxFilesize uint64 = 10737418240

func (m *FingerprintRequest) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *FingerprintRequest) GetTuples() []*FingerprintTuple {
	if m != nil {
		return m.Tuples
	}
	return nil
}

func (m *FingerprintRequest) GetMaxFilesize() uint64 {
	if m != nil && m.MaxFilesize != nil {
		return *m.MaxFilesize
	}
	return Default_FingerprintRequest_MaxFilesize
}

// Response data for file hashes and signature blobs.
type FingerprintResponse struct {
	MatchingTypes []FingerprintTuple_Type `protobuf:"varint,1,rep,name=matching_types,json=matchingTypes,enum=FingerprintTuple_Type" json:"matching_types,omitempty"`
	// Deprecated unstructured way to return the hashes. Results are now sent
	// using the Hash message.
	Results          []*Dict   `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Pathspec         *PathSpec `protobuf:"bytes,3,opt,name=pathspec" json:"pathspec,omitempty"`
	Hash             *Hash     `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	BytesRead        *uint64   `protobuf:"varint,5,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FingerprintResponse) Reset()                    { *m = FingerprintResponse{} }
func (m *FingerprintResponse) String() string            { return proto.CompactTextString(m) }
func (*FingerprintResponse) ProtoMessage()               {}
func (*FingerprintResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{47} }

func (m *FingerprintResponse) GetMatchingTypes() []FingerprintTuple_Type {
	if m != nil {
		return m.MatchingTypes
	}
	return nil
}

func (m *FingerprintResponse) GetResults() []*Dict {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *FingerprintResponse) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *FingerprintResponse) GetHash() *Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *FingerprintResponse) GetBytesRead() uint64 {
	if m != nil && m.BytesRead != nil {
		return *m.BytesRead
	}
	return 0
}

// Specialized binary blob for client.
type SignedBlob struct {
	Data             []byte                    `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Digest           []byte                    `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	DigestType       *SignedBlob_HashType      `protobuf:"varint,3,opt,name=digest_type,json=digestType,enum=SignedBlob_HashType" json:"digest_type,omitempty"`
	Signature        []byte                    `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	SignatureType    *SignedBlob_SignatureType `protobuf:"varint,5,opt,name=signature_type,json=signatureType,enum=SignedBlob_SignatureType" json:"signature_type,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *SignedBlob) Reset()                    { *m = SignedBlob{} }
func (m *SignedBlob) String() string            { return proto.CompactTextString(m) }
func (*SignedBlob) ProtoMessage()               {}
func (*SignedBlob) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{48} }

func (m *SignedBlob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignedBlob) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *SignedBlob) GetDigestType() SignedBlob_HashType {
	if m != nil && m.DigestType != nil {
		return *m.DigestType
	}
	return SignedBlob_MD5
}

func (m *SignedBlob) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedBlob) GetSignatureType() SignedBlob_SignatureType {
	if m != nil && m.SignatureType != nil {
		return *m.SignatureType
	}
	return SignedBlob_RSA_2048
}

// Message representing a symmetric cipher. Note that users of this should only
// use the Encrypt/Decrypt methods provided by the semantic protobuf.
type SymmetricCipher struct {
	XAlgorithm       *SymmetricCipher_Algorithm `protobuf:"varint,1,opt,name=_algorithm,json=algorithm,enum=SymmetricCipher_Algorithm" json:"_algorithm,omitempty"`
	XKey             []byte                     `protobuf:"bytes,2,opt,name=_key,json=key" json:"_key,omitempty"`
	XIv              []byte                     `protobuf:"bytes,3,opt,name=_iv,json=iv" json:"_iv,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *SymmetricCipher) Reset()                    { *m = SymmetricCipher{} }
func (m *SymmetricCipher) String() string            { return proto.CompactTextString(m) }
func (*SymmetricCipher) ProtoMessage()               {}
func (*SymmetricCipher) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{49} }

func (m *SymmetricCipher) GetXAlgorithm() SymmetricCipher_Algorithm {
	if m != nil && m.XAlgorithm != nil {
		return *m.XAlgorithm
	}
	return SymmetricCipher_NONE
}

func (m *SymmetricCipher) GetXKey() []byte {
	if m != nil {
		return m.XKey
	}
	return nil
}

func (m *SymmetricCipher) GetXIv() []byte {
	if m != nil {
		return m.XIv
	}
	return nil
}

// Message containing request to execute python in the context of the client.
type ExecutePythonRequest struct {
	PythonCode       *SignedBlob `protobuf:"bytes,1,opt,name=python_code,json=pythonCode" json:"python_code,omitempty"`
	PyArgs           *Dict       `protobuf:"bytes,2,opt,name=py_args,json=pyArgs" json:"py_args,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ExecutePythonRequest) Reset()                    { *m = ExecutePythonRequest{} }
func (m *ExecutePythonRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutePythonRequest) ProtoMessage()               {}
func (*ExecutePythonRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{50} }

func (m *ExecutePythonRequest) GetPythonCode() *SignedBlob {
	if m != nil {
		return m.PythonCode
	}
	return nil
}

func (m *ExecutePythonRequest) GetPyArgs() *Dict {
	if m != nil {
		return m.PyArgs
	}
	return nil
}

// Message containing response from ExecutePythonRequest.
type ExecutePythonResponse struct {
	ReturnVal        []byte `protobuf:"bytes,1,opt,name=return_val,json=returnVal" json:"return_val,omitempty"`
	TimeUsed         *int32 `protobuf:"varint,2,opt,name=time_used,json=timeUsed" json:"time_used,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecutePythonResponse) Reset()                    { *m = ExecutePythonResponse{} }
func (m *ExecutePythonResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutePythonResponse) ProtoMessage()               {}
func (*ExecutePythonResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{51} }

func (m *ExecutePythonResponse) GetReturnVal() []byte {
	if m != nil {
		return m.ReturnVal
	}
	return nil
}

func (m *ExecutePythonResponse) GetTimeUsed() int32 {
	if m != nil && m.TimeUsed != nil {
		return *m.TimeUsed
	}
	return 0
}

// The summary describes important information about the component.
type ClientComponentSummary struct {
	Name             *string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version          *string          `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Seed             *string          `protobuf:"bytes,4,opt,name=seed" json:"seed,omitempty"`
	Modules          []string         `protobuf:"bytes,5,rep,name=modules" json:"modules,omitempty"`
	Url              *string          `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	Cipher           *SymmetricCipher `protobuf:"bytes,7,opt,name=cipher" json:"cipher,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ClientComponentSummary) Reset()                    { *m = ClientComponentSummary{} }
func (m *ClientComponentSummary) String() string            { return proto.CompactTextString(m) }
func (*ClientComponentSummary) ProtoMessage()               {}
func (*ClientComponentSummary) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{52} }

func (m *ClientComponentSummary) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ClientComponentSummary) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ClientComponentSummary) GetSeed() string {
	if m != nil && m.Seed != nil {
		return *m.Seed
	}
	return ""
}

func (m *ClientComponentSummary) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *ClientComponentSummary) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *ClientComponentSummary) GetCipher() *SymmetricCipher {
	if m != nil {
		return m.Cipher
	}
	return nil
}

// This is the actual component data. It is stored inside a SignedBlob which is
// encrypted using the cipher in the summary.
type ClientComponent struct {
	Summary          *ClientComponentSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	RawData          []byte                  `protobuf:"bytes,2,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	BuildSystem      *Uname                  `protobuf:"bytes,3,opt,name=build_system,json=buildSystem" json:"build_system,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ClientComponent) Reset()                    { *m = ClientComponent{} }
func (m *ClientComponent) String() string            { return proto.CompactTextString(m) }
func (*ClientComponent) ProtoMessage()               {}
func (*ClientComponent) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{53} }

func (m *ClientComponent) GetSummary() *ClientComponentSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *ClientComponent) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *ClientComponent) GetBuildSystem() *Uname {
	if m != nil {
		return m.BuildSystem
	}
	return nil
}

// Used to launch a client action from a component.
type LoadComponent struct {
	Summary          *ClientComponentSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *LoadComponent) Reset()                    { *m = LoadComponent{} }
func (m *LoadComponent) String() string            { return proto.CompactTextString(m) }
func (*LoadComponent) ProtoMessage()               {}
func (*LoadComponent) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{54} }

func (m *LoadComponent) GetSummary() *ClientComponentSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

// Requests and responses to allow for executing an arbitrary binary.
// This differs from ExecuteRequest as it includes sending the binary.
type ExecuteBinaryRequest struct {
	Executable *SignedBlob `protobuf:"bytes,1,opt,name=executable" json:"executable,omitempty"`
	WritePath  *string     `protobuf:"bytes,2,opt,name=write_path,json=writePath" json:"write_path,omitempty"`
	Args       []string    `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// An execution time limit, given in seconds.
	TimeLimit        *int32 `protobuf:"varint,4,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
	MoreData         *bool  `protobuf:"varint,5,opt,name=more_data,json=moreData" json:"more_data,omitempty"`
	Offset           *int64 `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	UseClientEnv     *bool  `protobuf:"varint,7,opt,name=use_client_env,json=useClientEnv,def=0" json:"use_client_env,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecuteBinaryRequest) Reset()                    { *m = ExecuteBinaryRequest{} }
func (m *ExecuteBinaryRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBinaryRequest) ProtoMessage()               {}
func (*ExecuteBinaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{55} }

const Default_ExecuteBinaryRequest_UseClientEnv bool = false

func (m *ExecuteBinaryRequest) GetExecutable() *SignedBlob {
	if m != nil {
		return m.Executable
	}
	return nil
}

func (m *ExecuteBinaryRequest) GetWritePath() string {
	if m != nil && m.WritePath != nil {
		return *m.WritePath
	}
	return ""
}

func (m *ExecuteBinaryRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ExecuteBinaryRequest) GetTimeLimit() int32 {
	if m != nil && m.TimeLimit != nil {
		return *m.TimeLimit
	}
	return 0
}

func (m *ExecuteBinaryRequest) GetMoreData() bool {
	if m != nil && m.MoreData != nil {
		return *m.MoreData
	}
	return false
}

func (m *ExecuteBinaryRequest) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ExecuteBinaryRequest) GetUseClientEnv() bool {
	if m != nil && m.UseClientEnv != nil {
		return *m.UseClientEnv
	}
	return Default_ExecuteBinaryRequest_UseClientEnv
}

type ExecuteBinaryResponse struct {
	ExitStatus *int32 `protobuf:"varint,1,opt,name=exit_status,json=exitStatus" json:"exit_status,omitempty"`
	Stdout     []byte `protobuf:"bytes,2,opt,name=stdout" json:"stdout,omitempty"`
	Stderr     []byte `protobuf:"bytes,3,opt,name=stderr" json:"stderr,omitempty"`
	// The time used to execute the cmd, given in microseconds.
	TimeUsed         *int32 `protobuf:"varint,4,opt,name=time_used,json=timeUsed" json:"time_used,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecuteBinaryResponse) Reset()                    { *m = ExecuteBinaryResponse{} }
func (m *ExecuteBinaryResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBinaryResponse) ProtoMessage()               {}
func (*ExecuteBinaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{56} }

func (m *ExecuteBinaryResponse) GetExitStatus() int32 {
	if m != nil && m.ExitStatus != nil {
		return *m.ExitStatus
	}
	return 0
}

func (m *ExecuteBinaryResponse) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *ExecuteBinaryResponse) GetStderr() []byte {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *ExecuteBinaryResponse) GetTimeUsed() int32 {
	if m != nil && m.TimeUsed != nil {
		return *m.TimeUsed
	}
	return 0
}

type DriverInstallTemplate struct {
	Driver      *SignedBlob `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	WritePath   *string     `protobuf:"bytes,2,opt,name=write_path,json=writePath" json:"write_path,omitempty"`
	ForceReload *uint32     `protobuf:"varint,3,opt,name=force_reload,json=forceReload" json:"force_reload,omitempty"`
	// Windows specific options.
	DriverName        *string                            `protobuf:"bytes,6,opt,name=driver_name,json=driverName" json:"driver_name,omitempty"`
	DriverDisplayName *string                            `protobuf:"bytes,7,opt,name=driver_display_name,json=driverDisplayName" json:"driver_display_name,omitempty"`
	DevicePath        *string                            `protobuf:"bytes,8,opt,name=device_path,json=devicePath" json:"device_path,omitempty"`
	Mode              *DriverInstallTemplate_RewriteMode `protobuf:"varint,9,opt,name=mode,enum=DriverInstallTemplate_RewriteMode,def=1" json:"mode,omitempty"`
	XXX_unrecognized  []byte                             `json:"-"`
}

func (m *DriverInstallTemplate) Reset()                    { *m = DriverInstallTemplate{} }
func (m *DriverInstallTemplate) String() string            { return proto.CompactTextString(m) }
func (*DriverInstallTemplate) ProtoMessage()               {}
func (*DriverInstallTemplate) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{57} }

const Default_DriverInstallTemplate_Mode DriverInstallTemplate_RewriteMode = DriverInstallTemplate_ENABLE

func (m *DriverInstallTemplate) GetDriver() *SignedBlob {
	if m != nil {
		return m.Driver
	}
	return nil
}

func (m *DriverInstallTemplate) GetWritePath() string {
	if m != nil && m.WritePath != nil {
		return *m.WritePath
	}
	return ""
}

func (m *DriverInstallTemplate) GetForceReload() uint32 {
	if m != nil && m.ForceReload != nil {
		return *m.ForceReload
	}
	return 0
}

func (m *DriverInstallTemplate) GetDriverName() string {
	if m != nil && m.DriverName != nil {
		return *m.DriverName
	}
	return ""
}

func (m *DriverInstallTemplate) GetDriverDisplayName() string {
	if m != nil && m.DriverDisplayName != nil {
		return *m.DriverDisplayName
	}
	return ""
}

func (m *DriverInstallTemplate) GetDevicePath() string {
	if m != nil && m.DevicePath != nil {
		return *m.DevicePath
	}
	return ""
}

func (m *DriverInstallTemplate) GetMode() DriverInstallTemplate_RewriteMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Default_DriverInstallTemplate_Mode
}

// This requests the client to encrypt a file and send it to a specified server.
type SendFileRequest struct {
	Pathspec         *PathSpec              `protobuf:"bytes,1,opt,name=pathspec" json:"pathspec,omitempty"`
	AddressFamily    *NetworkAddress_Family `protobuf:"varint,2,opt,name=address_family,json=addressFamily,enum=NetworkAddress_Family,def=0" json:"address_family,omitempty"`
	Host             *string                `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port             *uint64                `protobuf:"varint,4,opt,name=port,def=12345" json:"port,omitempty"`
	Key              []byte                 `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Iv               []byte                 `protobuf:"bytes,6,opt,name=iv" json:"iv,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *SendFileRequest) Reset()                    { *m = SendFileRequest{} }
func (m *SendFileRequest) String() string            { return proto.CompactTextString(m) }
func (*SendFileRequest) ProtoMessage()               {}
func (*SendFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{58} }

const Default_SendFileRequest_AddressFamily NetworkAddress_Family = NetworkAddress_INET
const Default_SendFileRequest_Port uint64 = 12345

func (m *SendFileRequest) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *SendFileRequest) GetAddressFamily() NetworkAddress_Family {
	if m != nil && m.AddressFamily != nil {
		return *m.AddressFamily
	}
	return Default_SendFileRequest_AddressFamily
}

func (m *SendFileRequest) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *SendFileRequest) GetPort() uint64 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_SendFileRequest_Port
}

func (m *SendFileRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SendFileRequest) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

// Grep searches the content of files for a hit and returns several
// BufferReference.
type GrepSpec struct {
	// The target of this search.
	Target *PathSpec `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	// The search only covers this buffer.
	StartOffset *uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,def=0" json:"start_offset,omitempty"`
	Length      *uint64 `protobuf:"varint,3,opt,name=length,def=10737418240" json:"length,omitempty"`
	Regex       *string `protobuf:"bytes,4,opt,name=regex" json:"regex,omitempty"`
	// A literal search.
	Literal     []byte         `protobuf:"bytes,5,opt,name=literal" json:"literal,omitempty"`
	Mode        *GrepSpec_Mode `protobuf:"varint,6,opt,name=mode,enum=GrepSpec_Mode,def=0" json:"mode,omitempty"`
	BytesBefore *uint32        `protobuf:"varint,7,opt,name=bytes_before,json=bytesBefore,def=10" json:"bytes_before,omitempty"`
	BytesAfter  *uint32        `protobuf:"varint,8,opt,name=bytes_after,json=bytesAfter,def=10" json:"bytes_after,omitempty"`
	// These are used to encode the arguments / results.
	XorInKey         *uint32 `protobuf:"varint,9,opt,name=xor_in_key,json=xorInKey,def=0" json:"xor_in_key,omitempty"`
	XorOutKey        *uint32 `protobuf:"varint,10,opt,name=xor_out_key,json=xorOutKey,def=0" json:"xor_out_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GrepSpec) Reset()                    { *m = GrepSpec{} }
func (m *GrepSpec) String() string            { return proto.CompactTextString(m) }
func (*GrepSpec) ProtoMessage()               {}
func (*GrepSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{59} }

const Default_GrepSpec_StartOffset uint64 = 0
const Default_GrepSpec_Length uint64 = 10737418240
const Default_GrepSpec_Mode GrepSpec_Mode = GrepSpec_ALL_HITS
const Default_GrepSpec_BytesBefore uint32 = 10
const Default_GrepSpec_BytesAfter uint32 = 10
const Default_GrepSpec_XorInKey uint32 = 0
const Default_GrepSpec_XorOutKey uint32 = 0

func (m *GrepSpec) GetTarget() *PathSpec {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GrepSpec) GetStartOffset() uint64 {
	if m != nil && m.StartOffset != nil {
		return *m.StartOffset
	}
	return Default_GrepSpec_StartOffset
}

func (m *GrepSpec) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return Default_GrepSpec_Length
}

func (m *GrepSpec) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *GrepSpec) GetLiteral() []byte {
	if m != nil {
		return m.Literal
	}
	return nil
}

func (m *GrepSpec) GetMode() GrepSpec_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Default_GrepSpec_Mode
}

func (m *GrepSpec) GetBytesBefore() uint32 {
	if m != nil && m.BytesBefore != nil {
		return *m.BytesBefore
	}
	return Default_GrepSpec_BytesBefore
}

func (m *GrepSpec) GetBytesAfter() uint32 {
	if m != nil && m.BytesAfter != nil {
		return *m.BytesAfter
	}
	return Default_GrepSpec_BytesAfter
}

func (m *GrepSpec) GetXorInKey() uint32 {
	if m != nil && m.XorInKey != nil {
		return *m.XorInKey
	}
	return Default_GrepSpec_XorInKey
}

func (m *GrepSpec) GetXorOutKey() uint32 {
	if m != nil && m.XorOutKey != nil {
		return *m.XorOutKey
	}
	return Default_GrepSpec_XorOutKey
}

// Requests and responses to allow a search for files that match all of these
// conditions.
type FindSpec struct {
	Iterator  *Iterator `protobuf:"bytes,1,opt,name=iterator" json:"iterator,omitempty"`
	Pathspec  *PathSpec `protobuf:"bytes,2,opt,name=pathspec" json:"pathspec,omitempty"`
	PathGlob  *string   `protobuf:"bytes,13,opt,name=path_glob,json=pathGlob" json:"path_glob,omitempty"`
	PathRegex *string   `protobuf:"bytes,3,opt,name=path_regex,json=pathRegex" json:"path_regex,omitempty"`
	DataRegex *string   `protobuf:"bytes,4,opt,name=data_regex,json=dataRegex" json:"data_regex,omitempty"`
	StartTime *uint64   `protobuf:"varint,5,opt,name=start_time,json=startTime,def=0" json:"start_time,omitempty"`
	EndTime   *uint64   `protobuf:"varint,6,opt,name=end_time,json=endTime,def=9223372036854775807" json:"end_time,omitempty"`
	// Should we cross filesystems? Default is no.
	CrossDevs *bool `protobuf:"varint,7,opt,name=cross_devs,json=crossDevs,def=0" json:"cross_devs,omitempty"`
	// How deep to search?
	MaxDepth *int32     `protobuf:"varint,8,opt,name=max_depth,json=maxDepth,def=15" json:"max_depth,omitempty"`
	Hit      *StatEntry `protobuf:"bytes,9,opt,name=hit" json:"hit,omitempty"`
	// The maximum amount of data from this file to search for data_regex.
	MaxData          *uint64 `protobuf:"varint,10,opt,name=max_data,json=maxData,def=1024000" json:"max_data,omitempty"`
	MinFileSize      *uint64 `protobuf:"varint,11,opt,name=min_file_size,json=minFileSize,def=0" json:"min_file_size,omitempty"`
	MaxFileSize      *uint64 `protobuf:"varint,12,opt,name=max_file_size,json=maxFileSize,def=9223372036854775807" json:"max_file_size,omitempty"`
	PermMask         *uint64 `protobuf:"varint,14,opt,name=perm_mask,json=permMask,def=4095" json:"perm_mask,omitempty"`
	PermMode         *uint64 `protobuf:"varint,15,opt,name=perm_mode,json=permMode" json:"perm_mode,omitempty"`
	Uid              *uint64 `protobuf:"varint,16,opt,name=uid" json:"uid,omitempty"`
	Gid              *uint64 `protobuf:"varint,17,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FindSpec) Reset()                    { *m = FindSpec{} }
func (m *FindSpec) String() string            { return proto.CompactTextString(m) }
func (*FindSpec) ProtoMessage()               {}
func (*FindSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{60} }

const Default_FindSpec_StartTime uint64 = 0
const Default_FindSpec_EndTime uint64 = 9223372036854775807
const Default_FindSpec_CrossDevs bool = false
const Default_FindSpec_MaxDepth int32 = 15
const Default_FindSpec_MaxData uint64 = 1024000
const Default_FindSpec_MinFileSize uint64 = 0
const Default_FindSpec_MaxFileSize uint64 = 9223372036854775807
const Default_FindSpec_PermMask uint64 = 4095

func (m *FindSpec) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

func (m *FindSpec) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *FindSpec) GetPathGlob() string {
	if m != nil && m.PathGlob != nil {
		return *m.PathGlob
	}
	return ""
}

func (m *FindSpec) GetPathRegex() string {
	if m != nil && m.PathRegex != nil {
		return *m.PathRegex
	}
	return ""
}

func (m *FindSpec) GetDataRegex() string {
	if m != nil && m.DataRegex != nil {
		return *m.DataRegex
	}
	return ""
}

func (m *FindSpec) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return Default_FindSpec_StartTime
}

func (m *FindSpec) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return Default_FindSpec_EndTime
}

func (m *FindSpec) GetCrossDevs() bool {
	if m != nil && m.CrossDevs != nil {
		return *m.CrossDevs
	}
	return Default_FindSpec_CrossDevs
}

func (m *FindSpec) GetMaxDepth() int32 {
	if m != nil && m.MaxDepth != nil {
		return *m.MaxDepth
	}
	return Default_FindSpec_MaxDepth
}

func (m *FindSpec) GetHit() *StatEntry {
	if m != nil {
		return m.Hit
	}
	return nil
}

func (m *FindSpec) GetMaxData() uint64 {
	if m != nil && m.MaxData != nil {
		return *m.MaxData
	}
	return Default_FindSpec_MaxData
}

func (m *FindSpec) GetMinFileSize() uint64 {
	if m != nil && m.MinFileSize != nil {
		return *m.MinFileSize
	}
	return Default_FindSpec_MinFileSize
}

func (m *FindSpec) GetMaxFileSize() uint64 {
	if m != nil && m.MaxFileSize != nil {
		return *m.MaxFileSize
	}
	return Default_FindSpec_MaxFileSize
}

func (m *FindSpec) GetPermMask() uint64 {
	if m != nil && m.PermMask != nil {
		return *m.PermMask
	}
	return Default_FindSpec_PermMask
}

func (m *FindSpec) GetPermMode() uint64 {
	if m != nil && m.PermMode != nil {
		return *m.PermMode
	}
	return 0
}

func (m *FindSpec) GetUid() uint64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *FindSpec) GetGid() uint64 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

type PlistRequest struct {
	Pathspec         *PathSpec `protobuf:"bytes,1,opt,name=pathspec" json:"pathspec,omitempty"`
	Context          *string   `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	Query            *string   `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PlistRequest) Reset()                    { *m = PlistRequest{} }
func (m *PlistRequest) String() string            { return proto.CompactTextString(m) }
func (*PlistRequest) ProtoMessage()               {}
func (*PlistRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{61} }

func (m *PlistRequest) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *PlistRequest) GetContext() string {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return ""
}

func (m *PlistRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

type GetClientStatsRequest struct {
	StartTime        *uint64 `protobuf:"varint,5,opt,name=start_time,json=startTime,def=0" json:"start_time,omitempty"`
	EndTime          *uint64 `protobuf:"varint,6,opt,name=end_time,json=endTime,def=9223372036854775807" json:"end_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetClientStatsRequest) Reset()                    { *m = GetClientStatsRequest{} }
func (m *GetClientStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClientStatsRequest) ProtoMessage()               {}
func (*GetClientStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{62} }

const Default_GetClientStatsRequest_StartTime uint64 = 0
const Default_GetClientStatsRequest_EndTime uint64 = 9223372036854775807

func (m *GetClientStatsRequest) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return Default_GetClientStatsRequest_StartTime
}

func (m *GetClientStatsRequest) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return Default_GetClientStatsRequest_EndTime
}

// This proto holds rules and the strategy used to evaluate them.
type ForemanClientRuleSet struct {
	// If this is MATCH_ANY then we fire when any rule matches
	MatchMode        *ForemanClientRuleSet_MatchMode `protobuf:"varint,1,opt,name=match_mode,json=matchMode,enum=ForemanClientRuleSet_MatchMode,def=0" json:"match_mode,omitempty"`
	Rules            []*ForemanClientRule            `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *ForemanClientRuleSet) Reset()                    { *m = ForemanClientRuleSet{} }
func (m *ForemanClientRuleSet) String() string            { return proto.CompactTextString(m) }
func (*ForemanClientRuleSet) ProtoMessage()               {}
func (*ForemanClientRuleSet) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{63} }

const Default_ForemanClientRuleSet_MatchMode ForemanClientRuleSet_MatchMode = ForemanClientRuleSet_MATCH_ALL

func (m *ForemanClientRuleSet) GetMatchMode() ForemanClientRuleSet_MatchMode {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return Default_ForemanClientRuleSet_MatchMode
}

func (m *ForemanClientRuleSet) GetRules() []*ForemanClientRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// "Base class" proto for foreman client rule protos.
type ForemanClientRule struct {
	RuleType         *ForemanClientRule_Type   `protobuf:"varint,1,opt,name=rule_type,json=ruleType,enum=ForemanClientRule_Type" json:"rule_type,omitempty"`
	Os               *ForemanOsClientRule      `protobuf:"bytes,2,opt,name=os" json:"os,omitempty"`
	Label            *ForemanLabelClientRule   `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	Regex            *ForemanRegexClientRule   `protobuf:"bytes,4,opt,name=regex" json:"regex,omitempty"`
	Integer          *ForemanIntegerClientRule `protobuf:"bytes,5,opt,name=integer" json:"integer,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ForemanClientRule) Reset()                    { *m = ForemanClientRule{} }
func (m *ForemanClientRule) String() string            { return proto.CompactTextString(m) }
func (*ForemanClientRule) ProtoMessage()               {}
func (*ForemanClientRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{64} }

func (m *ForemanClientRule) GetRuleType() ForemanClientRule_Type {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return ForemanClientRule_OS
}

func (m *ForemanClientRule) GetOs() *ForemanOsClientRule {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *ForemanClientRule) GetLabel() *ForemanLabelClientRule {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *ForemanClientRule) GetRegex() *ForemanRegexClientRule {
	if m != nil {
		return m.Regex
	}
	return nil
}

func (m *ForemanClientRule) GetInteger() *ForemanIntegerClientRule {
	if m != nil {
		return m.Integer
	}
	return nil
}

// This rule will fire if the client OS is marked as true in the proto.
type ForemanOsClientRule struct {
	OsWindows        *bool  `protobuf:"varint,1,opt,name=os_windows,json=osWindows" json:"os_windows,omitempty"`
	OsLinux          *bool  `protobuf:"varint,2,opt,name=os_linux,json=osLinux" json:"os_linux,omitempty"`
	OsDarwin         *bool  `protobuf:"varint,3,opt,name=os_darwin,json=osDarwin" json:"os_darwin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ForemanOsClientRule) Reset()                    { *m = ForemanOsClientRule{} }
func (m *ForemanOsClientRule) String() string            { return proto.CompactTextString(m) }
func (*ForemanOsClientRule) ProtoMessage()               {}
func (*ForemanOsClientRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{65} }

func (m *ForemanOsClientRule) GetOsWindows() bool {
	if m != nil && m.OsWindows != nil {
		return *m.OsWindows
	}
	return false
}

func (m *ForemanOsClientRule) GetOsLinux() bool {
	if m != nil && m.OsLinux != nil {
		return *m.OsLinux
	}
	return false
}

func (m *ForemanOsClientRule) GetOsDarwin() bool {
	if m != nil && m.OsDarwin != nil {
		return *m.OsDarwin
	}
	return false
}

// This rule will fire if the client has the selected label.
type ForemanLabelClientRule struct {
	LabelNames       []string                          `protobuf:"bytes,1,rep,name=label_names,json=labelNames" json:"label_names,omitempty"`
	MatchMode        *ForemanLabelClientRule_MatchMode `protobuf:"varint,2,opt,name=match_mode,json=matchMode,enum=ForemanLabelClientRule_MatchMode,def=0" json:"match_mode,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *ForemanLabelClientRule) Reset()                    { *m = ForemanLabelClientRule{} }
func (m *ForemanLabelClientRule) String() string            { return proto.CompactTextString(m) }
func (*ForemanLabelClientRule) ProtoMessage()               {}
func (*ForemanLabelClientRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{66} }

const Default_ForemanLabelClientRule_MatchMode ForemanLabelClientRule_MatchMode = ForemanLabelClientRule_MATCH_ALL

func (m *ForemanLabelClientRule) GetLabelNames() []string {
	if m != nil {
		return m.LabelNames
	}
	return nil
}

func (m *ForemanLabelClientRule) GetMatchMode() ForemanLabelClientRule_MatchMode {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return Default_ForemanLabelClientRule_MatchMode
}

// The Foreman schedules flows based on these rules firing.
type ForemanRegexClientRule struct {
	// A relative path under the client which the attribute applies to
	Path             *string `protobuf:"bytes,1,opt,name=path,def=/" json:"path,omitempty"`
	AttributeName    *string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	AttributeRegex   *string `protobuf:"bytes,3,opt,name=attribute_regex,json=attributeRegex" json:"attribute_regex,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ForemanRegexClientRule) Reset()                    { *m = ForemanRegexClientRule{} }
func (m *ForemanRegexClientRule) String() string            { return proto.CompactTextString(m) }
func (*ForemanRegexClientRule) ProtoMessage()               {}
func (*ForemanRegexClientRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{67} }

const Default_ForemanRegexClientRule_Path string = "/"

func (m *ForemanRegexClientRule) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return Default_ForemanRegexClientRule_Path
}

func (m *ForemanRegexClientRule) GetAttributeName() string {
	if m != nil && m.AttributeName != nil {
		return *m.AttributeName
	}
	return ""
}

func (m *ForemanRegexClientRule) GetAttributeRegex() string {
	if m != nil && m.AttributeRegex != nil {
		return *m.AttributeRegex
	}
	return ""
}

// This rule will fire if the expression operator(attribute, value) is true.
type ForemanIntegerClientRule struct {
	// A relative path under the client which the attribute applies to
	Path             *string                            `protobuf:"bytes,1,opt,name=path,def=/" json:"path,omitempty"`
	AttributeName    *string                            `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	Operator         *ForemanIntegerClientRule_Operator `protobuf:"varint,3,opt,name=operator,enum=ForemanIntegerClientRule_Operator,def=0" json:"operator,omitempty"`
	Value            *uint64                            `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *ForemanIntegerClientRule) Reset()                    { *m = ForemanIntegerClientRule{} }
func (m *ForemanIntegerClientRule) String() string            { return proto.CompactTextString(m) }
func (*ForemanIntegerClientRule) ProtoMessage()               {}
func (*ForemanIntegerClientRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{68} }

const Default_ForemanIntegerClientRule_Path string = "/"
const Default_ForemanIntegerClientRule_Operator ForemanIntegerClientRule_Operator = ForemanIntegerClientRule_EQUAL

func (m *ForemanIntegerClientRule) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return Default_ForemanIntegerClientRule_Path
}

func (m *ForemanIntegerClientRule) GetAttributeName() string {
	if m != nil && m.AttributeName != nil {
		return *m.AttributeName
	}
	return ""
}

func (m *ForemanIntegerClientRule) GetOperator() ForemanIntegerClientRule_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return Default_ForemanIntegerClientRule_Operator
}

func (m *ForemanIntegerClientRule) GetValue() uint64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// This action happens when the rule fires
type ForemanRuleAction struct {
	FlowName *string `protobuf:"bytes,1,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	Argv     *Dict   `protobuf:"bytes,2,opt,name=argv" json:"argv,omitempty"`
	// Hunts are handled specially here.
	HuntName *string `protobuf:"bytes,3,opt,name=hunt_name,json=huntName" json:"hunt_name,omitempty"`
	// Hunt session id.
	HuntId           *string `protobuf:"bytes,4,opt,name=hunt_id,json=huntId" json:"hunt_id,omitempty"`
	ClientLimit      *uint64 `protobuf:"varint,5,opt,name=client_limit,json=clientLimit" json:"client_limit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ForemanRuleAction) Reset()                    { *m = ForemanRuleAction{} }
func (m *ForemanRuleAction) String() string            { return proto.CompactTextString(m) }
func (*ForemanRuleAction) ProtoMessage()               {}
func (*ForemanRuleAction) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{69} }

func (m *ForemanRuleAction) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

func (m *ForemanRuleAction) GetArgv() *Dict {
	if m != nil {
		return m.Argv
	}
	return nil
}

func (m *ForemanRuleAction) GetHuntName() string {
	if m != nil && m.HuntName != nil {
		return *m.HuntName
	}
	return ""
}

func (m *ForemanRuleAction) GetHuntId() string {
	if m != nil && m.HuntId != nil {
		return *m.HuntId
	}
	return ""
}

func (m *ForemanRuleAction) GetClientLimit() uint64 {
	if m != nil && m.ClientLimit != nil {
		return *m.ClientLimit
	}
	return 0
}

type ForemanRule struct {
	// We fire when all these rules match
	ClientRuleSet *ForemanClientRuleSet `protobuf:"bytes,7,opt,name=client_rule_set,json=clientRuleSet" json:"client_rule_set,omitempty"`
	// These will all run in case this rule fires
	Actions []*ForemanRuleAction `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
	Created *uint64              `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Expires *uint64              `protobuf:"varint,5,opt,name=expires" json:"expires,omitempty"`
	// A Human readable description of what this is supposed to do
	Description      *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ForemanRule) Reset()                    { *m = ForemanRule{} }
func (m *ForemanRule) String() string            { return proto.CompactTextString(m) }
func (*ForemanRule) ProtoMessage()               {}
func (*ForemanRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{70} }

func (m *ForemanRule) GetClientRuleSet() *ForemanClientRuleSet {
	if m != nil {
		return m.ClientRuleSet
	}
	return nil
}

func (m *ForemanRule) GetActions() []*ForemanRuleAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *ForemanRule) GetCreated() uint64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *ForemanRule) GetExpires() uint64 {
	if m != nil && m.Expires != nil {
		return *m.Expires
	}
	return 0
}

func (m *ForemanRule) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type HuntError struct {
	ClientId         *string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	LogMessage       *string `protobuf:"bytes,2,opt,name=log_message,json=logMessage" json:"log_message,omitempty"`
	Backtrace        *string `protobuf:"bytes,3,opt,name=backtrace" json:"backtrace,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HuntError) Reset()                    { *m = HuntError{} }
func (m *HuntError) String() string            { return proto.CompactTextString(m) }
func (*HuntError) ProtoMessage()               {}
func (*HuntError) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{71} }

func (m *HuntError) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *HuntError) GetLogMessage() string {
	if m != nil && m.LogMessage != nil {
		return *m.LogMessage
	}
	return ""
}

func (m *HuntError) GetBacktrace() string {
	if m != nil && m.Backtrace != nil {
		return *m.Backtrace
	}
	return ""
}

type FlowLog struct {
	ClientId         *string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	LogMessage       *string `protobuf:"bytes,2,opt,name=log_message,json=logMessage" json:"log_message,omitempty"`
	Urn              *string `protobuf:"bytes,3,opt,name=urn" json:"urn,omitempty"`
	FlowName         *string `protobuf:"bytes,4,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FlowLog) Reset()                    { *m = FlowLog{} }
func (m *FlowLog) String() string            { return proto.CompactTextString(m) }
func (*FlowLog) ProtoMessage()               {}
func (*FlowLog) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{72} }

func (m *FlowLog) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *FlowLog) GetLogMessage() string {
	if m != nil && m.LogMessage != nil {
		return *m.LogMessage
	}
	return ""
}

func (m *FlowLog) GetUrn() string {
	if m != nil && m.Urn != nil {
		return *m.Urn
	}
	return ""
}

func (m *FlowLog) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

type ClientResources struct {
	ClientId         *string     `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	SessionId        *string     `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	CpuUsage         *CpuSeconds `protobuf:"bytes,3,opt,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	NetworkBytesSent *uint64     `protobuf:"varint,4,opt,name=network_bytes_sent,json=networkBytesSent" json:"network_bytes_sent,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ClientResources) Reset()                    { *m = ClientResources{} }
func (m *ClientResources) String() string            { return proto.CompactTextString(m) }
func (*ClientResources) ProtoMessage()               {}
func (*ClientResources) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{73} }

func (m *ClientResources) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *ClientResources) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *ClientResources) GetCpuUsage() *CpuSeconds {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *ClientResources) GetNetworkBytesSent() uint64 {
	if m != nil && m.NetworkBytesSent != nil {
		return *m.NetworkBytesSent
	}
	return 0
}

type StatsHistogram struct {
	Bins             []*StatsHistogramBin `protobuf:"bytes,3,rep,name=bins" json:"bins,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *StatsHistogram) Reset()                    { *m = StatsHistogram{} }
func (m *StatsHistogram) String() string            { return proto.CompactTextString(m) }
func (*StatsHistogram) ProtoMessage()               {}
func (*StatsHistogram) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{74} }

func (m *StatsHistogram) GetBins() []*StatsHistogramBin {
	if m != nil {
		return m.Bins
	}
	return nil
}

type StatsHistogramBin struct {
	RangeMaxValue    *float32 `protobuf:"fixed32,1,opt,name=range_max_value,json=rangeMaxValue" json:"range_max_value,omitempty"`
	Num              *uint64  `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StatsHistogramBin) Reset()                    { *m = StatsHistogramBin{} }
func (m *StatsHistogramBin) String() string            { return proto.CompactTextString(m) }
func (*StatsHistogramBin) ProtoMessage()               {}
func (*StatsHistogramBin) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{75} }

func (m *StatsHistogramBin) GetRangeMaxValue() float32 {
	if m != nil && m.RangeMaxValue != nil {
		return *m.RangeMaxValue
	}
	return 0
}

func (m *StatsHistogramBin) GetNum() uint64 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type RunningStats struct {
	Histogram        *StatsHistogram `protobuf:"bytes,1,opt,name=histogram" json:"histogram,omitempty"`
	Num              *uint64         `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Sum              *float64        `protobuf:"fixed64,3,opt,name=sum" json:"sum,omitempty"`
	SumSq            *float64        `protobuf:"fixed64,4,opt,name=sum_sq,json=sumSq" json:"sum_sq,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RunningStats) Reset()                    { *m = RunningStats{} }
func (m *RunningStats) String() string            { return proto.CompactTextString(m) }
func (*RunningStats) ProtoMessage()               {}
func (*RunningStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{76} }

func (m *RunningStats) GetHistogram() *StatsHistogram {
	if m != nil {
		return m.Histogram
	}
	return nil
}

func (m *RunningStats) GetNum() uint64 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *RunningStats) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *RunningStats) GetSumSq() float64 {
	if m != nil && m.SumSq != nil {
		return *m.SumSq
	}
	return 0
}

type ClientResourcesStats struct {
	UserCpuStats          *RunningStats      `protobuf:"bytes,1,opt,name=user_cpu_stats,json=userCpuStats" json:"user_cpu_stats,omitempty"`
	SystemCpuStats        *RunningStats      `protobuf:"bytes,2,opt,name=system_cpu_stats,json=systemCpuStats" json:"system_cpu_stats,omitempty"`
	NetworkBytesSentStats *RunningStats      `protobuf:"bytes,3,opt,name=network_bytes_sent_stats,json=networkBytesSentStats" json:"network_bytes_sent_stats,omitempty"`
	WorstPerformers       []*ClientResources `protobuf:"bytes,4,rep,name=worst_performers,json=worstPerformers" json:"worst_performers,omitempty"`
	XXX_unrecognized      []byte             `json:"-"`
}

func (m *ClientResourcesStats) Reset()                    { *m = ClientResourcesStats{} }
func (m *ClientResourcesStats) String() string            { return proto.CompactTextString(m) }
func (*ClientResourcesStats) ProtoMessage()               {}
func (*ClientResourcesStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{77} }

func (m *ClientResourcesStats) GetUserCpuStats() *RunningStats {
	if m != nil {
		return m.UserCpuStats
	}
	return nil
}

func (m *ClientResourcesStats) GetSystemCpuStats() *RunningStats {
	if m != nil {
		return m.SystemCpuStats
	}
	return nil
}

func (m *ClientResourcesStats) GetNetworkBytesSentStats() *RunningStats {
	if m != nil {
		return m.NetworkBytesSentStats
	}
	return nil
}

func (m *ClientResourcesStats) GetWorstPerformers() []*ClientResources {
	if m != nil {
		return m.WorstPerformers
	}
	return nil
}

// An Iterator is an opaque object which is returned by the client for each
// iteration.
type Iterator struct {
	// This is an opaque generic place for the client to store its state.
	ClientState *Dict `protobuf:"bytes,1,opt,name=client_state,json=clientState" json:"client_state,omitempty"`
	// The following specify how many responses to send away. First we skip some
	// responses and then send "number" responses. Note that skip is not supported
	// by all iterating Actions.
	Skip             *uint32         `protobuf:"varint,2,opt,name=skip,def=0" json:"skip,omitempty"`
	Number           *uint32         `protobuf:"varint,3,opt,name=number,def=100" json:"number,omitempty"`
	State            *Iterator_State `protobuf:"varint,4,opt,name=state,enum=Iterator_State,def=0" json:"state,omitempty"`
	SuspendedAction  *uint64         `protobuf:"varint,5,opt,name=suspended_action,json=suspendedAction" json:"suspended_action,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Iterator) Reset()                    { *m = Iterator{} }
func (m *Iterator) String() string            { return proto.CompactTextString(m) }
func (*Iterator) ProtoMessage()               {}
func (*Iterator) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{78} }

const Default_Iterator_Skip uint32 = 0
const Default_Iterator_Number uint32 = 100
const Default_Iterator_State Iterator_State = Iterator_RUNNING

func (m *Iterator) GetClientState() *Dict {
	if m != nil {
		return m.ClientState
	}
	return nil
}

func (m *Iterator) GetSkip() uint32 {
	if m != nil && m.Skip != nil {
		return *m.Skip
	}
	return Default_Iterator_Skip
}

func (m *Iterator) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return Default_Iterator_Number
}

func (m *Iterator) GetState() Iterator_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_Iterator_State
}

func (m *Iterator) GetSuspendedAction() uint64 {
	if m != nil && m.SuspendedAction != nil {
		return *m.SuspendedAction
	}
	return 0
}

// FindAction returns these protobufs.
type IteratedStatResponse struct {
	Stat             *StatEntry `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
	Iterator         *Iterator  `protobuf:"bytes,2,opt,name=iterator" json:"iterator,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *IteratedStatResponse) Reset()                    { *m = IteratedStatResponse{} }
func (m *IteratedStatResponse) String() string            { return proto.CompactTextString(m) }
func (*IteratedStatResponse) ProtoMessage()               {}
func (*IteratedStatResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{79} }

func (m *IteratedStatResponse) GetStat() *StatEntry {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *IteratedStatResponse) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

// A notification is used in the GUI to alert users that some operation is
// completed
type Notification struct {
	// The notification type - this is used to interpret the meaning of this
	// message. For example in the GUI this is used to choose the view which is
	// displayed when the notification is clicked on.
	Type             *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Subject          *string `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	Message          *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Source           *string `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{80} }

func (m *Notification) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Notification) GetSubject() string {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return ""
}

func (m *Notification) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Notification) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *Notification) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

// Global notifications are used in the GUI to alert all the users about certain
// thing happening: new feature added in the latest release, temporary outage,
// etc.
type GlobalNotification struct {
	Type             *GlobalNotification_Type `protobuf:"varint,1,opt,name=type,enum=GlobalNotification_Type" json:"type,omitempty"`
	Header           *string                  `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Content          *string                  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Link             *string                  `protobuf:"bytes,4,opt,name=link" json:"link,omitempty"`
	ShowFrom         *uint64                  `protobuf:"varint,5,opt,name=show_from,json=showFrom" json:"show_from,omitempty"`
	Duration         *uint64                  `protobuf:"varint,6,opt,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *GlobalNotification) Reset()                    { *m = GlobalNotification{} }
func (m *GlobalNotification) String() string            { return proto.CompactTextString(m) }
func (*GlobalNotification) ProtoMessage()               {}
func (*GlobalNotification) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{81} }

func (m *GlobalNotification) GetType() GlobalNotification_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GlobalNotification_INFO
}

func (m *GlobalNotification) GetHeader() string {
	if m != nil && m.Header != nil {
		return *m.Header
	}
	return ""
}

func (m *GlobalNotification) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *GlobalNotification) GetLink() string {
	if m != nil && m.Link != nil {
		return *m.Link
	}
	return ""
}

func (m *GlobalNotification) GetShowFrom() uint64 {
	if m != nil && m.ShowFrom != nil {
		return *m.ShowFrom
	}
	return 0
}

func (m *GlobalNotification) GetDuration() uint64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

type GlobalNotificationSet struct {
	Notifications    []*GlobalNotification `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *GlobalNotificationSet) Reset()                    { *m = GlobalNotificationSet{} }
func (m *GlobalNotificationSet) String() string            { return proto.CompactTextString(m) }
func (*GlobalNotificationSet) ProtoMessage()               {}
func (*GlobalNotificationSet) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{82} }

func (m *GlobalNotificationSet) GetNotifications() []*GlobalNotification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

// This is a way to serialize an arbitrary RDFValue.
type EmbeddedRDFValue struct {
	EmbeddedAge *uint64 `protobuf:"varint,1,opt,name=embedded_age,json=embeddedAge" json:"embedded_age,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// retrieve the class for it.
	Data             []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EmbeddedRDFValue) Reset()                    { *m = EmbeddedRDFValue{} }
func (m *EmbeddedRDFValue) String() string            { return proto.CompactTextString(m) }
func (*EmbeddedRDFValue) ProtoMessage()               {}
func (*EmbeddedRDFValue) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{83} }

func (m *EmbeddedRDFValue) GetEmbeddedAge() uint64 {
	if m != nil && m.EmbeddedAge != nil {
		return *m.EmbeddedAge
	}
	return 0
}

func (m *EmbeddedRDFValue) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EmbeddedRDFValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// This is a summary of an AFF4 object. It consists of the most important
// attributes of some common AFF4 objects. It is used to store a summary in AFF4
// collections for efficient searching and filtering - without needing to load
// all this information from the data store.
type AFF4ObjectSummary struct {
	// The TYPE attribute.
	Type             *string    `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Urn              *string    `protobuf:"bytes,2,opt,name=urn" json:"urn,omitempty"`
	Stat             *StatEntry `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AFF4ObjectSummary) Reset()                    { *m = AFF4ObjectSummary{} }
func (m *AFF4ObjectSummary) String() string            { return proto.CompactTextString(m) }
func (*AFF4ObjectSummary) ProtoMessage()               {}
func (*AFF4ObjectSummary) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{84} }

func (m *AFF4ObjectSummary) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *AFF4ObjectSummary) GetUrn() string {
	if m != nil && m.Urn != nil {
		return *m.Urn
	}
	return ""
}

func (m *AFF4ObjectSummary) GetStat() *StatEntry {
	if m != nil {
		return m.Stat
	}
	return nil
}

type AuditEvent struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User             *string            `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Action           *AuditEvent_Action `protobuf:"varint,3,opt,name=action,enum=AuditEvent_Action,def=0" json:"action,omitempty"`
	FlowName         *string            `protobuf:"bytes,4,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	FlowArgs         []byte             `protobuf:"bytes,5,opt,name=flow_args,json=flowArgs" json:"flow_args,omitempty"`
	Client           *string            `protobuf:"bytes,6,opt,name=client" json:"client,omitempty"`
	Timestamp        *uint64            `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	Description      *string            `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	Urn              *string            `protobuf:"bytes,9,opt,name=urn" json:"urn,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *AuditEvent) Reset()                    { *m = AuditEvent{} }
func (m *AuditEvent) String() string            { return proto.CompactTextString(m) }
func (*AuditEvent) ProtoMessage()               {}
func (*AuditEvent) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{85} }

const Default_AuditEvent_Action AuditEvent_Action = AuditEvent_UNKNOWN

func (m *AuditEvent) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AuditEvent) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *AuditEvent) GetAction() AuditEvent_Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Default_AuditEvent_Action
}

func (m *AuditEvent) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

func (m *AuditEvent) GetFlowArgs() []byte {
	if m != nil {
		return m.FlowArgs
	}
	return nil
}

func (m *AuditEvent) GetClient() string {
	if m != nil && m.Client != nil {
		return *m.Client
	}
	return ""
}

func (m *AuditEvent) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AuditEvent) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *AuditEvent) GetUrn() string {
	if m != nil && m.Urn != nil {
		return *m.Urn
	}
	return ""
}

// This is a summary of a GRR client.
type ClientSummary struct {
	ClientId           *string            `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Timestamp          *uint64            `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	SystemInfo         *Uname             `protobuf:"bytes,3,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
	ClientInfo         *ClientInformation `protobuf:"bytes,4,opt,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	InstallDate        *uint64            `protobuf:"varint,5,opt,name=install_date,json=installDate" json:"install_date,omitempty"`
	Interfaces         []*Interface       `protobuf:"bytes,7,rep,name=interfaces" json:"interfaces,omitempty"`
	SerialNumber       *string            `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	SystemManufacturer *string            `protobuf:"bytes,9,opt,name=system_manufacturer,json=systemManufacturer" json:"system_manufacturer,omitempty"`
	Users              []*User            `protobuf:"bytes,10,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized   []byte             `json:"-"`
}

func (m *ClientSummary) Reset()                    { *m = ClientSummary{} }
func (m *ClientSummary) String() string            { return proto.CompactTextString(m) }
func (*ClientSummary) ProtoMessage()               {}
func (*ClientSummary) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{86} }

func (m *ClientSummary) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *ClientSummary) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ClientSummary) GetSystemInfo() *Uname {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *ClientSummary) GetClientInfo() *ClientInformation {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *ClientSummary) GetInstallDate() uint64 {
	if m != nil && m.InstallDate != nil {
		return *m.InstallDate
	}
	return 0
}

func (m *ClientSummary) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *ClientSummary) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *ClientSummary) GetSystemManufacturer() string {
	if m != nil && m.SystemManufacturer != nil {
		return *m.SystemManufacturer
	}
	return ""
}

func (m *ClientSummary) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type CronJobRunStatus struct {
	Status           *CronJobRunStatus_Status `protobuf:"varint,1,opt,name=status,enum=CronJobRunStatus_Status,def=0" json:"status,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CronJobRunStatus) Reset()                    { *m = CronJobRunStatus{} }
func (m *CronJobRunStatus) String() string            { return proto.CompactTextString(m) }
func (*CronJobRunStatus) ProtoMessage()               {}
func (*CronJobRunStatus) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{87} }

const Default_CronJobRunStatus_Status CronJobRunStatus_Status = CronJobRunStatus_OK

func (m *CronJobRunStatus) GetStatus() CronJobRunStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_CronJobRunStatus_Status
}

type MetricFieldDefinition struct {
	FieldName        *string                          `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	FieldType        *MetricFieldDefinition_FieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,enum=MetricFieldDefinition_FieldType" json:"field_type,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *MetricFieldDefinition) Reset()                    { *m = MetricFieldDefinition{} }
func (m *MetricFieldDefinition) String() string            { return proto.CompactTextString(m) }
func (*MetricFieldDefinition) ProtoMessage()               {}
func (*MetricFieldDefinition) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{88} }

func (m *MetricFieldDefinition) GetFieldName() string {
	if m != nil && m.FieldName != nil {
		return *m.FieldName
	}
	return ""
}

func (m *MetricFieldDefinition) GetFieldType() MetricFieldDefinition_FieldType {
	if m != nil && m.FieldType != nil {
		return *m.FieldType
	}
	return MetricFieldDefinition_INT
}

type MetricMetadata struct {
	Varname          *string                     `protobuf:"bytes,1,opt,name=varname" json:"varname,omitempty"`
	MetricType       *MetricMetadata_MetricType  `protobuf:"varint,2,opt,name=metric_type,json=metricType,enum=MetricMetadata_MetricType" json:"metric_type,omitempty"`
	ValueType        *MetricMetadata_ValueType   `protobuf:"varint,3,opt,name=value_type,json=valueType,enum=MetricMetadata_ValueType" json:"value_type,omitempty"`
	FieldsDefs       []*MetricFieldDefinition    `protobuf:"bytes,4,rep,name=fields_defs,json=fieldsDefs" json:"fields_defs,omitempty"`
	Docstring        *string                     `protobuf:"bytes,5,opt,name=docstring" json:"docstring,omitempty"`
	Units            *MetricMetadata_MetricUnits `protobuf:"varint,6,opt,name=units,enum=MetricMetadata_MetricUnits" json:"units,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *MetricMetadata) Reset()                    { *m = MetricMetadata{} }
func (m *MetricMetadata) String() string            { return proto.CompactTextString(m) }
func (*MetricMetadata) ProtoMessage()               {}
func (*MetricMetadata) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{89} }

func (m *MetricMetadata) GetVarname() string {
	if m != nil && m.Varname != nil {
		return *m.Varname
	}
	return ""
}

func (m *MetricMetadata) GetMetricType() MetricMetadata_MetricType {
	if m != nil && m.MetricType != nil {
		return *m.MetricType
	}
	return MetricMetadata_COUNTER
}

func (m *MetricMetadata) GetValueType() MetricMetadata_ValueType {
	if m != nil && m.ValueType != nil {
		return *m.ValueType
	}
	return MetricMetadata_INT
}

func (m *MetricMetadata) GetFieldsDefs() []*MetricFieldDefinition {
	if m != nil {
		return m.FieldsDefs
	}
	return nil
}

func (m *MetricMetadata) GetDocstring() string {
	if m != nil && m.Docstring != nil {
		return *m.Docstring
	}
	return ""
}

func (m *MetricMetadata) GetUnits() MetricMetadata_MetricUnits {
	if m != nil && m.Units != nil {
		return *m.Units
	}
	return MetricMetadata_SECONDS
}

type StatsStoreMetricsMetadata struct {
	Metrics          []*MetricMetadata `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StatsStoreMetricsMetadata) Reset()                    { *m = StatsStoreMetricsMetadata{} }
func (m *StatsStoreMetricsMetadata) String() string            { return proto.CompactTextString(m) }
func (*StatsStoreMetricsMetadata) ProtoMessage()               {}
func (*StatsStoreMetricsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{90} }

func (m *StatsStoreMetricsMetadata) GetMetrics() []*MetricMetadata {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Distribution struct {
	Sum              *float32  `protobuf:"fixed32,1,opt,name=sum" json:"sum,omitempty"`
	Count            *uint64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Bins             []float32 `protobuf:"fixed32,3,rep,name=bins" json:"bins,omitempty"`
	BinsHeights      []float32 `protobuf:"fixed32,4,rep,name=bins_heights,json=binsHeights" json:"bins_heights,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Distribution) Reset()                    { *m = Distribution{} }
func (m *Distribution) String() string            { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()               {}
func (*Distribution) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{91} }

func (m *Distribution) GetSum() float32 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *Distribution) GetCount() uint64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Distribution) GetBins() []float32 {
	if m != nil {
		return m.Bins
	}
	return nil
}

func (m *Distribution) GetBinsHeights() []float32 {
	if m != nil {
		return m.BinsHeights
	}
	return nil
}

type StatsStoreFieldValue struct {
	FieldType        *MetricFieldDefinition_FieldType `protobuf:"varint,1,opt,name=field_type,json=fieldType,enum=MetricFieldDefinition_FieldType" json:"field_type,omitempty"`
	StrValue         *string                          `protobuf:"bytes,2,opt,name=str_value,json=strValue" json:"str_value,omitempty"`
	IntValue         *int64                           `protobuf:"varint,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *StatsStoreFieldValue) Reset()                    { *m = StatsStoreFieldValue{} }
func (m *StatsStoreFieldValue) String() string            { return proto.CompactTextString(m) }
func (*StatsStoreFieldValue) ProtoMessage()               {}
func (*StatsStoreFieldValue) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{92} }

func (m *StatsStoreFieldValue) GetFieldType() MetricFieldDefinition_FieldType {
	if m != nil && m.FieldType != nil {
		return *m.FieldType
	}
	return MetricFieldDefinition_INT
}

func (m *StatsStoreFieldValue) GetStrValue() string {
	if m != nil && m.StrValue != nil {
		return *m.StrValue
	}
	return ""
}

func (m *StatsStoreFieldValue) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

type StatsStoreValue struct {
	ValueType         *MetricMetadata_ValueType `protobuf:"varint,1,opt,name=value_type,json=valueType,enum=MetricMetadata_ValueType" json:"value_type,omitempty"`
	StrValue          *string                   `protobuf:"bytes,2,opt,name=str_value,json=strValue" json:"str_value,omitempty"`
	IntValue          *int64                    `protobuf:"varint,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	FloatValue        *float32                  `protobuf:"fixed32,4,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	DistributionValue *Distribution             `protobuf:"bytes,5,opt,name=distribution_value,json=distributionValue" json:"distribution_value,omitempty"`
	FieldsValues      []*StatsStoreFieldValue   `protobuf:"bytes,6,rep,name=fields_values,json=fieldsValues" json:"fields_values,omitempty"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *StatsStoreValue) Reset()                    { *m = StatsStoreValue{} }
func (m *StatsStoreValue) String() string            { return proto.CompactTextString(m) }
func (*StatsStoreValue) ProtoMessage()               {}
func (*StatsStoreValue) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{93} }

func (m *StatsStoreValue) GetValueType() MetricMetadata_ValueType {
	if m != nil && m.ValueType != nil {
		return *m.ValueType
	}
	return MetricMetadata_INT
}

func (m *StatsStoreValue) GetStrValue() string {
	if m != nil && m.StrValue != nil {
		return *m.StrValue
	}
	return ""
}

func (m *StatsStoreValue) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *StatsStoreValue) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *StatsStoreValue) GetDistributionValue() *Distribution {
	if m != nil {
		return m.DistributionValue
	}
	return nil
}

func (m *StatsStoreValue) GetFieldsValues() []*StatsStoreFieldValue {
	if m != nil {
		return m.FieldsValues
	}
	return nil
}

type AFF4ObjectLabel struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner            *string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AFF4ObjectLabel) Reset()                    { *m = AFF4ObjectLabel{} }
func (m *AFF4ObjectLabel) String() string            { return proto.CompactTextString(m) }
func (*AFF4ObjectLabel) ProtoMessage()               {}
func (*AFF4ObjectLabel) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{94} }

func (m *AFF4ObjectLabel) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AFF4ObjectLabel) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *AFF4ObjectLabel) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type AFF4ObjectLabelsList struct {
	Labels           []*AFF4ObjectLabel `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *AFF4ObjectLabelsList) Reset()                    { *m = AFF4ObjectLabelsList{} }
func (m *AFF4ObjectLabelsList) String() string            { return proto.CompactTextString(m) }
func (*AFF4ObjectLabelsList) ProtoMessage()               {}
func (*AFF4ObjectLabelsList) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{95} }

func (m *AFF4ObjectLabelsList) GetLabels() []*AFF4ObjectLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

type SeekIndex struct {
	Checkpoints      []*SeekIndexPair `protobuf:"bytes,1,rep,name=checkpoints" json:"checkpoints,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SeekIndex) Reset()                    { *m = SeekIndex{} }
func (m *SeekIndex) String() string            { return proto.CompactTextString(m) }
func (*SeekIndex) ProtoMessage()               {}
func (*SeekIndex) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{96} }

func (m *SeekIndex) GetCheckpoints() []*SeekIndexPair {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

type SeekIndexPair struct {
	IndexOffset      *uint64 `protobuf:"varint,1,opt,name=index_offset,json=indexOffset" json:"index_offset,omitempty"`
	ByteOffset       *uint64 `protobuf:"varint,2,opt,name=byte_offset,json=byteOffset" json:"byte_offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SeekIndexPair) Reset()                    { *m = SeekIndexPair{} }
func (m *SeekIndexPair) String() string            { return proto.CompactTextString(m) }
func (*SeekIndexPair) ProtoMessage()               {}
func (*SeekIndexPair) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{97} }

func (m *SeekIndexPair) GetIndexOffset() uint64 {
	if m != nil && m.IndexOffset != nil {
		return *m.IndexOffset
	}
	return 0
}

func (m *SeekIndexPair) GetByteOffset() uint64 {
	if m != nil && m.ByteOffset != nil {
		return *m.ByteOffset
	}
	return 0
}

// File used for persistence on a system.  e.g. windows service or runkey
// binary.
type PersistenceFile struct {
	Pathspec         *PathSpec `protobuf:"bytes,1,opt,name=pathspec" json:"pathspec,omitempty"`
	SourceUrn        *string   `protobuf:"bytes,2,opt,name=source_urn,json=sourceUrn" json:"source_urn,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PersistenceFile) Reset()                    { *m = PersistenceFile{} }
func (m *PersistenceFile) String() string            { return proto.CompactTextString(m) }
func (*PersistenceFile) ProtoMessage()               {}
func (*PersistenceFile) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{98} }

func (m *PersistenceFile) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *PersistenceFile) GetSourceUrn() string {
	if m != nil && m.SourceUrn != nil {
		return *m.SourceUrn
	}
	return ""
}

type EndToEndTestResult struct {
	Success          *bool   `protobuf:"varint,1,opt,name=success,def=0" json:"success,omitempty"`
	TestClassName    *string `protobuf:"bytes,2,opt,name=test_class_name,json=testClassName" json:"test_class_name,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Log              *string `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EndToEndTestResult) Reset()                    { *m = EndToEndTestResult{} }
func (m *EndToEndTestResult) String() string            { return proto.CompactTextString(m) }
func (*EndToEndTestResult) ProtoMessage()               {}
func (*EndToEndTestResult) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{99} }

const Default_EndToEndTestResult_Success bool = false

func (m *EndToEndTestResult) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return Default_EndToEndTestResult_Success
}

func (m *EndToEndTestResult) GetTestClassName() string {
	if m != nil && m.TestClassName != nil {
		return *m.TestClassName
	}
	return ""
}

func (m *EndToEndTestResult) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *EndToEndTestResult) GetLog() string {
	if m != nil && m.Log != nil {
		return *m.Log
	}
	return ""
}

type EmptyMessage struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{100} }

type NSRLInformation struct {
	Sha1             []byte                    `protobuf:"bytes,1,opt,name=sha1" json:"sha1,omitempty"`
	Md5              []byte                    `protobuf:"bytes,2,opt,name=md5" json:"md5,omitempty"`
	Crc32            *uint32                   `protobuf:"varint,3,opt,name=crc32" json:"crc32,omitempty"`
	FileSize         *uint64                   `protobuf:"varint,4,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	FileName         *string                   `protobuf:"bytes,5,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	ProductCode      []uint64                  `protobuf:"varint,6,rep,name=product_code,json=productCode" json:"product_code,omitempty"`
	OpSystemCode     []string                  `protobuf:"bytes,7,rep,name=op_system_code,json=opSystemCode" json:"op_system_code,omitempty"`
	FileType         *NSRLInformation_FileType `protobuf:"varint,8,opt,name=file_type,json=fileType,enum=NSRLInformation_FileType" json:"file_type,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NSRLInformation) Reset()                    { *m = NSRLInformation{} }
func (m *NSRLInformation) String() string            { return proto.CompactTextString(m) }
func (*NSRLInformation) ProtoMessage()               {}
func (*NSRLInformation) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{101} }

func (m *NSRLInformation) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

func (m *NSRLInformation) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

func (m *NSRLInformation) GetCrc32() uint32 {
	if m != nil && m.Crc32 != nil {
		return *m.Crc32
	}
	return 0
}

func (m *NSRLInformation) GetFileSize() uint64 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *NSRLInformation) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *NSRLInformation) GetProductCode() []uint64 {
	if m != nil {
		return m.ProductCode
	}
	return nil
}

func (m *NSRLInformation) GetOpSystemCode() []string {
	if m != nil {
		return m.OpSystemCode
	}
	return nil
}

func (m *NSRLInformation) GetFileType() NSRLInformation_FileType {
	if m != nil && m.FileType != nil {
		return *m.FileType
	}
	return NSRLInformation_NORMAL_FILE
}

type PendingFlowTermination struct {
	Reason           *string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PendingFlowTermination) Reset()                    { *m = PendingFlowTermination{} }
func (m *PendingFlowTermination) String() string            { return proto.CompactTextString(m) }
func (*PendingFlowTermination) ProtoMessage()               {}
func (*PendingFlowTermination) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{102} }

func (m *PendingFlowTermination) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type DumpProcessMemoryRequest struct {
	Pid              *int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Pause            *bool  `protobuf:"varint,2,opt,name=pause" json:"pause,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DumpProcessMemoryRequest) Reset()                    { *m = DumpProcessMemoryRequest{} }
func (m *DumpProcessMemoryRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpProcessMemoryRequest) ProtoMessage()               {}
func (*DumpProcessMemoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{103} }

func (m *DumpProcessMemoryRequest) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *DumpProcessMemoryRequest) GetPause() bool {
	if m != nil && m.Pause != nil {
		return *m.Pause
	}
	return false
}

func init() {
	proto.RegisterType((*HttpRequest)(nil), "HttpRequest")
	proto.RegisterType((*GrrMessage)(nil), "GrrMessage")
	proto.RegisterType((*MessageList)(nil), "MessageList")
	proto.RegisterType((*SignedMessageList)(nil), "SignedMessageList")
	proto.RegisterType((*CipherProperties)(nil), "CipherProperties")
	proto.RegisterType((*CipherMetadata)(nil), "CipherMetadata")
	proto.RegisterType((*ClientCommunication)(nil), "ClientCommunication")
	proto.RegisterType((*GrrStatus)(nil), "GrrStatus")
	proto.RegisterType((*GrrNotification)(nil), "GrrNotification")
	proto.RegisterType((*ClientCrash)(nil), "ClientCrash")
	proto.RegisterType((*HuntNotification)(nil), "HuntNotification")
	proto.RegisterType((*HuntResultNotification)(nil), "HuntResultNotification")
	proto.RegisterType((*FlowNotification)(nil), "FlowNotification")
	proto.RegisterType((*ClientInformation)(nil), "ClientInformation")
	proto.RegisterType((*Task)(nil), "Task")
	proto.RegisterType((*DataBlob)(nil), "DataBlob")
	proto.RegisterType((*BlobArray)(nil), "BlobArray")
	proto.RegisterType((*PrintStr)(nil), "PrintStr")
	proto.RegisterType((*CopyPathToFile)(nil), "CopyPathToFile")
	proto.RegisterType((*BufferReference)(nil), "BufferReference")
	proto.RegisterType((*RequestState)(nil), "RequestState")
	proto.RegisterType((*Flow)(nil), "Flow")
	proto.RegisterType((*CpuSeconds)(nil), "CpuSeconds")
	proto.RegisterType((*CpuSample)(nil), "CpuSample")
	proto.RegisterType((*IOSample)(nil), "IOSample")
	proto.RegisterType((*ClientStats)(nil), "ClientStats")
	proto.RegisterType((*StartupInfo)(nil), "StartupInfo")
	proto.RegisterType((*ExecuteRequest)(nil), "ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "ExecuteResponse")
	proto.RegisterType((*PathSpec)(nil), "PathSpec")
	proto.RegisterType((*ListDirRequest)(nil), "ListDirRequest")
	proto.RegisterType((*StatFSRequest)(nil), "StatFSRequest")
	proto.RegisterType((*StatEntry)(nil), "StatEntry")
	proto.RegisterType((*Collection)(nil), "Collection")
	proto.RegisterType((*WmiRequest)(nil), "WmiRequest")
	proto.RegisterType((*KeyValue)(nil), "KeyValue")
	proto.RegisterType((*Dict)(nil), "Dict")
	proto.RegisterType((*AttributedDict)(nil), "AttributedDict")
	proto.RegisterType((*Certificate)(nil), "Certificate")
	proto.RegisterType((*Uname)(nil), "Uname")
	proto.RegisterType((*FolderInformation)(nil), "FolderInformation")
	proto.RegisterType((*NetworkAddress)(nil), "NetworkAddress")
	proto.RegisterType((*Interface)(nil), "Interface")
	proto.RegisterType((*Hash)(nil), "Hash")
	proto.RegisterType((*AuthenticodeSignedData)(nil), "AuthenticodeSignedData")
	proto.RegisterType((*FingerprintTuple)(nil), "FingerprintTuple")
	proto.RegisterType((*FingerprintRequest)(nil), "FingerprintRequest")
	proto.RegisterType((*FingerprintResponse)(nil), "FingerprintResponse")
	proto.RegisterType((*SignedBlob)(nil), "SignedBlob")
	proto.RegisterType((*SymmetricCipher)(nil), "SymmetricCipher")
	proto.RegisterType((*ExecutePythonRequest)(nil), "ExecutePythonRequest")
	proto.RegisterType((*ExecutePythonResponse)(nil), "ExecutePythonResponse")
	proto.RegisterType((*ClientComponentSummary)(nil), "ClientComponentSummary")
	proto.RegisterType((*ClientComponent)(nil), "ClientComponent")
	proto.RegisterType((*LoadComponent)(nil), "LoadComponent")
	proto.RegisterType((*ExecuteBinaryRequest)(nil), "ExecuteBinaryRequest")
	proto.RegisterType((*ExecuteBinaryResponse)(nil), "ExecuteBinaryResponse")
	proto.RegisterType((*DriverInstallTemplate)(nil), "DriverInstallTemplate")
	proto.RegisterType((*SendFileRequest)(nil), "SendFileRequest")
	proto.RegisterType((*GrepSpec)(nil), "GrepSpec")
	proto.RegisterType((*FindSpec)(nil), "FindSpec")
	proto.RegisterType((*PlistRequest)(nil), "PlistRequest")
	proto.RegisterType((*GetClientStatsRequest)(nil), "GetClientStatsRequest")
	proto.RegisterType((*ForemanClientRuleSet)(nil), "ForemanClientRuleSet")
	proto.RegisterType((*ForemanClientRule)(nil), "ForemanClientRule")
	proto.RegisterType((*ForemanOsClientRule)(nil), "ForemanOsClientRule")
	proto.RegisterType((*ForemanLabelClientRule)(nil), "ForemanLabelClientRule")
	proto.RegisterType((*ForemanRegexClientRule)(nil), "ForemanRegexClientRule")
	proto.RegisterType((*ForemanIntegerClientRule)(nil), "ForemanIntegerClientRule")
	proto.RegisterType((*ForemanRuleAction)(nil), "ForemanRuleAction")
	proto.RegisterType((*ForemanRule)(nil), "ForemanRule")
	proto.RegisterType((*HuntError)(nil), "HuntError")
	proto.RegisterType((*FlowLog)(nil), "FlowLog")
	proto.RegisterType((*ClientResources)(nil), "ClientResources")
	proto.RegisterType((*StatsHistogram)(nil), "StatsHistogram")
	proto.RegisterType((*StatsHistogramBin)(nil), "StatsHistogramBin")
	proto.RegisterType((*RunningStats)(nil), "RunningStats")
	proto.RegisterType((*ClientResourcesStats)(nil), "ClientResourcesStats")
	proto.RegisterType((*Iterator)(nil), "Iterator")
	proto.RegisterType((*IteratedStatResponse)(nil), "IteratedStatResponse")
	proto.RegisterType((*Notification)(nil), "Notification")
	proto.RegisterType((*GlobalNotification)(nil), "GlobalNotification")
	proto.RegisterType((*GlobalNotificationSet)(nil), "GlobalNotificationSet")
	proto.RegisterType((*EmbeddedRDFValue)(nil), "EmbeddedRDFValue")
	proto.RegisterType((*AFF4ObjectSummary)(nil), "AFF4ObjectSummary")
	proto.RegisterType((*AuditEvent)(nil), "AuditEvent")
	proto.RegisterType((*ClientSummary)(nil), "ClientSummary")
	proto.RegisterType((*CronJobRunStatus)(nil), "CronJobRunStatus")
	proto.RegisterType((*MetricFieldDefinition)(nil), "MetricFieldDefinition")
	proto.RegisterType((*MetricMetadata)(nil), "MetricMetadata")
	proto.RegisterType((*StatsStoreMetricsMetadata)(nil), "StatsStoreMetricsMetadata")
	proto.RegisterType((*Distribution)(nil), "Distribution")
	proto.RegisterType((*StatsStoreFieldValue)(nil), "StatsStoreFieldValue")
	proto.RegisterType((*StatsStoreValue)(nil), "StatsStoreValue")
	proto.RegisterType((*AFF4ObjectLabel)(nil), "AFF4ObjectLabel")
	proto.RegisterType((*AFF4ObjectLabelsList)(nil), "AFF4ObjectLabelsList")
	proto.RegisterType((*SeekIndex)(nil), "SeekIndex")
	proto.RegisterType((*SeekIndexPair)(nil), "SeekIndexPair")
	proto.RegisterType((*PersistenceFile)(nil), "PersistenceFile")
	proto.RegisterType((*EndToEndTestResult)(nil), "EndToEndTestResult")
	proto.RegisterType((*EmptyMessage)(nil), "EmptyMessage")
	proto.RegisterType((*NSRLInformation)(nil), "NSRLInformation")
	proto.RegisterType((*PendingFlowTermination)(nil), "PendingFlowTermination")
	proto.RegisterType((*DumpProcessMemoryRequest)(nil), "DumpProcessMemoryRequest")
	proto.RegisterEnum("GrrMessage_AuthorizationState", GrrMessage_AuthorizationState_name, GrrMessage_AuthorizationState_value)
	proto.RegisterEnum("GrrMessage_Type", GrrMessage_Type_name, GrrMessage_Type_value)
	proto.RegisterEnum("GrrMessage_Priority", GrrMessage_Priority_name, GrrMessage_Priority_value)
	proto.RegisterEnum("SignedMessageList_CompressionType", SignedMessageList_CompressionType_name, SignedMessageList_CompressionType_value)
	proto.RegisterEnum("CipherProperties_HMACType", CipherProperties_HMACType_name, CipherProperties_HMACType_value)
	proto.RegisterEnum("ClientCommunication_Status", ClientCommunication_Status_name, ClientCommunication_Status_value)
	proto.RegisterEnum("GrrStatus_ReturnedStatus", GrrStatus_ReturnedStatus_name, GrrStatus_ReturnedStatus_value)
	proto.RegisterEnum("HuntNotification_Status", HuntNotification_Status_name, HuntNotification_Status_value)
	proto.RegisterEnum("FlowNotification_Status", FlowNotification_Status_name, FlowNotification_Status_value)
	proto.RegisterEnum("DataBlob_CompressionType", DataBlob_CompressionType_name, DataBlob_CompressionType_value)
	proto.RegisterEnum("Flow_State", Flow_State_name, Flow_State_value)
	proto.RegisterEnum("PathSpec_PathType", PathSpec_PathType_name, PathSpec_PathType_value)
	proto.RegisterEnum("PathSpec_Options", PathSpec_Options_name, PathSpec_Options_value)
	proto.RegisterEnum("PathSpecTskFsAttrType", PathSpecTskFsAttrType_name, PathSpecTskFsAttrType_value)
	proto.RegisterEnum("StatEntry_RegistryType", StatEntry_RegistryType_name, StatEntry_RegistryType_value)
	proto.RegisterEnum("Certificate_Type", Certificate_Type_name, Certificate_Type_value)
	proto.RegisterEnum("NetworkAddress_Family", NetworkAddress_Family_name, NetworkAddress_Family_value)
	proto.RegisterEnum("FingerprintTuple_Type", FingerprintTuple_Type_name, FingerprintTuple_Type_value)
	proto.RegisterEnum("FingerprintTuple_HashType", FingerprintTuple_HashType_name, FingerprintTuple_HashType_value)
	proto.RegisterEnum("SignedBlob_HashType", SignedBlob_HashType_name, SignedBlob_HashType_value)
	proto.RegisterEnum("SignedBlob_SignatureType", SignedBlob_SignatureType_name, SignedBlob_SignatureType_value)
	proto.RegisterEnum("SymmetricCipher_Algorithm", SymmetricCipher_Algorithm_name, SymmetricCipher_Algorithm_value)
	proto.RegisterEnum("DriverInstallTemplate_RewriteMode", DriverInstallTemplate_RewriteMode_name, DriverInstallTemplate_RewriteMode_value)
	proto.RegisterEnum("GrepSpec_Mode", GrepSpec_Mode_name, GrepSpec_Mode_value)
	proto.RegisterEnum("ForemanClientRuleSet_MatchMode", ForemanClientRuleSet_MatchMode_name, ForemanClientRuleSet_MatchMode_value)
	proto.RegisterEnum("ForemanClientRule_Type", ForemanClientRule_Type_name, ForemanClientRule_Type_value)
	proto.RegisterEnum("ForemanLabelClientRule_MatchMode", ForemanLabelClientRule_MatchMode_name, ForemanLabelClientRule_MatchMode_value)
	proto.RegisterEnum("ForemanIntegerClientRule_Operator", ForemanIntegerClientRule_Operator_name, ForemanIntegerClientRule_Operator_value)
	proto.RegisterEnum("Iterator_State", Iterator_State_name, Iterator_State_value)
	proto.RegisterEnum("GlobalNotification_Type", GlobalNotification_Type_name, GlobalNotification_Type_value)
	proto.RegisterEnum("AuditEvent_Action", AuditEvent_Action_name, AuditEvent_Action_value)
	proto.RegisterEnum("CronJobRunStatus_Status", CronJobRunStatus_Status_name, CronJobRunStatus_Status_value)
	proto.RegisterEnum("MetricFieldDefinition_FieldType", MetricFieldDefinition_FieldType_name, MetricFieldDefinition_FieldType_value)
	proto.RegisterEnum("MetricMetadata_MetricType", MetricMetadata_MetricType_name, MetricMetadata_MetricType_value)
	proto.RegisterEnum("MetricMetadata_MetricUnits", MetricMetadata_MetricUnits_name, MetricMetadata_MetricUnits_value)
	proto.RegisterEnum("MetricMetadata_ValueType", MetricMetadata_ValueType_name, MetricMetadata_ValueType_value)
	proto.RegisterEnum("NSRLInformation_FileType", NSRLInformation_FileType_name, NSRLInformation_FileType_value)
}

func init() { proto.RegisterFile("jobs.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 14765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0xbd, 0x5b, 0x6c, 0x24, 0x59,
	0x96, 0x18, 0x56, 0x91, 0x4c, 0x32, 0x33, 0x4f, 0xf2, 0x91, 0x75, 0xab, 0xba, 0x8a, 0x55, 0xdd,
	0xd5, 0x1d, 0x9d, 0xfd, 0x62, 0xcd, 0x54, 0x47, 0xb1, 0x58, 0xcf, 0xe1, 0x4c, 0xcf, 0x74, 0x92,
	0x99, 0x24, 0xb3, 0x8b, 0x4c, 0xb2, 0x23, 0x93, 0xd5, 0x8f, 0xd9, 0x99, 0x98, 0x60, 0xc6, 0x4d,
	0x66, 0x4c, 0x45, 0x46, 0x64, 0x47, 0x44, 0x92, 0xcc, 0xc1, 0x02, 0xbb, 0x0b, 0x43, 0xd0, 0x0a,
	0xf0, 0x42, 0xab, 0x0f, 0xaf, 0x77, 0x61, 0x7b, 0x57, 0x80, 0x6d, 0xc8, 0x2b, 0xac, 0x01, 0xc3,
	0xb0, 0x0c, 0x0c, 0x20, 0x03, 0xb2, 0xbd, 0x0b, 0x1b, 0x5a, 0x59, 0x96, 0x05, 0x09, 0x96, 0xe5,
	0xe7, 0x5a, 0x80, 0x3e, 0x16, 0xb2, 0x2c, 0x1b, 0x10, 0xe0, 0x0f, 0x19, 0x36, 0xee, 0x39, 0xf7,
	0x46, 0x44, 0x26, 0xc9, 0x9e, 0xee, 0x19, 0x61, 0x01, 0xd5, 0x47, 0x31, 0xef, 0xeb, 0xdc, 0xf7,
	0xb9, 0xe7, 0x1d, 0x00, 0x3f, 0x0e, 0x8e, 0x22, 0x63, 0x18, 0x06, 0x71, 0x70, 0x7b, 0x31, 0xe2,
	0x03, 0xdb, 0x8f, 0xdd, 0xae, 0x4c, 0x5f, 0x7f, 0xe9, 0x07, 0xa7, 0x1e, 0x77, 0x8e, 0xb9, 0x75,
	0x64, 0x47, 0x9c, 0x72, 0xab, 0xff, 0x67, 0x0e, 0xca, 0x3b, 0x71, 0x3c, 0x34, 0xf9, 0x17, 0x23,
	0x1e, 0xc5, 0xec, 0x0d, 0x28, 0x87, 0xf6, 0xa9, 0xd5, 0xe7, 0xb6, 0xc3, 0xc3, 0x68, 0x59, 0xd3,
	0xb5, 0x95, 0x92, 0x09, 0xa1, 0x7d, 0xba, 0x43, 0x39, 0xec, 0x0e, 0xc0, 0x28, 0xe2, 0xa1, 0x65,
	0x1f, 0x73, 0x3f, 0x5e, 0xce, 0x61, 0x79, 0x49, 0xe4, 0xd4, 0x44, 0x06, 0x7b, 0x15, 0x4a, 0x51,
	0x30, 0x0a, 0xbb, 0xdc, 0x72, 0x87, 0xcb, 0x33, 0x58, 0x5a, 0xa4, 0x8c, 0xe6, 0x90, 0x55, 0x60,
	0x66, 0x14, 0x7a, 0xcb, 0x79, 0xcc, 0x16, 0x3f, 0xd9, 0x1d, 0xc8, 0x8b, 0xb6, 0xcb, 0xb3, 0x22,
	0x6b, 0xbd, 0x64, 0xfb, 0x81, 0x3f, 0x1e, 0x04, 0xa3, 0xc8, 0xc4, 0x6c, 0x66, 0x41, 0x29, 0x76,
	0x07, 0x3c, 0x8a, 0xed, 0xc1, 0x70, 0x79, 0x4e, 0xd7, 0x56, 0xf2, 0x1b, 0xb5, 0xff, 0xfd, 0x5f,
	0xfc, 0xa3, 0x3f, 0xd4, 0xbe, 0x0d, 0x65, 0xb3, 0xbe, 0x55, 0xb7, 0x63, 0x2e, 0xca, 0xd9, 0xbd,
	0x8e, 0xaa, 0xb5, 0xae, 0x8f, 0x7c, 0xf7, 0x8b, 0x11, 0xd7, 0x5d, 0x87, 0xfb, 0xb1, 0xdb, 0x73,
	0x79, 0xa8, 0xf7, 0x82, 0x50, 0x8f, 0xfb, 0x5c, 0x0f, 0x69, 0x8e, 0x66, 0x0a, 0x93, 0xbd, 0x0a,
	0x73, 0x03, 0x1e, 0xf7, 0x03, 0x67, 0xb9, 0x80, 0x23, 0x98, 0xd9, 0x6e, 0x74, 0x4c, 0x99, 0xc5,
	0x6e, 0x43, 0x31, 0xe4, 0x3d, 0x1e, 0x86, 0x3c, 0x5c, 0x2e, 0xd2, 0x54, 0x54, 0x9a, 0x3d, 0x83,
	0x7c, 0xe4, 0xfe, 0x84, 0x2f, 0x97, 0x70, 0x50, 0x6f, 0xe3, 0xa0, 0x5e, 0x67, 0xaf, 0xb5, 0xdd,
	0x9f, 0x70, 0x3d, 0xe8, 0x65, 0xbb, 0xd3, 0x5d, 0x5f, 0x3f, 0x1a, 0xc7, 0x3c, 0x32, 0xb1, 0x45,
	0xf5, 0x0f, 0xae, 0x02, 0x6c, 0x87, 0xe1, 0x1e, 0x8f, 0x22, 0xfb, 0x98, 0x33, 0x1f, 0x20, 0xe2,
	0x51, 0xe4, 0x06, 0xbe, 0xe5, 0x3a, 0xb4, 0xde, 0x1b, 0xfb, 0x08, 0xae, 0x09, 0x0b, 0x5b, 0x5e,
	0x70, 0xda, 0xa6, 0xd2, 0x66, 0x9d, 0x3d, 0xeb, 0xf4, 0xb9, 0x2e, 0x2b, 0xeb, 0xae, 0xa3, 0xfa,
	0xe9, 0x79, 0xc1, 0xa9, 0x1e, 0xf7, 0xed, 0x58, 0x8f, 0xfb, 0x6e, 0xa4, 0x0f, 0x08, 0xb0, 0x7e,
	0xc4, 0xbd, 0xc0, 0x3f, 0x8e, 0xf4, 0x38, 0x30, 0xcc, 0x92, 0x6c, 0xd5, 0x74, 0xd8, 0x08, 0x40,
	0x0e, 0x4c, 0xf4, 0x97, 0xc3, 0xe1, 0xbf, 0xc0, 0xfe, 0x0e, 0x58, 0x4b, 0x74, 0xa0, 0xda, 0xbb,
	0x91, 0x18, 0x79, 0xc8, 0xa3, 0x61, 0xe0, 0x47, 0x5c, 0x8f, 0x03, 0x02, 0xaf, 0x66, 0xe5, 0x8f,
	0x06, 0x47, 0x3c, 0xd4, 0x57, 0x64, 0x5a, 0x54, 0xee, 0x86, 0x7c, 0xc0, 0xfd, 0x58, 0xef, 0x85,
	0xc1, 0x40, 0x7f, 0x70, 0xd7, 0x30, 0x4b, 0xb2, 0xb0, 0xe9, 0xb0, 0x1f, 0x40, 0x59, 0x81, 0x12,
	0xfd, 0xce, 0x60, 0xbf, 0xdf, 0xc1, 0x7e, 0x9f, 0xb0, 0x47, 0xa6, 0x2c, 0x8a, 0x70, 0xaf, 0xb8,
	0xdd, 0xed, 0x27, 0xfd, 0xd8, 0x21, 0xd7, 0x6d, 0x2f, 0x0a, 0x64, 0x87, 0xdc, 0x91, 0xe0, 0x0d,
	0x13, 0x14, 0xc0, 0xa6, 0xc3, 0x7e, 0x43, 0x83, 0xbc, 0x6f, 0x0f, 0x38, 0x9d, 0xad, 0x8d, 0x31,
	0x02, 0x8e, 0xd8, 0x17, 0x1d, 0x31, 0x64, 0x37, 0xc2, 0x75, 0x12, 0xe5, 0x6a, 0xcd, 0xba, 0x9e,
	0x2b, 0x46, 0x6a, 0x77, 0x63, 0xb1, 0x96, 0xb8, 0x78, 0xa7, 0xae, 0xe7, 0xe9, 0x47, 0x5c, 0xe7,
	0x67, 0xbc, 0x3b, 0x8a, 0xb9, 0x63, 0xe8, 0xcd, 0x58, 0x34, 0x8d, 0x78, 0xac, 0x1f, 0x8d, 0xd3,
	0x95, 0xb6, 0x7d, 0x47, 0x64, 0xab, 0x6a, 0xaa, 0x8c, 0x20, 0x1a, 0x26, 0x0e, 0x83, 0x31, 0xc8,
	0xdb, 0xe1, 0x71, 0x84, 0xe7, 0x7a, 0xde, 0xc4, 0xdf, 0xec, 0x2d, 0x98, 0xb1, 0xc3, 0xe3, 0xe5,
	0xeb, 0xba, 0xb6, 0x52, 0x5e, 0xbb, 0x6a, 0x34, 0x06, 0x47, 0xdc, 0x71, 0xb8, 0x63, 0xd6, 0xb7,
	0x5e, 0xd8, 0xde, 0x88, 0x9b, 0xa2, 0x94, 0x79, 0x30, 0x47, 0xd7, 0x05, 0x8f, 0x7b, 0x69, 0xa3,
	0x83, 0x33, 0x69, 0xc1, 0x9c, 0x59, 0xdf, 0x3a, 0x34, 0x5b, 0xac, 0xbe, 0x49, 0x23, 0xc7, 0xc9,
	0x9c, 0xf6, 0x79, 0xc8, 0xb1, 0x77, 0xb5, 0x69, 0x5d, 0x91, 0x8d, 0x0b, 0xb4, 0xb2, 0xe5, 0x7a,
	0x1e, 0x77, 0xe8, 0xf4, 0xd1, 0xe8, 0xc3, 0xc0, 0x8f, 0xb9, 0xef, 0xdc, 0x35, 0x4c, 0xd9, 0x07,
	0x6b, 0x01, 0xd8, 0xa3, 0xb8, 0x6f, 0x45, 0xb1, 0x1d, 0x73, 0xbc, 0x02, 0x8b, 0x6b, 0xaf, 0x1b,
	0xe9, 0xe9, 0x34, 0x6a, 0xa3, 0xb8, 0x1f, 0x84, 0xee, 0x4f, 0x6c, 0xb1, 0x4e, 0x6d, 0x51, 0x6b,
	0x7d, 0xe9, 0xb0, 0x55, 0x3b, 0xec, 0xec, 0x34, 0x5a, 0x9d, 0xe6, 0x66, 0xad, 0xd3, 0xa8, 0x9b,
	0x25, 0x01, 0x02, 0xcb, 0xd8, 0xfb, 0x90, 0x8f, 0xc7, 0x43, 0x8e, 0xb7, 0x65, 0x71, 0xad, 0x92,
	0x85, 0xd4, 0x19, 0x0f, 0xf9, 0x7a, 0x61, 0xaf, 0xd1, 0x6e, 0xd7, 0xb6, 0x1b, 0x26, 0x56, 0x63,
	0xbf, 0xaf, 0x41, 0x71, 0x18, 0xba, 0x41, 0xe8, 0xc6, 0x63, 0xbc, 0x49, 0x8b, 0x6b, 0xd7, 0xb3,
	0x6d, 0x0e, 0x64, 0xd9, 0xfa, 0xd2, 0x5e, 0xa3, 0xde, 0x3c, 0xdc, 0xb3, 0x0e, 0xcc, 0xe6, 0xbe,
	0xd9, 0xec, 0x7c, 0xb6, 0xd1, 0xc3, 0x65, 0xf9, 0x11, 0xfb, 0xa1, 0x38, 0xb1, 0x0a, 0x04, 0x6d,
	0x6e, 0xe6, 0x0a, 0xbc, 0xaf, 0xdb, 0x9e, 0x17, 0x9c, 0x46, 0x7a, 0xdf, 0x3d, 0xee, 0xf3, 0x30,
	0xad, 0x28, 0x2b, 0x88, 0xcb, 0xa1, 0x7b, 0xdc, 0x1e, 0xd2, 0xe9, 0x96, 0x4b, 0x24, 0xc0, 0x7c,
	0x31, 0xe2, 0x23, 0x1e, 0x19, 0x66, 0x32, 0x3c, 0x16, 0xc2, 0x4c, 0x1c, 0x7b, 0xcb, 0xa0, 0x6b,
	0x2b, 0x0b, 0xeb, 0xb9, 0x07, 0xab, 0x1b, 0xbf, 0x84, 0x43, 0x78, 0xc1, 0x3a, 0x02, 0xf7, 0x20,
	0x20, 0xf7, 0x44, 0x74, 0x89, 0xa7, 0x57, 0x60, 0x18, 0xdd, 0x4e, 0x51, 0x80, 0xb8, 0x37, 0x71,
	0x68, 0xfb, 0xd1, 0xc0, 0x8d, 0xc5, 0xa1, 0xc1, 0x61, 0x3a, 0x5c, 0xdd, 0x98, 0x91, 0x1f, 0xbb,
	0x9e, 0xee, 0xc6, 0x3a, 0x3f, 0x1b, 0xba, 0xa1, 0xe8, 0x58, 0x74, 0xc6, 0x7e, 0x55, 0x83, 0x8a,
	0x00, 0xe1, 0x86, 0xdc, 0xea, 0xd9, 0x51, 0x3c, 0x0c, 0x3c, 0x6f, 0xb9, 0xac, 0x6b, 0x2b, 0xc5,
	0xf5, 0x7c, 0x1c, 0x8e, 0xb8, 0x42, 0x14, 0x6c, 0xbb, 0x29, 0x67, 0x2e, 0x8e, 0x7a, 0x38, 0xe2,
	0xf7, 0xb2, 0x87, 0x1c, 0x0f, 0x36, 0xf7, 0x63, 0x81, 0x09, 0xed, 0x28, 0xd6, 0x05, 0x14, 0x7d,
	0x10, 0x38, 0x5c, 0xb7, 0x7b, 0x31, 0xae, 0x4a, 0xd0, 0x15, 0xe8, 0xc1, 0x3f, 0x36, 0xcc, 0x25,
	0xd9, 0xdd, 0x96, 0xec, 0x8d, 0x75, 0xa1, 0xd4, 0x1d, 0x8e, 0x2c, 0xcf, 0x1d, 0xb8, 0xf1, 0xf2,
	0xbc, 0xae, 0xad, 0xe4, 0xd6, 0xf3, 0x0f, 0x9f, 0xac, 0xae, 0x6e, 0x7c, 0x88, 0x5d, 0xaf, 0xb3,
	0x67, 0x7b, 0xf6, 0x99, 0x3b, 0x18, 0x0d, 0x14, 0x42, 0x08, 0x7a, 0xfa, 0xe6, 0xc1, 0xa1, 0x1e,
	0xf1, 0x6e, 0xe0, 0x3b, 0xb8, 0xc0, 0x47, 0x5c, 0x1f, 0x45, 0xea, 0xa2, 0xb8, 0x91, 0xbc, 0x74,
	0x86, 0x59, 0xec, 0x0e, 0x47, 0xbb, 0x02, 0x2e, 0xdb, 0x83, 0xa2, 0xb8, 0x21, 0xe2, 0x4d, 0x59,
	0x5e, 0x40, 0xcc, 0xb0, 0x86, 0xd0, 0xef, 0x4d, 0x62, 0xf9, 0x3b, 0x62, 0xb3, 0xc5, 0xbe, 0xca,
	0x4b, 0x2c, 0xda, 0xe8, 0xa1, 0xd3, 0x3b, 0x11, 0xd7, 0xc7, 0x30, 0x0b, 0x22, 0x5d, 0x3b, 0xe6,
	0xac, 0x0a, 0x0b, 0x08, 0x2e, 0x74, 0x7a, 0x16, 0x22, 0x85, 0x45, 0x44, 0xde, 0x65, 0x91, 0x69,
	0x3a, 0xbd, 0x96, 0xb8, 0xa0, 0x37, 0xa1, 0x10, 0xdb, 0xd1, 0x4b, 0x81, 0x8b, 0x96, 0x44, 0x8f,
	0xe6, 0x9c, 0x48, 0x36, 0x1d, 0xf6, 0x1a, 0x14, 0xb1, 0x40, 0x6c, 0x76, 0x45, 0xd7, 0x56, 0x66,
	0xd7, 0xb5, 0xa7, 0x26, 0xd6, 0xed, 0xc4, 0x1e, 0xdb, 0x83, 0x59, 0x3c, 0x1a, 0xcb, 0x57, 0xf1,
	0x76, 0x3e, 0xc5, 0x61, 0x3e, 0x48, 0x6e, 0xe7, 0x7b, 0x88, 0xa1, 0xbb, 0x7d, 0xee, 0x8c, 0x3c,
	0x1e, 0xd2, 0x29, 0x9a, 0x3c, 0x92, 0x88, 0x55, 0x0d, 0x93, 0xa0, 0x30, 0x07, 0x66, 0x78, 0x6c,
	0x2f, 0x33, 0x9c, 0xb3, 0x89, 0xc0, 0x76, 0x27, 0xe7, 0xfc, 0x81, 0x80, 0x88, 0xa7, 0xe9, 0xb4,
	0xcf, 0xfd, 0x49, 0x58, 0x12, 0x63, 0x75, 0x03, 0x71, 0xd6, 0x4e, 0x6c, 0xd7, 0xb3, 0x8f, 0x3c,
	0x8e, 0x18, 0xd4, 0xe3, 0x36, 0xed, 0xa7, 0x00, 0x2f, 0x9e, 0x6c, 0xcf, 0x8e, 0x62, 0x4b, 0xe4,
	0xf2, 0xe5, 0x6b, 0xf4, 0x64, 0x8b, 0x9c, 0x5d, 0x91, 0xc1, 0xfe, 0x5e, 0x0e, 0xae, 0xf9, 0x3c,
	0x3e, 0x0d, 0xc2, 0x97, 0x16, 0x3e, 0x54, 0x72, 0xb7, 0x5f, 0x11, 0xa3, 0x5a, 0x2f, 0x3f, 0x58,
	0x7d, 0xfa, 0xf0, 0xe9, 0xa3, 0x07, 0xcf, 0xd6, 0x1e, 0xad, 0x6e, 0xfc, 0x56, 0x0e, 0xc7, 0xf8,
	0x17, 0x73, 0xec, 0x5f, 0xcf, 0x9d, 0xdf, 0x77, 0x09, 0x84, 0x5e, 0x3b, 0xb9, 0xf3, 0x11, 0xf7,
	0xe3, 0x7b, 0xfa, 0x83, 0xd5, 0x6d, 0xdd, 0xe1, 0x3d, 0x7b, 0xe4, 0xc5, 0x86, 0x5e, 0x13, 0xa3,
	0xc6, 0x2a, 0xdd, 0xbe, 0x1d, 0x1e, 0x73, 0x47, 0xb7, 0x8f, 0x6d, 0xd7, 0x8f, 0xe2, 0x14, 0xc7,
	0xaa, 0x47, 0xae, 0x59, 0xd7, 0xbb, 0xc1, 0xc8, 0x8f, 0xf5, 0x38, 0x38, 0xb5, 0x43, 0x87, 0xf0,
	0x38, 0x8e, 0x4e, 0x3f, 0x1a, 0xc5, 0x7a, 0xe0, 0x7b, 0x63, 0xdd, 0x19, 0x85, 0xae, 0x7f, 0xac,
	0x77, 0xc4, 0xed, 0xea, 0xf1, 0x70, 0x63, 0xd4, 0xeb, 0xf1, 0x50, 0xe1, 0x7c, 0xaa, 0xcb, 0xfd,
	0x5e, 0x10, 0x76, 0x05, 0x4a, 0xef, 0xd0, 0xfa, 0xd9, 0x7e, 0xa4, 0x9f, 0x0a, 0x6c, 0xe9, 0xeb,
	0x47, 0x5e, 0xd0, 0x7d, 0xd9, 0x73, 0x3d, 0xae, 0xc7, 0x12, 0x42, 0x84, 0xb0, 0xa3, 0x58, 0xac,
	0x6e, 0x37, 0x18, 0x0c, 0x46, 0xbe, 0xdb, 0xb5, 0x63, 0x75, 0x5b, 0x52, 0xa8, 0x78, 0xa9, 0x6d,
	0xb1, 0xd9, 0x86, 0x79, 0x55, 0xce, 0x7d, 0x43, 0xcc, 0x0b, 0x0f, 0x75, 0xf5, 0x00, 0xd8, 0x79,
	0xec, 0xc9, 0xae, 0xc1, 0x34, 0xfe, 0xac, 0x5c, 0x61, 0x57, 0x61, 0x61, 0x32, 0x4b, 0x63, 0x0c,
	0x16, 0xeb, 0x8d, 0xf6, 0x67, 0xad, 0xcd, 0x1d, 0x73, 0xbf, 0xd5, 0xfc, 0xbc, 0x51, 0xaf, 0xe4,
	0xaa, 0xef, 0x43, 0x5e, 0x60, 0x51, 0x56, 0x06, 0x85, 0x47, 0x2b, 0x57, 0x18, 0xc0, 0x5c, 0xbb,
	0x53, 0xeb, 0x1c, 0xb6, 0x2b, 0x1a, 0x9b, 0x87, 0x62, 0xb3, 0xd3, 0x30, 0x6b, 0x9d, 0x7d, 0xb3,
	0x92, 0xab, 0xd6, 0xa1, 0xa8, 0x10, 0x28, 0xab, 0xc0, 0xfc, 0xee, 0xfe, 0x27, 0x09, 0xfe, 0xac,
	0x5c, 0x11, 0x03, 0x99, 0x42, 0xaa, 0x15, 0x4d, 0x0c, 0x64, 0xa7, 0xb9, 0xbd, 0x93, 0x66, 0xe5,
	0xaa, 0xf7, 0xa0, 0x2c, 0xd1, 0xf1, 0xae, 0x1b, 0xc5, 0xec, 0x0e, 0xcc, 0xfc, 0x38, 0x38, 0x5a,
	0xd6, 0xf4, 0x99, 0x95, 0xf2, 0x5a, 0x39, 0x83, 0xac, 0x4d, 0x91, 0x5f, 0xfd, 0xb5, 0x19, 0xb8,
	0xda, 0x76, 0x8f, 0x7d, 0xee, 0x64, 0x1b, 0xbd, 0x09, 0xf3, 0xf2, 0xcc, 0x5a, 0x9e, 0x1b, 0xc5,
	0x48, 0xe5, 0xcc, 0x9b, 0xe5, 0x41, 0xa6, 0xca, 0x41, 0xf2, 0xee, 0x21, 0xd1, 0xb8, 0xf1, 0x0c,
	0x0f, 0xda, 0x5a, 0x72, 0xb3, 0x56, 0xf0, 0x66, 0x61, 0x8d, 0xe4, 0xd9, 0xcb, 0x5c, 0x85, 0xe4,
	0xdd, 0x4b, 0xdf, 0x36, 0x13, 0xca, 0xdd, 0x60, 0x30, 0x0c, 0xe9, 0x28, 0x21, 0x61, 0xb0, 0xb8,
	0x56, 0x35, 0xce, 0x8d, 0xce, 0xd8, 0x4c, 0x6b, 0xe1, 0x23, 0x35, 0x7f, 0xd8, 0xda, 0xdc, 0xdf,
	0x3b, 0x30, 0x1b, 0xed, 0x76, 0xa3, 0x6e, 0x66, 0x81, 0x30, 0xef, 0x3c, 0x3d, 0xda, 0xc2, 0x81,
	0xee, 0x4c, 0xde, 0xda, 0x6f, 0x75, 0x52, 0xf4, 0x1b, 0x71, 0x81, 0x07, 0xdd, 0x38, 0xd2, 0x93,
	0xa6, 0xe2, 0x6e, 0x0c, 0x43, 0x7e, 0x22, 0x8a, 0x43, 0x3e, 0xf4, 0xec, 0xb1, 0x6e, 0xc7, 0xb1,
	0xdd, 0x7d, 0x19, 0x19, 0x19, 0xe2, 0xb4, 0xfa, 0x18, 0x96, 0xa6, 0xc6, 0x26, 0xf6, 0x31, 0x3b,
	0xba, 0xca, 0x15, 0x91, 0xf3, 0xb9, 0xca, 0x68, 0xee, 0xb7, 0x2a, 0x5a, 0xf5, 0x1f, 0x6b, 0x50,
	0xd9, 0x74, 0x87, 0x7d, 0x1e, 0x1e, 0x84, 0xc1, 0x90, 0x87, 0xb1, 0xcb, 0x23, 0x41, 0x90, 0x20,
	0x2a, 0xd4, 0xf4, 0xdc, 0x4a, 0x49, 0x12, 0x29, 0x15, 0x98, 0x79, 0xc9, 0xc7, 0xcb, 0x39, 0x3d,
	0xb7, 0x32, 0x6f, 0x8a, 0x9f, 0x82, 0xfa, 0x1f, 0xf0, 0xd8, 0x76, 0xec, 0xd8, 0xb6, 0xdc, 0x13,
	0xdc, 0x8a, 0x79, 0x13, 0x54, 0x56, 0xf3, 0x84, 0xdd, 0x82, 0x62, 0x7f, 0x60, 0x77, 0x2d, 0xd1,
	0x8e, 0x68, 0x9b, 0x82, 0x48, 0x3f, 0xe7, 0x63, 0x56, 0x87, 0x12, 0x16, 0x21, 0x01, 0x30, 0x87,
	0xab, 0x7d, 0xdb, 0x98, 0x1e, 0x87, 0xb1, 0xb3, 0x57, 0xdb, 0xc4, 0x55, 0x2e, 0xb7, 0x9b, 0x7b,
	0x07, 0xbb, 0x0d, 0x4b, 0x64, 0x98, 0x08, 0x54, 0x64, 0x57, 0xbf, 0x01, 0x45, 0x55, 0x85, 0x2d,
	0x41, 0xb6, 0x52, 0xe5, 0x0a, 0x5b, 0x80, 0xd2, 0xd6, 0xe1, 0xee, 0x2e, 0x25, 0xb5, 0xea, 0xbf,
	0xa9, 0xc1, 0x22, 0x75, 0xb0, 0x27, 0x47, 0xc8, 0x8e, 0x93, 0x63, 0x34, 0x49, 0x49, 0xab, 0x63,
	0xf4, 0x3d, 0xdc, 0x98, 0x60, 0x30, 0x08, 0x7c, 0x22, 0xa1, 0xf0, 0x14, 0x75, 0x11, 0x88, 0x1e,
	0xf5, 0x83, 0x91, 0xe7, 0x24, 0xef, 0x55, 0x1c, 0x4c, 0x5c, 0xff, 0x53, 0x37, 0xee, 0xa7, 0xa7,
	0xeb, 0x35, 0x28, 0x45, 0xee, 0xb1, 0x6f, 0xc7, 0xa3, 0x90, 0x23, 0x15, 0x3d, 0x6f, 0xa6, 0x19,
	0xd5, 0xff, 0x66, 0x06, 0xae, 0x11, 0xa1, 0xb6, 0x99, 0x40, 0x10, 0xe7, 0xe7, 0x35, 0x28, 0x71,
	0xbf, 0x1b, 0x8e, 0x87, 0x31, 0x77, 0xe4, 0x2d, 0x48, 0x33, 0xd8, 0x5d, 0xa8, 0x24, 0x09, 0x8b,
	0xc6, 0x24, 0x41, 0x2f, 0x25, 0xf9, 0x34, 0x5f, 0xb6, 0x0e, 0xb7, 0xa6, 0xab, 0x5a, 0x6a, 0x9b,
	0x90, 0x92, 0x9a, 0x37, 0x6f, 0x4e, 0xb5, 0x49, 0xd6, 0xe8, 0x55, 0x28, 0x0d, 0xed, 0xee, 0x4b,
	0x1e, 0x8b, 0x2d, 0x2e, 0x62, 0xdd, 0x22, 0x65, 0x34, 0x4f, 0xd8, 0x7d, 0x98, 0x0f, 0x42, 0xf7,
	0xd8, 0x92, 0x94, 0x0b, 0x1e, 0x81, 0xf2, 0xda, 0xbc, 0x91, 0xe1, 0x11, 0xcd, 0xb2, 0xa8, 0xa1,
	0x18, 0x46, 0x1d, 0x00, 0xdf, 0x32, 0x0b, 0xd9, 0xa1, 0x3c, 0x92, 0x47, 0xda, 0xaa, 0x59, 0xc2,
	0x4c, 0xc1, 0x0e, 0xb1, 0xa7, 0x30, 0x27, 0xe8, 0xcb, 0x11, 0x51, 0xc3, 0x8b, 0x6b, 0xaf, 0x1a,
	0x17, 0x2c, 0x8d, 0xd1, 0xc6, 0x2a, 0xeb, 0xb9, 0xfd, 0xe7, 0xa6, 0xac, 0x2e, 0x4e, 0xa3, 0x3d,
	0x74, 0xad, 0x13, 0x1e, 0xe2, 0x0d, 0x16, 0x67, 0x6a, 0xc1, 0x04, 0x7b, 0xe8, 0xbe, 0xa0, 0x1c,
	0x71, 0xa8, 0xc5, 0xc1, 0x41, 0xc2, 0x75, 0xde, 0xc4, 0xdf, 0x62, 0x76, 0xbd, 0x91, 0xe7, 0x59,
	0x58, 0x00, 0x34, 0x3b, 0x91, 0xb1, 0x33, 0xb0, 0xbb, 0xd5, 0x27, 0x30, 0x47, 0xfd, 0xb0, 0x02,
	0xe4, 0xf6, 0x9f, 0x57, 0xfe, 0x6b, 0x8d, 0x55, 0xa0, 0xbc, 0x51, 0xab, 0x5b, 0x66, 0xe3, 0xe3,
	0xc3, 0x46, 0xbb, 0x53, 0xf9, 0xcd, 0x19, 0x76, 0x15, 0xe6, 0x37, 0x9b, 0x07, 0x3b, 0x0d, 0xd3,
	0x6a, 0x98, 0xe6, 0xbe, 0x59, 0xf9, 0xad, 0x99, 0xea, 0xff, 0x33, 0x03, 0xa5, 0xed, 0x30, 0x94,
	0x6d, 0x1f, 0x27, 0x13, 0xd2, 0x70, 0x42, 0xb7, 0x8c, 0xa4, 0xcc, 0x30, 0x79, 0x3c, 0x0a, 0x7d,
	0xee, 0x5c, 0x30, 0x9d, 0x77, 0x60, 0x81, 0x87, 0x61, 0x20, 0x36, 0x0a, 0x91, 0x0f, 0x31, 0xcf,
	0xeb, 0x57, 0xcc, 0x79, 0xcc, 0x56, 0x0c, 0xe1, 0xeb, 0x50, 0x3a, 0xb2, 0xbb, 0x2f, 0xe3, 0xd0,
	0x56, 0xc8, 0x70, 0xfd, 0x8a, 0x99, 0x66, 0xb1, 0xfb, 0xb0, 0x20, 0x28, 0x32, 0x81, 0x26, 0x2c,
	0x71, 0x4e, 0x71, 0xcd, 0x05, 0x2e, 0xde, 0x1c, 0x8e, 0xda, 0x44, 0x75, 0x99, 0xe5, 0xee, 0x70,
	0x24, 0xc8, 0xd2, 0xc3, 0x88, 0x3b, 0xcc, 0x84, 0x4a, 0xb7, 0xef, 0x7a, 0x8e, 0x95, 0xe1, 0x33,
	0x91, 0xdf, 0xde, 0x58, 0xc1, 0xdb, 0x51, 0x85, 0x52, 0xca, 0x63, 0xbe, 0x22, 0x2e, 0xc8, 0xa1,
	0xd9, 0x12, 0xef, 0xb9, 0xad, 0x47, 0xa3, 0x23, 0xf1, 0x1e, 0x1b, 0xe6, 0x22, 0x42, 0x68, 0x27,
	0x5c, 0xe4, 0x3d, 0x60, 0x93, 0x24, 0x83, 0x78, 0xe7, 0x09, 0x23, 0x9a, 0x95, 0xec, 0x5b, 0xd8,
	0xe6, 0x3e, 0xe2, 0x7f, 0xdf, 0xf6, 0xfd, 0xb1, 0x25, 0x97, 0xad, 0x40, 0xf4, 0x18, 0xe6, 0xd1,
	0x42, 0x55, 0x7f, 0x4b, 0x83, 0xc5, 0xc9, 0xb5, 0x63, 0x73, 0xb8, 0x45, 0x57, 0xc4, 0x73, 0xd7,
	0xdc, 0xa7, 0xad, 0xd0, 0xd8, 0xab, 0x70, 0xd3, 0x6c, 0x74, 0xcc, 0x5a, 0xab, 0xbd, 0xd7, 0x44,
	0x84, 0x67, 0xd5, 0x1b, 0x9d, 0xc6, 0xa6, 0x78, 0x34, 0x73, 0xe2, 0xf9, 0xda, 0xdc, 0x6d, 0x36,
	0x5a, 0x1d, 0xeb, 0x79, 0x73, 0x77, 0xb7, 0x51, 0xaf, 0xcc, 0xb0, 0xdb, 0x70, 0xa3, 0xd5, 0xe8,
	0x7c, 0xb2, 0x6f, 0x3e, 0xb7, 0x76, 0x9b, 0x7b, 0xcd, 0x8e, 0xd5, 0xf8, 0x74, 0xb3, 0xd1, 0xa8,
	0x37, 0xea, 0x95, 0xbc, 0x40, 0x9d, 0xa2, 0xa0, 0x61, 0x5a, 0xed, 0xce, 0xe1, 0xe6, 0xf3, 0x4a,
	0x49, 0x00, 0xd8, 0x6e, 0xb4, 0x1a, 0x66, 0x73, 0x53, 0xee, 0x3d, 0x54, 0xff, 0x6e, 0x1e, 0x96,
	0xb6, 0xc3, 0xb0, 0x15, 0xc4, 0x6e, 0x4f, 0x5d, 0xe3, 0xd5, 0x0b, 0x78, 0xf6, 0xab, 0xb8, 0x96,
	0xe5, 0xcc, 0x5a, 0x66, 0xb9, 0xee, 0x5a, 0x86, 0xd1, 0xc9, 0x7d, 0x0d, 0x46, 0x27, 0xc3, 0x80,
	0x38, 0x30, 0xdf, 0x73, 0xc3, 0x28, 0xb6, 0xf0, 0x66, 0x29, 0x16, 0xfa, 0x12, 0x71, 0x88, 0x20,
	0xa4, 0x44, 0x65, 0x22, 0x1d, 0x11, 0xc9, 0xf9, 0x99, 0x19, 0xe8, 0xa7, 0x76, 0x44, 0xd4, 0xa9,
	0x63, 0x98, 0x65, 0xac, 0xf9, 0x31, 0xa6, 0xd8, 0xaf, 0x6b, 0x50, 0x46, 0x62, 0x51, 0x6e, 0x55,
	0x1e, 0x7b, 0x39, 0xc6, 0x5e, 0x6c, 0x66, 0x65, 0xf8, 0x0c, 0x41, 0x67, 0xda, 0x3a, 0x55, 0xd3,
	0x8f, 0x6c, 0x81, 0x31, 0xe9, 0x45, 0x5b, 0x11, 0x47, 0x26, 0xba, 0x7b, 0x6f, 0x42, 0x08, 0x92,
	0x52, 0x89, 0x48, 0x40, 0x09, 0x3e, 0x44, 0x36, 0x3d, 0x15, 0x95, 0xba, 0xdc, 0x3d, 0x11, 0x63,
	0x41, 0x42, 0x55, 0xee, 0xff, 0x19, 0x94, 0x5d, 0xdf, 0x1a, 0x86, 0xc1, 0xb1, 0x78, 0x01, 0xf1,
	0xc8, 0x16, 0xd7, 0x67, 0x7b, 0xb6, 0x17, 0xf1, 0x8d, 0x03, 0x1c, 0xd0, 0x47, 0x6c, 0x87, 0x18,
	0x7c, 0xdf, 0x41, 0x1c, 0x1d, 0x29, 0x31, 0x88, 0x24, 0x23, 0x05, 0x6a, 0x1f, 0x85, 0x21, 0xf7,
	0x63, 0x6f, 0xac, 0x1f, 0x71, 0x41, 0x26, 0x4a, 0x66, 0x27, 0xe5, 0xdb, 0xc5, 0x49, 0xe5, 0xa1,
	0x61, 0x82, 0xeb, 0x1f, 0xc8, 0xae, 0xbe, 0x86, 0xd8, 0x49, 0x11, 0xe7, 0x28, 0x5f, 0x98, 0x5e,
	0x60, 0xc5, 0x08, 0x38, 0x62, 0xad, 0x26, 0x5e, 0xf6, 0x7f, 0x9c, 0x83, 0xb2, 0x44, 0x82, 0xa1,
	0x1d, 0xf5, 0x99, 0x01, 0x25, 0xa2, 0x16, 0x2e, 0x38, 0x4f, 0x54, 0xef, 0xd0, 0x6c, 0x99, 0x45,
	0xaa, 0xd3, 0x74, 0xa6, 0x0e, 0x60, 0xee, 0x2b, 0x1c, 0xc0, 0x87, 0x50, 0x56, 0x3d, 0xf8, 0xbd,
	0x40, 0xa2, 0x75, 0x26, 0x31, 0x71, 0x53, 0xd0, 0xc7, 0x03, 0x1c, 0xb8, 0x09, 0xdd, 0x24, 0x8b,
	0x3d, 0xcf, 0xae, 0x03, 0x9d, 0x84, 0xf7, 0xb1, 0x97, 0xf7, 0x26, 0xd7, 0x61, 0xf9, 0x13, 0xe2,
	0x4d, 0x12, 0x9a, 0xa7, 0x2b, 0x66, 0x25, 0xf6, 0x33, 0x23, 0x6a, 0x5b, 0x05, 0xc0, 0x6c, 0x22,
	0x10, 0x66, 0x2f, 0x1d, 0x33, 0x56, 0xc2, 0xf7, 0xff, 0x2d, 0x58, 0xa0, 0x16, 0x0a, 0x61, 0xa2,
	0x48, 0xc4, 0x9c, 0xc7, 0x4c, 0x85, 0x2e, 0x5f, 0xcb, 0xa2, 0x4b, 0x42, 0x2c, 0x69, 0x46, 0xf5,
	0x7f, 0xd0, 0xa0, 0xb2, 0x33, 0xf2, 0xe3, 0x5f, 0xf0, 0xfa, 0x4e, 0xec, 0x4f, 0xee, 0xab, 0xec,
	0x8f, 0x7a, 0x21, 0x66, 0xf0, 0xb2, 0x2f, 0x1b, 0xd3, 0x83, 0x90, 0xef, 0x9d, 0x7a, 0x1c, 0xaa,
	0x0f, 0x92, 0x97, 0xa9, 0x0c, 0x85, 0xc3, 0xd6, 0xf3, 0xd6, 0xfe, 0x27, 0xad, 0xca, 0x15, 0x89,
	0x03, 0x35, 0x56, 0x82, 0x59, 0x42, 0x48, 0x39, 0x56, 0x80, 0x99, 0x8d, 0x5a, 0xbd, 0x32, 0x53,
	0xfd, 0xa7, 0x39, 0xb8, 0x21, 0xc0, 0x9a, 0x3c, 0x1a, 0x79, 0x93, 0x33, 0xfc, 0x65, 0x78, 0x25,
	0xc4, 0x5c, 0xab, 0x1b, 0x78, 0x1e, 0x47, 0x86, 0xdb, 0x1a, 0x85, 0xbe, 0x9c, 0xec, 0x0e, 0x8e,
	0x7d, 0x23, 0xa1, 0x8a, 0x9e, 0x65, 0x90, 0x3e, 0x5d, 0x5a, 0xd1, 0x56, 0x4f, 0xdb, 0xea, 0xdd,
	0xc0, 0x8f, 0x6d, 0xd7, 0x17, 0x37, 0x48, 0x4a, 0x01, 0x45, 0x0d, 0xc3, 0xbc, 0x46, 0x3f, 0x36,
	0x93, 0x9a, 0x87, 0xa1, 0xcf, 0x46, 0xd9, 0x63, 0x43, 0x12, 0xc6, 0x4f, 0xb0, 0xc7, 0x8f, 0x27,
	0x8f, 0xcd, 0x86, 0xba, 0x3e, 0x44, 0x14, 0x4b, 0x89, 0xed, 0x98, 0x3a, 0x49, 0x46, 0x21, 0xe8,
	0x2e, 0xd7, 0xbf, 0x78, 0x5c, 0x13, 0x07, 0xcc, 0x82, 0xb9, 0x68, 0xd4, 0xeb, 0xb9, 0x67, 0x12,
	0x35, 0x6e, 0x63, 0x9f, 0x35, 0xa2, 0xf9, 0xa8, 0xe4, 0xe7, 0xeb, 0x43, 0x82, 0xad, 0xfe, 0x1f,
	0x1a, 0x54, 0xb6, 0xbc, 0xe0, 0xf4, 0x17, 0x3c, 0x4c, 0x82, 0x42, 0xf1, 0x82, 0x53, 0x12, 0x4d,
	0x90, 0x00, 0xbd, 0x28, 0x32, 0x50, 0x2e, 0x31, 0x71, 0xd2, 0x66, 0xbe, 0xce, 0x49, 0xcb, 0xcb,
	0x93, 0x36, 0x3d, 0xc2, 0xe9, 0x93, 0xb6, 0xf2, 0x55, 0x4f, 0x5a, 0xf5, 0x7f, 0xd6, 0xe0, 0xea,
	0x39, 0x04, 0x21, 0xa8, 0x32, 0x39, 0x42, 0xc9, 0x50, 0xa0, 0x86, 0x80, 0xb2, 0x70, 0x0a, 0xef,
	0xc0, 0xa2, 0xac, 0xa0, 0x28, 0xb7, 0x1c, 0x52, 0x6e, 0x0b, 0x94, 0xab, 0x88, 0x37, 0x94, 0xae,
	0x9f, 0xb8, 0x58, 0x01, 0x37, 0xcc, 0x4c, 0xd2, 0xec, 0x0e, 0xc0, 0xd1, 0x48, 0x90, 0x2c, 0x62,
	0x77, 0xa5, 0xbe, 0xa0, 0x84, 0x39, 0x82, 0xaa, 0x61, 0xef, 0x03, 0x93, 0x3d, 0x38, 0x3c, 0xea,
	0x86, 0xee, 0x50, 0x0c, 0x8c, 0x50, 0x8a, 0x79, 0x95, 0x4a, 0xea, 0x69, 0x01, 0xbb, 0x01, 0x73,
	0x9e, 0x7d, 0xc4, 0xbd, 0x68, 0x79, 0x4e, 0x9f, 0x59, 0x29, 0x99, 0x32, 0x55, 0xfd, 0x63, 0x0d,
	0xf2, 0x1d, 0x3b, 0x7a, 0xc9, 0x16, 0x21, 0x27, 0xf7, 0x2e, 0x6f, 0xe6, 0x5c, 0x87, 0x5d, 0x87,
	0x59, 0x94, 0x29, 0x49, 0xea, 0x9b, 0x12, 0xec, 0x1a, 0x49, 0x00, 0x67, 0x48, 0x28, 0xf4, 0x98,
	0x44, 0x74, 0x15, 0x92, 0xe0, 0x20, 0x72, 0x24, 0x69, 0xcb, 0x75, 0x25, 0x22, 0xa2, 0xf1, 0x48,
	0x49, 0x4f, 0x96, 0x00, 0x98, 0xfb, 0xf9, 0x08, 0x80, 0x49, 0x31, 0x4e, 0x61, 0x4a, 0x8c, 0x53,
	0xfd, 0x6f, 0x67, 0xa0, 0x58, 0xb7, 0x63, 0x7b, 0xc3, 0x0b, 0x8e, 0xd8, 0x32, 0x14, 0x5c, 0x3f,
	0xe6, 0xc7, 0x3c, 0xc4, 0x69, 0xcd, 0x98, 0x2a, 0x29, 0x68, 0x66, 0x64, 0x12, 0x68, 0x6a, 0xf8,
	0x5b, 0x2c, 0x50, 0x14, 0x87, 0xae, 0x7f, 0x2c, 0x35, 0x36, 0x32, 0x25, 0x7a, 0x44, 0x2d, 0x91,
	0x95, 0x8a, 0xd6, 0xcd, 0x12, 0xe6, 0xb4, 0xa4, 0x90, 0xdb, 0x0f, 0x7c, 0x35, 0x51, 0xfc, 0x2d,
	0x3a, 0x3e, 0x0a, 0x02, 0x8f, 0xdb, 0x44, 0xaf, 0x17, 0x4d, 0x95, 0x64, 0xaf, 0x43, 0x1e, 0x99,
	0xff, 0x22, 0x3e, 0x3d, 0x60, 0x88, 0x71, 0xd6, 0xc2, 0xd0, 0x1e, 0x9b, 0x98, 0xcf, 0x6e, 0x41,
	0xde, 0x71, 0xbb, 0x31, 0x72, 0x2f, 0xe5, 0xb5, 0x59, 0xa3, 0xee, 0x76, 0x63, 0x13, 0xb3, 0xd8,
	0x0f, 0xa0, 0x14, 0x3a, 0x3d, 0x8b, 0xf6, 0x04, 0x2e, 0x91, 0x9f, 0xab, 0xa7, 0x89, 0xbd, 0xd3,
	0x8e, 0x83, 0x90, 0xeb, 0xb6, 0xaf, 0x73, 0x59, 0x45, 0xb7, 0xc3, 0x23, 0x37, 0x0e, 0xed, 0x70,
	0xac, 0xab, 0xda, 0x86, 0x59, 0x0c, 0x9d, 0x1e, 0xfe, 0x14, 0x3b, 0xd6, 0xf3, 0x02, 0x3b, 0x46,
	0xd1, 0x6a, 0xce, 0xa4, 0x04, 0x6b, 0x4e, 0xca, 0x0f, 0x0a, 0x92, 0xd4, 0x57, 0x4b, 0xfc, 0x35,
	0xc4, 0x06, 0x3f, 0x2f, 0x23, 0xbf, 0x0a, 0xa5, 0x64, 0x91, 0xd8, 0x5b, 0x50, 0xe8, 0xa2, 0xfc,
	0x3e, 0x96, 0xc2, 0x97, 0x52, 0x32, 0x14, 0x53, 0x95, 0x54, 0x9f, 0xa1, 0xc8, 0xc7, 0x8f, 0xdb,
	0x71, 0xc8, 0x96, 0x61, 0xd6, 0xe3, 0x27, 0xdc, 0xc3, 0x03, 0x30, 0xbb, 0x9e, 0x7b, 0xb0, 0x6a,
	0x52, 0xc6, 0xc4, 0x11, 0x28, 0xd1, 0x11, 0xa8, 0xfe, 0x73, 0xc1, 0x4b, 0x07, 0xc3, 0xf1, 0x81,
	0x1d, 0xf7, 0x3b, 0xc1, 0x96, 0xeb, 0x71, 0x76, 0x0b, 0xe6, 0x82, 0x5e, 0x2f, 0xe2, 0x24, 0xaf,
	0xc9, 0x0b, 0xae, 0x4e, 0x66, 0x88, 0x22, 0x8f, 0xfb, 0xc7, 0x71, 0x9f, 0xd0, 0x3b, 0x16, 0x51,
	0x06, 0x7b, 0x1b, 0x8a, 0x51, 0xd8, 0xb5, 0x86, 0x76, 0xdc, 0x97, 0x54, 0x46, 0xc9, 0x10, 0x40,
	0xdb, 0x43, 0xde, 0x35, 0x0b, 0x51, 0xd8, 0x15, 0x09, 0x76, 0x0b, 0x8a, 0x0e, 0x8f, 0x62, 0xcb,
	0x71, 0x43, 0x79, 0xae, 0x0a, 0x22, 0x5d, 0x77, 0x43, 0xf6, 0x2e, 0x94, 0xb0, 0x08, 0x21, 0xcc,
	0x4e, 0x43, 0xc0, 0x66, 0x08, 0xe2, 0x1d, 0x28, 0x1f, 0xff, 0xc4, 0x1d, 0x5a, 0xc1, 0x28, 0x1e,
	0x8e, 0x88, 0xf7, 0x90, 0x62, 0x71, 0x13, 0x44, 0xc1, 0x3e, 0xe6, 0xb3, 0x3b, 0x50, 0xf4, 0xdc,
	0x1e, 0x3e, 0x38, 0xb8, 0x87, 0x39, 0x31, 0xd8, 0x24, 0xab, 0xfa, 0xbb, 0x1a, 0x2c, 0x91, 0xc8,
	0xd0, 0xe4, 0x3d, 0x1e, 0x72, 0xbf, 0xfb, 0xf3, 0x4e, 0xfc, 0x36, 0x14, 0xbb, 0xb6, 0xe7, 0x09,
	0xda, 0x43, 0x29, 0x3e, 0x55, 0x3a, 0x59, 0xf1, 0x7c, 0xe6, 0xd2, 0xbd, 0x03, 0x45, 0x31, 0xc5,
	0x68, 0xc8, 0xbb, 0x38, 0xf8, 0xc9, 0x69, 0xaa, 0xa2, 0xea, 0x3f, 0xc8, 0xc3, 0xbc, 0xe4, 0xb5,
	0x49, 0x82, 0xa8, 0x90, 0x55, 0x6e, 0x65, 0x01, 0x91, 0xd5, 0x35, 0x98, 0x8d, 0xa3, 0x44, 0x97,
	0x67, 0xe6, 0xe3, 0xa8, 0xe9, 0x88, 0x9b, 0xeb, 0xf3, 0xb3, 0x58, 0x2a, 0x76, 0x68, 0x38, 0x25,
	0x91, 0x43, 0x30, 0xaa, 0x13, 0xaf, 0x86, 0xb8, 0x8d, 0x09, 0x07, 0x9b, 0xb0, 0xab, 0x5d, 0x39,
	0xe6, 0xd9, 0xcc, 0x7d, 0x54, 0x94, 0x03, 0xfb, 0x10, 0xe9, 0xee, 0xae, 0x9d, 0x50, 0x06, 0xba,
	0xed, 0x8f, 0x75, 0x51, 0x5f, 0xd0, 0xf3, 0xa7, 0x36, 0x8a, 0x6c, 0x75, 0x3b, 0x8a, 0x82, 0xae,
	0xab, 0x84, 0x27, 0x59, 0x7e, 0xc0, 0x90, 0x8b, 0xb0, 0x02, 0x8b, 0x89, 0x5a, 0x10, 0x25, 0xbd,
	0xc4, 0xe5, 0x8b, 0x75, 0x5d, 0x50, 0x05, 0x9b, 0x22, 0x9f, 0xad, 0x02, 0x93, 0x0a, 0x14, 0x7a,
	0x6c, 0xa9, 0x76, 0x41, 0xd5, 0xbe, 0x9a, 0x2d, 0xa4, 0x16, 0xbf, 0xae, 0x65, 0xdf, 0x52, 0x54,
	0xe0, 0x6e, 0xbc, 0xc4, 0xf1, 0xf3, 0xcc, 0x5b, 0xca, 0x3e, 0xcd, 0xc8, 0xea, 0x5c, 0x27, 0xa3,
	0x53, 0x53, 0xac, 0x8b, 0x20, 0xe5, 0xfb, 0xdc, 0x76, 0x04, 0xcd, 0xf0, 0xbe, 0x98, 0x1e, 0x8a,
	0x9d, 0x25, 0xcf, 0x12, 0xa6, 0x9a, 0xcb, 0x30, 0x18, 0x48, 0x71, 0x92, 0x54, 0x05, 0xa6, 0xaf,
	0xf4, 0x60, 0x82, 0x48, 0x28, 0xe1, 0x50, 0x94, 0xe0, 0x30, 0xc3, 0x7c, 0x7f, 0x3b, 0xab, 0xae,
	0x4c, 0x1b, 0x4c, 0x29, 0x7a, 0x33, 0x4a, 0xd8, 0x4b, 0x74, 0xbc, 0xef, 0x40, 0x41, 0xc9, 0x6f,
	0x40, 0x0a, 0x07, 0x32, 0x82, 0x5a, 0x55, 0x56, 0xfd, 0xd3, 0x39, 0xc8, 0x0b, 0x6a, 0x21, 0x23,
	0x1c, 0xd4, 0x12, 0xe1, 0xe0, 0x0d, 0x98, 0x1b, 0xba, 0xdd, 0x97, 0x9e, 0x7a, 0x04, 0x65, 0x2a,
	0x3d, 0x6e, 0x33, 0x99, 0xe3, 0xf6, 0x0d, 0x98, 0xa5, 0x93, 0x46, 0x44, 0x48, 0x19, 0x89, 0x10,
	0x83, 0xf4, 0x85, 0x05, 0xf3, 0xb0, 0xd5, 0x6a, 0xb6, 0xb6, 0x4d, 0xaa, 0x32, 0x45, 0x30, 0xcd,
	0x7e, 0x05, 0x82, 0xe9, 0x11, 0x5c, 0x0f, 0x46, 0x71, 0x14, 0xdb, 0xbe, 0xd8, 0x03, 0x25, 0x9a,
	0x8a, 0xd2, 0xa3, 0x72, 0x2d, 0x53, 0x2c, 0xef, 0x4a, 0x24, 0x5e, 0xa2, 0x6e, 0xc8, 0xed, 0x38,
	0x08, 0xe5, 0x5b, 0xa9, 0x92, 0xec, 0x38, 0xcb, 0x32, 0xd0, 0xb9, 0x68, 0xe2, 0x00, 0x36, 0xa1,
	0x64, 0xd6, 0xb7, 0xda, 0xf4, 0xf8, 0x3d, 0xd9, 0x42, 0xd5, 0x61, 0xcc, 0xc3, 0x81, 0xeb, 0xdb,
	0x31, 0x77, 0xe8, 0x10, 0x8b, 0x67, 0x25, 0x0c, 0x83, 0x50, 0x77, 0xfd, 0xae, 0x37, 0x72, 0x24,
	0x73, 0x9d, 0xc0, 0x33, 0xb2, 0xa2, 0x9a, 0x0e, 0x94, 0xb1, 0x4f, 0x4e, 0x74, 0x4c, 0x49, 0xa2,
	0x8c, 0x8d, 0x55, 0xec, 0xed, 0x1b, 0x93, 0xd4, 0xf0, 0xab, 0x9f, 0x24, 0x0a, 0x1e, 0xdc, 0x68,
	0x71, 0xec, 0xa8, 0xb5, 0xe0, 0x8b, 0xe9, 0x17, 0x52, 0x3f, 0x77, 0x04, 0x29, 0x21, 0x99, 0x62,
	0x20, 0x62, 0x64, 0xd5, 0x4c, 0xb2, 0xc4, 0x3b, 0x8a, 0xaa, 0xe7, 0xf2, 0xc4, 0x3b, 0x8a, 0x1a,
	0xe8, 0x5b, 0x50, 0x44, 0x16, 0x5d, 0x2c, 0xfc, 0x3c, 0xad, 0x09, 0xa6, 0x9b, 0x0e, 0x5b, 0x83,
	0x05, 0x65, 0x16, 0x40, 0x3b, 0xb9, 0x88, 0xcd, 0x17, 0x8c, 0x2c, 0xee, 0x31, 0xe7, 0xc3, 0x2c,
	0x26, 0xba, 0x91, 0x60, 0x91, 0x25, 0x45, 0x36, 0x20, 0xe6, 0x10, 0x98, 0xb0, 0xef, 0x7a, 0x4e,
	0xc8, 0xfd, 0xe5, 0x0a, 0x52, 0x5c, 0x49, 0x7a, 0x92, 0xbe, 0xbd, 0xfa, 0xb3, 0xe9, 0xdb, 0x77,
	0xa1, 0xd8, 0x1d, 0x8e, 0x48, 0xd0, 0xc5, 0xce, 0x0b, 0xba, 0x0a, 0xdd, 0xe1, 0x08, 0x85, 0x5c,
	0x17, 0x0b, 0xa4, 0xae, 0x5d, 0x22, 0x90, 0x5a, 0xcd, 0x50, 0x63, 0xd7, 0x2f, 0xa7, 0xc6, 0x52,
	0xe2, 0xab, 0xfa, 0x3d, 0x98, 0xa5, 0x49, 0x97, 0x41, 0x1d, 0xe8, 0xca, 0x15, 0xb6, 0x08, 0xd0,
	0x69, 0x98, 0x7b, 0xcd, 0x96, 0xd4, 0xda, 0x24, 0xc4, 0xf3, 0x8c, 0x28, 0xfa, 0xa4, 0xb1, 0xbb,
	0x6b, 0x11, 0x7d, 0x9d, 0xab, 0xfe, 0xb6, 0x06, 0x90, 0x0e, 0x9c, 0xd5, 0x60, 0x01, 0xcd, 0x68,
	0x94, 0x28, 0x0f, 0xef, 0x5e, 0x6e, 0xe3, 0x0e, 0xae, 0xc5, 0xcd, 0xea, 0x2b, 0x87, 0x11, 0x0f,
	0xf5, 0xee, 0x70, 0x94, 0x28, 0x52, 0xc5, 0x0a, 0x98, 0x65, 0xd1, 0x66, 0x93, 0x64, 0x7b, 0x6c,
	0x1b, 0x96, 0xa2, 0x71, 0x14, 0xf3, 0x41, 0x0a, 0x24, 0x87, 0x40, 0xde, 0x40, 0x20, 0xb7, 0xaa,
	0x37, 0xdb, 0x58, 0x7c, 0x1e, 0xcc, 0x02, 0xb5, 0x93, 0x80, 0xaa, 0x7f, 0xa4, 0x41, 0x49, 0x0c,
	0xcd, 0x1e, 0x0c, 0x3d, 0xd4, 0x9e, 0x5e, 0x30, 0xb2, 0xc9, 0xae, 0xdf, 0xbd, 0xa4, 0xeb, 0x29,
	0xc8, 0xc8, 0x2b, 0x0c, 0x47, 0xd6, 0x90, 0x87, 0x5d, 0xb1, 0x1d, 0x33, 0x58, 0x07, 0xba, 0xc3,
	0xd1, 0x01, 0xe5, 0x7c, 0x75, 0x09, 0x43, 0x22, 0x69, 0x51, 0x3a, 0xfe, 0x08, 0x47, 0x3b, 0x21,
	0x55, 0xf9, 0xef, 0x35, 0x28, 0x36, 0xf7, 0xe5, 0x34, 0xee, 0x00, 0x84, 0xdc, 0x76, 0xe4, 0x3b,
	0x41, 0xb4, 0x7d, 0x49, 0xe4, 0xd0, 0xe3, 0xf0, 0x06, 0x94, 0x4f, 0x43, 0x37, 0x56, 0xaf, 0x0e,
	0xbd, 0x9d, 0x80, 0x59, 0x54, 0x41, 0xb5, 0xc7, 0xd3, 0x24, 0x91, 0x1d, 0xb6, 0xc7, 0x53, 0x94,
	0xb6, 0xa7, 0xf2, 0x7c, 0xa6, 0x3d, 0x55, 0x98, 0x98, 0xd9, 0xec, 0x2f, 0x38, 0xb3, 0x3f, 0x4a,
	0xe4, 0x45, 0xe2, 0x10, 0x46, 0xec, 0x9b, 0xb4, 0xae, 0x54, 0x33, 0x92, 0x04, 0x21, 0x18, 0xc9,
	0x26, 0xe2, 0x1a, 0xd3, 0x4f, 0xbc, 0xf5, 0x66, 0xbb, 0x4d, 0xf2, 0x79, 0x9a, 0x67, 0x21, 0x6c,
	0xb7, 0x51, 0x34, 0x7f, 0x0b, 0x8a, 0x2f, 0xf6, 0x64, 0x11, 0x4d, 0xb1, 0x70, 0xb2, 0x47, 0x45,
	0xef, 0xc0, 0xe2, 0x80, 0x0f, 0x82, 0x70, 0x9c, 0xec, 0x5e, 0x9e, 0x76, 0x98, 0x72, 0xd5, 0x06,
	0xbe, 0x03, 0x8b, 0x74, 0xdf, 0x94, 0x0c, 0x8f, 0xe6, 0x6a, 0x2e, 0x90, 0xc9, 0x93, 0xcc, 0x44,
	0x86, 0x6e, 0x5a, 0x4e, 0x5c, 0x3a, 0x4a, 0xee, 0xe3, 0x0a, 0x80, 0x1b, 0x24, 0xd3, 0x29, 0x48,
	0xfa, 0x56, 0xed, 0xa5, 0x59, 0x72, 0x03, 0x35, 0x99, 0x37, 0x26, 0x51, 0x6a, 0x91, 0xd6, 0x3d,
	0x83, 0x1d, 0x5f, 0x85, 0xd2, 0x51, 0x10, 0xc4, 0x19, 0x8c, 0x6b, 0x16, 0x45, 0x06, 0x9e, 0x74,
	0x0b, 0xca, 0xed, 0xd8, 0x0e, 0xe3, 0xd1, 0x10, 0xe5, 0x5b, 0x53, 0x42, 0x31, 0xed, 0x2b, 0x09,
	0xc5, 0x26, 0x3a, 0xc8, 0x4d, 0x75, 0x70, 0x08, 0x8b, 0x0d, 0x32, 0x0c, 0x52, 0xfa, 0x91, 0x0a,
	0xcc, 0x74, 0x07, 0x52, 0x30, 0x60, 0x8a, 0x9f, 0x89, 0x6d, 0x50, 0x0e, 0x51, 0x23, 0x61, 0xe6,
	0x3b, 0x00, 0x28, 0xd0, 0x27, 0xcd, 0x3b, 0xb2, 0x98, 0xb4, 0xff, 0xa4, 0x4b, 0xfe, 0xab, 0x1a,
	0x2c, 0x25, 0x70, 0x89, 0xe0, 0x60, 0x77, 0xd3, 0x47, 0x9e, 0x06, 0xbe, 0x64, 0x4c, 0x76, 0x9d,
	0x3c, 0xf4, 0x62, 0xd1, 0xf8, 0x99, 0x9b, 0xc8, 0x74, 0x73, 0x08, 0x1e, 0x44, 0x96, 0x94, 0x04,
	0x20, 0x26, 0x77, 0x82, 0x51, 0x2c, 0x55, 0x7e, 0x32, 0x25, 0xf3, 0x79, 0x18, 0x4a, 0xca, 0x55,
	0xa6, 0xc4, 0x1a, 0xa4, 0xfa, 0x87, 0x59, 0x04, 0x57, 0x8c, 0xa5, 0xbe, 0xa1, 0xfa, 0xef, 0x2c,
	0x42, 0x51, 0x11, 0xb2, 0xec, 0x31, 0x51, 0xb9, 0x28, 0xf3, 0x23, 0x6d, 0x09, 0x4b, 0xa8, 0x5c,
	0xfc, 0x81, 0xbc, 0xd3, 0xec, 0x61, 0xab, 0xdd, 0xe8, 0x98, 0x49, 0x55, 0xb1, 0x46, 0x48, 0xff,
	0x4b, 0x16, 0x45, 0xfc, 0x66, 0x77, 0xa1, 0x3c, 0x10, 0x57, 0xd3, 0x1a, 0x06, 0xae, 0x44, 0x26,
	0xa5, 0x8d, 0x22, 0xde, 0xa9, 0xdc, 0xb2, 0x66, 0x02, 0x16, 0x1e, 0x88, 0x32, 0xf6, 0x23, 0x28,
	0x47, 0x71, 0xc8, 0xed, 0x01, 0x71, 0xae, 0x65, 0xac, 0xfa, 0x3d, 0xac, 0xfa, 0x2d, 0xf6, 0xb8,
	0x46, 0xaa, 0x3f, 0x65, 0x16, 0x88, 0x54, 0x2b, 0x55, 0x37, 0xf4, 0xad, 0x20, 0xd4, 0xf9, 0x19,
	0x1e, 0xb6, 0x7b, 0xe2, 0xad, 0xaf, 0xd5, 0xdb, 0x58, 0xdb, 0x10, 0x3d, 0x50, 0x25, 0xe4, 0x7d,
	0xbf, 0x01, 0x65, 0x9f, 0x47, 0x31, 0x77, 0x2e, 0xe1, 0x53, 0x80, 0x4a, 0x91, 0x53, 0xd1, 0x13,
	0x7e, 0x82, 0x64, 0xc9, 0xe9, 0x98, 0x15, 0x5b, 0x71, 0x00, 0xf3, 0x02, 0x8c, 0x15, 0xa0, 0xc0,
	0x22, 0x92, 0xcc, 0xe6, 0xd5, 0x74, 0xa5, 0xf6, 0xa9, 0x60, 0xbd, 0xb2, 0x59, 0x6b, 0x37, 0xac,
	0x66, 0xab, 0xdd, 0x68, 0xb5, 0x9b, 0x9d, 0xe6, 0x8b, 0x46, 0x06, 0x58, 0x59, 0x80, 0x90, 0x15,
	0x99, 0x0b, 0x4b, 0x21, 0xef, 0x8e, 0x50, 0xd4, 0x62, 0x39, 0x7c, 0x18, 0xf7, 0xf1, 0xc5, 0xcf,
	0xaf, 0x6b, 0x0f, 0x37, 0x3e, 0xc0, 0x26, 0x4f, 0xd9, 0x43, 0x53, 0xd5, 0xd0, 0xb1, 0x06, 0x99,
	0x98, 0x98, 0x8d, 0xcd, 0x43, 0xb3, 0xdd, 0x7c, 0xd1, 0xd0, 0x69, 0x34, 0x68, 0x03, 0x37, 0xe4,
	0x5d, 0xb7, 0xe7, 0x72, 0xc7, 0x58, 0xce, 0x99, 0x8b, 0x09, 0xe0, 0xba, 0x68, 0xc5, 0x5e, 0x87,
	0x59, 0xd7, 0x0f, 0x1c, 0x79, 0x19, 0x33, 0x03, 0xa2, 0x6c, 0xf6, 0x7d, 0x28, 0xf9, 0x71, 0x2f,
	0x22, 0xb9, 0x6f, 0x49, 0x2a, 0x86, 0x93, 0x99, 0xc5, 0xd1, 0x4b, 0xab, 0x17, 0x59, 0x76, 0x1c,
	0x87, 0x58, 0x63, 0x7d, 0xb9, 0xd3, 0x7e, 0x6e, 0x6d, 0xb5, 0xad, 0x5a, 0xa7, 0x63, 0x5a, 0x9d,
	0xcf, 0x0e, 0x1a, 0x56, 0xbd, 0xb1, 0x55, 0x3b, 0xdc, 0xed, 0x64, 0x20, 0x17, 0x05, 0x40, 0xe4,
	0xa3, 0xdf, 0x84, 0x02, 0x02, 0x77, 0x1d, 0xa4, 0x85, 0x26, 0x16, 0x57, 0x14, 0x34, 0x1d, 0xf6,
	0xd7, 0x34, 0x60, 0x3d, 0xd7, 0x23, 0x0d, 0xa5, 0x15, 0x9c, 0xf0, 0x30, 0x74, 0x1d, 0x69, 0x68,
	0xb4, 0x3e, 0xf7, 0xf8, 0xc1, 0xda, 0xea, 0xea, 0xea, 0xc6, 0xaf, 0x60, 0xb3, 0x31, 0x14, 0x05,
	0xf6, 0x46, 0x04, 0x38, 0x10, 0x47, 0x41, 0xb4, 0x8b, 0xf4, 0xd3, 0xbe, 0xdb, 0xed, 0xa3, 0x25,
	0xa2, 0x1f, 0xf8, 0x7a, 0xc4, 0xf9, 0x4b, 0xb2, 0xb4, 0x21, 0x8a, 0x9f, 0xbb, 0xa1, 0xce, 0x7d,
	0x47, 0x5f, 0xe1, 0xc6, 0xb1, 0xa1, 0xdf, 0x1f, 0x86, 0x41, 0x97, 0xda, 0xa1, 0x0a, 0x24, 0x25,
	0xe8, 0x07, 0xae, 0x8f, 0x06, 0x33, 0x36, 0x1e, 0x54, 0x81, 0xee, 0xc9, 0x0a, 0x46, 0x3c, 0x2a,
	0x86, 0x59, 0x11, 0x4d, 0x44, 0xc7, 0xfb, 0x72, 0x80, 0xcc, 0x83, 0x45, 0x37, 0xb2, 0x4e, 0xdc,
	0x30, 0x1e, 0xd9, 0x5e, 0x18, 0x04, 0x31, 0xd2, 0x64, 0xc5, 0x8d, 0x06, 0x0e, 0xf5, 0x7b, 0xec,
	0x83, 0xe6, 0xb4, 0xda, 0xc3, 0x8d, 0x74, 0xc5, 0x37, 0xea, 0xb6, 0x27, 0xe0, 0x8e, 0x15, 0x7f,
	0x16, 0xe9, 0xb6, 0x2e, 0x41, 0xe9, 0x02, 0x96, 0x61, 0x2e, 0xb8, 0xd1, 0x8b, 0x14, 0x76, 0xb5,
	0x47, 0x97, 0xb6, 0x43, 0xb7, 0x8f, 0x2e, 0x64, 0xe5, 0xff, 0x53, 0xff, 0x34, 0x94, 0x0f, 0xb6,
	0x2b, 0x57, 0x58, 0x01, 0x66, 0x3a, 0xed, 0xe7, 0x64, 0x6c, 0x62, 0x36, 0xb6, 0x9b, 0xed, 0x8e,
	0xf9, 0x59, 0x25, 0xc7, 0x18, 0xcc, 0xed, 0x35, 0xf6, 0xf6, 0xcd, 0xcf, 0x2a, 0x33, 0xb7, 0xe7,
	0xfe, 0xd9, 0x4f, 0xff, 0xf8, 0xa7, 0x5a, 0x8e, 0x5d, 0x83, 0x42, 0x67, 0xef, 0x60, 0xab, 0xb9,
	0xdb, 0xa8, 0xe4, 0x55, 0x66, 0xf5, 0x39, 0x14, 0xd4, 0x19, 0xbd, 0x0e, 0xe7, 0x8e, 0x33, 0xc9,
	0x41, 0x30, 0x77, 0x17, 0x4d, 0x59, 0x76, 0x89, 0xaa, 0x32, 0x1b, 0xdb, 0x8d, 0x4f, 0x2b, 0x39,
	0xb6, 0x00, 0xa5, 0xe4, 0x7c, 0x56, 0x66, 0xaa, 0xff, 0xf1, 0x2c, 0x54, 0xa6, 0x0f, 0x10, 0x7b,
	0x0d, 0x2e, 0x3d, 0x42, 0x15, 0xed, 0xc2, 0xd2, 0x56, 0x67, 0xab, 0x6d, 0xb5, 0x9b, 0x95, 0x0a,
	0xab, 0xc2, 0xeb, 0x17, 0x97, 0x8a, 0xe4, 0x6e, 0xb3, 0xdd, 0xa9, 0xe8, 0xec, 0x0d, 0x78, 0xf5,
	0xe2, 0x3a, 0x5b, 0xad, 0xda, 0x5e, 0xa3, 0xb2, 0xca, 0x5e, 0x87, 0xdb, 0x17, 0x57, 0x78, 0xf1,
	0xa2, 0x61, 0x56, 0x3e, 0xbc, 0x1c, 0xc0, 0xfe, 0xc6, 0x47, 0xcd, 0x7a, 0xe5, 0x43, 0x76, 0x07,
	0x6e, 0x5d, 0x32, 0xc6, 0xc6, 0x66, 0xe5, 0xe0, 0xf2, 0xf6, 0x2f, 0x70, 0x00, 0x3f, 0xfa, 0x92,
	0x0a, 0xcd, 0xd6, 0xd6, 0x7e, 0x65, 0xc8, 0xde, 0xb8, 0x6c, 0x84, 0xf5, 0x5a, 0xa7, 0x56, 0xf9,
	0x55, 0x8d, 0x55, 0xe1, 0xce, 0xc5, 0x15, 0x9a, 0xf5, 0x4f, 0xcd, 0xfd, 0xfd, 0x4e, 0xe5, 0x37,
	0x35, 0xf6, 0xd6, 0x65, 0x6b, 0xd5, 0xac, 0x7f, 0x5a, 0xdb, 0xdd, 0xdd, 0xdf, 0xac, 0xfc, 0x65,
	0x8d, 0xbd, 0x09, 0xaf, 0x5d, 0x5c, 0x69, 0xa3, 0xd9, 0xd9, 0xab, 0x1d, 0x54, 0xfe, 0xa3, 0x2f,
	0xa9, 0xd2, 0xfe, 0x6c, 0x6f, 0xb7, 0xf5, 0xbc, 0xf2, 0x37, 0xbe, 0x64, 0x38, 0x66, 0xe3, 0xa0,
	0x66, 0xb6, 0x1b, 0xa2, 0xce, 0xa5, 0x60, 0x1a, 0x35, 0x9c, 0xf5, 0xdf, 0xd1, 0xd8, 0x9d, 0xcb,
	0xf6, 0xbe, 0x51, 0xab, 0xfc, 0x6f, 0xda, 0xe5, 0xab, 0x72, 0x60, 0xee, 0x1f, 0x54, 0xfe, 0x99,
	0xc6, 0x5e, 0xbf, 0x6c, 0x5f, 0x76, 0xf7, 0xb7, 0x2b, 0xbf, 0x9a, 0x63, 0xfa, 0x05, 0xeb, 0x7e,
	0xd8, 0x6a, 0x7e, 0x6a, 0x35, 0x5b, 0xf5, 0xa6, 0x59, 0xf9, 0x35, 0xfd, 0x76, 0xae, 0xa2, 0x55,
	0x7f, 0x08, 0x8b, 0xbb, 0x2e, 0xca, 0xba, 0x14, 0x8d, 0x90, 0x15, 0x05, 0x69, 0x97, 0x8a, 0x82,
	0x44, 0x35, 0x37, 0xe6, 0x21, 0xb2, 0xb4, 0x39, 0x59, 0xad, 0x29, 0x33, 0xcc, 0xa4, 0xa8, 0xfa,
	0x07, 0x1a, 0x2c, 0x88, 0x77, 0x7d, 0xab, 0xad, 0xe0, 0x7f, 0x17, 0x4a, 0xf8, 0xbc, 0x48, 0xe3,
	0xab, 0x99, 0x95, 0xd2, 0xc6, 0x9b, 0x88, 0x44, 0x5e, 0x65, 0xb7, 0xc4, 0x50, 0x04, 0x2e, 0xc2,
	0x5e, 0xf0, 0x4d, 0x14, 0x54, 0x42, 0x0f, 0x6d, 0x5f, 0xed, 0xb8, 0x8f, 0xc6, 0x59, 0xdf, 0xcf,
	0x3c, 0xe2, 0xb9, 0x4b, 0x1f, 0xf1, 0xdc, 0x7e, 0x7b, 0xe3, 0x3d, 0x04, 0xfb, 0x26, 0x7b, 0x43,
	0xe4, 0x28, 0xb0, 0x68, 0x49, 0x63, 0x7b, 0x9e, 0x84, 0xac, 0xa3, 0xf1, 0xa7, 0x02, 0x58, 0xfd,
	0x5d, 0xc1, 0xf6, 0xc7, 0x76, 0xdc, 0xf0, 0xe3, 0x70, 0xcc, 0x3e, 0x85, 0xa2, 0xdd, 0xeb, 0x3d,
	0xc2, 0x47, 0x95, 0x94, 0x29, 0xd2, 0x48, 0x3c, 0x51, 0x56, 0xa1, 0xd2, 0xd5, 0x0b, 0xa4, 0x9e,
	0x55, 0x11, 0xcd, 0x68, 0xc1, 0x27, 0x55, 0x38, 0xb5, 0xad, 0xad, 0x47, 0x7a, 0x34, 0x44, 0x6e,
	0x3c, 0x81, 0xc6, 0x3e, 0x82, 0x42, 0x14, 0x5b, 0x03, 0xf1, 0x50, 0x29, 0xd9, 0xdd, 0x86, 0x81,
	0xb0, 0x57, 0xa0, 0x28, 0x06, 0xb0, 0x27, 0x1e, 0xab, 0xd7, 0x6a, 0xfa, 0xc8, 0x77, 0xcf, 0x08,
	0xde, 0x50, 0xf0, 0xfe, 0x64, 0x89, 0x28, 0xda, 0x19, 0x82, 0xfe, 0xc1, 0x5a, 0xaf, 0x08, 0xba,
	0xc8, 0x72, 0x7d, 0x52, 0xa4, 0x2e, 0x98, 0xb3, 0x51, 0xdc, 0xf4, 0x03, 0x99, 0xed, 0xf0, 0x13,
	0xb2, 0x83, 0x11, 0xd9, 0x75, 0x8e, 0x46, 0x53, 0x51, 0x6c, 0xf9, 0x9e, 0xeb, 0xbf, 0x44, 0x42,
	0x61, 0xc1, 0x2c, 0x44, 0x71, 0x4b, 0x24, 0x65, 0x8b, 0x91, 0xeb, 0x48, 0xeb, 0x96, 0xd9, 0x28,
	0x3e, 0x74, 0x1d, 0x99, 0x7d, 0xec, 0x92, 0x5b, 0x02, 0x66, 0x6f, 0xbb, 0x0e, 0xbb, 0x89, 0x53,
	0x40, 0x6a, 0x9d, 0x08, 0xdf, 0xb9, 0x28, 0xc6, 0xb7, 0x6a, 0x07, 0x7b, 0xb0, 0x53, 0x9a, 0x37,
	0xe1, 0x35, 0x58, 0x86, 0xd7, 0x50, 0xbc, 0xe7, 0xd5, 0x5d, 0x3b, 0x8a, 0x75, 0xbb, 0xdb, 0xe5,
	0x11, 0x19, 0xa5, 0x19, 0x62, 0x40, 0x35, 0x64, 0x47, 0x3e, 0x42, 0x48, 0x03, 0x84, 0x44, 0x0f,
	0xea, 0x7d, 0x84, 0x74, 0xf7, 0x42, 0x48, 0xd7, 0x10, 0xd2, 0x20, 0x70, 0x90, 0x38, 0x48, 0x61,
	0xed, 0x21, 0xac, 0x16, 0xc2, 0xea, 0x22, 0xac, 0x32, 0xc2, 0x7a, 0x88, 0xb0, 0xde, 0xbf, 0x10,
	0xd6, 0x4d, 0x84, 0x85, 0x24, 0x83, 0xde, 0xed, 0xdb, 0xfe, 0x31, 0x4f, 0xe1, 0x6d, 0xc6, 0x92,
	0xb4, 0x8f, 0x62, 0x0b, 0x0d, 0x36, 0x23, 0xa4, 0x66, 0x16, 0xcc, 0x62, 0x14, 0x6f, 0x60, 0x5a,
	0x50, 0xd0, 0x58, 0xf8, 0x12, 0x97, 0x67, 0x01, 0x4b, 0x4b, 0xa2, 0x14, 0x33, 0xe4, 0xd2, 0x85,
	0x62, 0x6f, 0x16, 0xb1, 0x6c, 0x2e, 0x8a, 0x4d, 0x87, 0x9f, 0xb0, 0x65, 0x28, 0x44, 0xe3, 0x01,
	0xee, 0x0d, 0x49, 0x31, 0x54, 0x92, 0xfd, 0x57, 0x1a, 0x2c, 0x84, 0xfc, 0xd8, 0x8d, 0xe2, 0x70,
	0x4c, 0xc4, 0x4b, 0x05, 0xcf, 0xfe, 0x4d, 0x23, 0x39, 0xae, 0x86, 0x29, 0xcb, 0xc5, 0x71, 0xdf,
	0xf8, 0x75, 0x0d, 0xa7, 0xf7, 0x6b, 0x1a, 0xfb, 0x95, 0x8c, 0x9d, 0x04, 0xd9, 0x48, 0x90, 0x3d,
	0x8d, 0x02, 0xa7, 0xa3, 0x2a, 0xe3, 0x9e, 0x3a, 0xba, 0xdc, 0x73, 0xd2, 0x77, 0x5a, 0x9c, 0xe0,
	0x58, 0xde, 0x1e, 0x2c, 0x27, 0xf3, 0x66, 0x9d, 0x2c, 0xd7, 0x50, 0xce, 0x4f, 0x96, 0xbf, 0xe8,
	0x15, 0x71, 0xc4, 0x75, 0xee, 0x77, 0x03, 0x87, 0x2c, 0xfd, 0x43, 0x1e, 0xb9, 0x0e, 0x8f, 0x0d,
	0x73, 0x3e, 0xcc, 0x0c, 0x8c, 0x54, 0x6d, 0x11, 0xea, 0x3e, 0x51, 0xe6, 0x32, 0x6f, 0x26, 0x69,
	0x66, 0x67, 0x70, 0x0f, 0x9b, 0xc2, 0x3d, 0x1b, 0xeb, 0x38, 0xa1, 0x47, 0x6c, 0x0d, 0xcd, 0xec,
	0xc5, 0x55, 0x96, 0x94, 0xa0, 0xbc, 0x7d, 0xca, 0x29, 0x04, 0x6f, 0x4b, 0xe0, 0x4f, 0x38, 0x42,
	0xa4, 0x78, 0xeb, 0x0f, 0xb2, 0x0b, 0x89, 0x32, 0xe5, 0x6b, 0xb2, 0x23, 0xa5, 0xc1, 0xd8, 0xf8,
	0x65, 0xec, 0xe8, 0x84, 0xc5, 0x6a, 0xe1, 0xb8, 0x58, 0x5e, 0x3d, 0xe4, 0xc3, 0x90, 0x0b, 0x96,
	0x31, 0xfa, 0xf2, 0xc5, 0x3b, 0x25, 0x5b, 0x5d, 0x92, 0x44, 0x23, 0x31, 0x84, 0x75, 0x92, 0xa5,
	0xb1, 0xbb, 0xdd, 0x20, 0x44, 0x01, 0xae, 0x34, 0xf4, 0xef, 0x06, 0x61, 0xc8, 0xbb, 0x31, 0x2e,
	0x74, 0x66, 0xb5, 0xc4, 0x78, 0xd8, 0x36, 0x1e, 0xb3, 0x6e, 0x88, 0xe7, 0xf6, 0x3a, 0x9e, 0xdb,
	0x6f, 0xe0, 0xf0, 0xde, 0xbe, 0xf0, 0xdc, 0x2e, 0x6e, 0x0a, 0xe6, 0x13, 0x57, 0x03, 0x8f, 0x6b,
	0x31, 0x8a, 0x37, 0xb1, 0x6d, 0xf5, 0x0f, 0x35, 0x98, 0xcf, 0x1e, 0x10, 0x49, 0x32, 0x59, 0xad,
	0xfd, 0x96, 0xb4, 0xdc, 0x15, 0xa9, 0xf6, 0xe7, 0x64, 0x78, 0x2b, 0x7e, 0x37, 0x3e, 0x3d, 0xa8,
	0xb5, 0xea, 0x22, 0x2b, 0xc7, 0x16, 0x01, 0x44, 0xd6, 0x46, 0xb3, 0x55, 0x13, 0x54, 0x15, 0x91,
	0x3e, 0xdb, 0x56, 0xfd, 0x93, 0x7d, 0xb3, 0x5e, 0xc9, 0x93, 0x21, 0x94, 0x4c, 0x0a, 0x5a, 0xa9,
	0xb3, 0xdb, 0xb0, 0x1a, 0xad, 0x7a, 0xb3, 0xd6, 0xaa, 0xe4, 0xd9, 0x32, 0x5c, 0x4f, 0x0b, 0x37,
	0x9a, 0xdb, 0xaa, 0x64, 0x56, 0x0d, 0x61, 0xb7, 0xd9, 0x7a, 0x5e, 0x99, 0x13, 0xb4, 0x96, 0x48,
	0xed, 0x1d, 0xee, 0x76, 0x9a, 0xa2, 0xd7, 0x82, 0xea, 0xe5, 0x63, 0xec, 0xa5, 0x8c, 0xef, 0x95,
	0x01, 0x90, 0xea, 0xf7, 0x99, 0x0e, 0xb3, 0x6e, 0xcc, 0x07, 0xa9, 0xd0, 0x21, 0xb9, 0x0c, 0x26,
	0x15, 0x54, 0x37, 0x01, 0x3e, 0x19, 0xb8, 0xea, 0xed, 0x21, 0x75, 0x68, 0x38, 0x96, 0x1c, 0x30,
	0x25, 0x04, 0x47, 0x7a, 0x64, 0x47, 0xdc, 0x0a, 0x8e, 0x7e, 0xcc, 0xbb, 0xca, 0x8d, 0x0c, 0x44,
	0xd6, 0x3e, 0xe6, 0x54, 0xbf, 0x03, 0xc5, 0xe7, 0x7c, 0x4c, 0xfa, 0xb9, 0x9b, 0xa0, 0xbd, 0x4c,
	0xde, 0xc5, 0x44, 0xe9, 0xa5, 0xbd, 0x14, 0x05, 0x27, 0xc9, 0x4b, 0x98, 0x16, 0x9c, 0x54, 0x9b,
	0x90, 0xaf, 0xbb, 0xdd, 0x98, 0xd5, 0x60, 0xc6, 0xb1, 0x53, 0x85, 0x99, 0x82, 0x98, 0xf8, 0x6b,
	0xdd, 0xa8, 0xf9, 0x19, 0xdd, 0xe0, 0x4b, 0x3e, 0xbe, 0x8f, 0xe7, 0xa6, 0x9a, 0x17, 0xc0, 0x4c,
	0xd1, 0xb6, 0xda, 0x81, 0xc5, 0x5a, 0x1c, 0x87, 0xee, 0xd1, 0x28, 0xe6, 0x0e, 0x02, 0xdd, 0xb8,
	0x04, 0xe8, 0x3b, 0x08, 0xf4, 0x0d, 0x76, 0xf3, 0x62, 0xa0, 0x46, 0x16, 0xea, 0x19, 0x94, 0x37,
	0x79, 0x28, 0x95, 0xf4, 0x9c, 0xbd, 0x23, 0xfd, 0x66, 0x34, 0xc9, 0xf7, 0x65, 0xca, 0xd0, 0x71,
	0x46, 0xfa, 0xcb, 0x54, 0x60, 0x66, 0xc8, 0x07, 0x52, 0x20, 0x2f, 0x7e, 0xb2, 0x45, 0xc8, 0x75,
	0x7d, 0xa9, 0xdf, 0xc9, 0x75, 0xfd, 0xaa, 0x2e, 0x4d, 0xc4, 0x0b, 0x30, 0xb3, 0xd9, 0x36, 0x89,
	0x5c, 0xdf, 0x34, 0x05, 0xdd, 0x3b, 0x07, 0xb9, 0xcd, 0x5a, 0x25, 0x57, 0xfd, 0x27, 0x05, 0x98,
	0x3d, 0x44, 0x09, 0xff, 0x73, 0x98, 0x23, 0x69, 0x9d, 0x7c, 0x68, 0x25, 0x72, 0x66, 0xdf, 0x44,
	0x7b, 0x09, 0x12, 0x1d, 0x0e, 0x3d, 0x3b, 0xee, 0x05, 0xe1, 0x40, 0x5f, 0xf9, 0xc4, 0xf5, 0x9d,
	0xe0, 0x34, 0xfa, 0xe5, 0xba, 0x1d, 0x9e, 0xba, 0xfe, 0x2f, 0xef, 0xba, 0xfe, 0xe8, 0x0c, 0x3d,
	0x89, 0xb0, 0x22, 0x7b, 0x06, 0x79, 0x5f, 0x3d, 0xad, 0xa5, 0xd4, 0x1f, 0x4e, 0x80, 0xea, 0x07,
	0x51, 0x9c, 0xfa, 0x5e, 0x09, 0x6e, 0x12, 0x9b, 0x18, 0x26, 0xb6, 0x60, 0x07, 0x50, 0x08, 0x39,
	0xe9, 0xb4, 0x89, 0xa5, 0x7f, 0x82, 0x8d, 0x57, 0x99, 0x21, 0x1a, 0xef, 0xb7, 0x75, 0x59, 0x9a,
	0xf5, 0xe8, 0x43, 0x4e, 0xeb, 0xe9, 0x3d, 0x7d, 0xbf, 0xfd, 0xe9, 0x3d, 0xdd, 0xe1, 0x47, 0xae,
	0xed, 0x1b, 0xa6, 0x02, 0xc3, 0x3a, 0x50, 0x50, 0x96, 0x07, 0xe4, 0x0e, 0x36, 0x81, 0xc6, 0xf6,
	0xdb, 0xba, 0x2c, 0xd5, 0x9b, 0x75, 0x82, 0xf4, 0xc4, 0x78, 0x60, 0x3c, 0x7d, 0xb2, 0xfa, 0xa0,
	0x7d, 0xf0, 0xe0, 0x9e, 0xfe, 0x60, 0xd5, 0xf8, 0x96, 0xb1, 0x76, 0x4f, 0x7f, 0xf0, 0xc8, 0x58,
	0x7d, 0x64, 0x98, 0x0a, 0x14, 0xdb, 0x83, 0xc2, 0xc0, 0xee, 0xf6, 0x5d, 0xa5, 0xf0, 0xbe, 0x70,
	0xbd, 0xec, 0xb0, 0xdb, 0x77, 0x63, 0xde, 0x8d, 0x47, 0x21, 0x27, 0xd8, 0xb5, 0xbd, 0xfa, 0x93,
	0x47, 0xf7, 0xf4, 0xb3, 0x67, 0x4f, 0xac, 0x27, 0x02, 0x9c, 0x84, 0xc1, 0x3e, 0x87, 0xb9, 0x97,
	0x3c, 0xf4, 0xb9, 0x27, 0x1d, 0xbd, 0x36, 0x10, 0xda, 0x77, 0xd8, 0xba, 0x80, 0x46, 0x25, 0xc9,
	0x38, 0x49, 0x1d, 0x3f, 0x39, 0xd6, 0x7b, 0xfa, 0x83, 0x87, 0xc6, 0x03, 0x63, 0xf5, 0x9e, 0xfe,
	0xd0, 0x78, 0xf0, 0xf8, 0xfd, 0xb0, 0xbb, 0x66, 0x98, 0x12, 0x22, 0x6b, 0x40, 0xbe, 0xf7, 0x85,
	0x43, 0x3a, 0xeb, 0xd2, 0xc6, 0x03, 0x84, 0xfc, 0x4d, 0x76, 0x37, 0x1d, 0xe7, 0x7b, 0x91, 0xde,
	0x1b, 0x79, 0xde, 0x58, 0xff, 0x62, 0x64, 0x7b, 0xf4, 0x76, 0x3b, 0xc1, 0x40, 0x20, 0x4f, 0x94,
	0x75, 0x98, 0xd8, 0x9c, 0x99, 0x30, 0xef, 0xfa, 0x51, 0x6c, 0x7b, 0x9e, 0xc0, 0xda, 0x8a, 0xbf,
	0x57, 0xf4, 0xc0, 0x84, 0x14, 0xf3, 0x36, 0x2a, 0x2f, 0xe4, 0x22, 0x9c, 0xda, 0x91, 0x2e, 0x1b,
	0xa2, 0x7d, 0xa1, 0xfc, 0x2d, 0x2a, 0xb3, 0x67, 0x50, 0xf4, 0xdc, 0xa3, 0xae, 0x75, 0xc2, 0x43,
	0xa9, 0x07, 0x93, 0x22, 0x6f, 0xb2, 0x3c, 0xdd, 0xd4, 0x3d, 0xf7, 0x08, 0xef, 0x8d, 0x9c, 0xbb,
	0x59, 0x10, 0xd5, 0x5f, 0xf0, 0x90, 0x09, 0x6c, 0x9a, 0x5d, 0x5e, 0x24, 0x4f, 0x4a, 0x1b, 0xbf,
	0x47, 0x8f, 0xee, 0x6f, 0x6b, 0xec, 0xdf, 0xd0, 0xd0, 0x3f, 0x28, 0xbb, 0x03, 0xea, 0xc4, 0x1d,
	0xb9, 0xbe, 0x1d, 0x8e, 0x0d, 0x7d, 0xa5, 0x15, 0xc4, 0xca, 0xe6, 0xdb, 0xf6, 0xc5, 0xe3, 0xe9,
	0xb8, 0x3d, 0x54, 0xfb, 0xc6, 0x09, 0x37, 0xaf, 0xcb, 0x1d, 0x9a, 0x84, 0x24, 0x49, 0xcb, 0xae,
	0x38, 0x88, 0xf8, 0x94, 0x3f, 0x5c, 0xd3, 0x8f, 0xdc, 0x58, 0x42, 0xd6, 0xc3, 0x91, 0x8f, 0xc6,
	0x51, 0x81, 0xaf, 0xdb, 0xfa, 0x93, 0x47, 0x58, 0x44, 0xab, 0x71, 0xd7, 0x9c, 0x18, 0x35, 0x1b,
	0x40, 0x69, 0xc8, 0x87, 0x8f, 0xd6, 0x1e, 0xc7, 0xf6, 0xb1, 0x14, 0x4c, 0x25, 0x5e, 0x5c, 0x62,
	0xfc, 0xd2, 0x7d, 0x35, 0xb1, 0x25, 0x4f, 0xe6, 0x30, 0x1c, 0xc7, 0xfd, 0x20, 0x59, 0xe3, 0x15,
	0x3b, 0xd2, 0x1d, 0xde, 0x73, 0x7d, 0xb2, 0x64, 0x3c, 0x68, 0x1c, 0x3c, 0x5a, 0x7b, 0xac, 0xc7,
	0xf6, 0x71, 0x74, 0xd7, 0x30, 0xd3, 0x1e, 0xaa, 0x7f, 0x25, 0x0f, 0x57, 0xb7, 0x02, 0xcf, 0xe1,
	0x61, 0xd6, 0x86, 0xe7, 0x16, 0x14, 0xed, 0xe1, 0x90, 0xde, 0x62, 0xc2, 0xcb, 0x05, 0x7b, 0x38,
	0xc4, 0xd7, 0xef, 0x3a, 0xcc, 0x76, 0xed, 0x6e, 0x5f, 0x59, 0x26, 0x51, 0x02, 0x95, 0x69, 0x41,
	0xf0, 0xd2, 0x95, 0xa2, 0xf0, 0x92, 0xa9, 0x92, 0xa2, 0xc4, 0xe1, 0xd1, 0xcb, 0x38, 0x18, 0x66,
	0x14, 0xf9, 0x22, 0xc9, 0x5e, 0x83, 0x52, 0xcf, 0x3e, 0x09, 0x42, 0x37, 0xe6, 0x91, 0xb4, 0x11,
	0x49, 0x33, 0x44, 0xbb, 0xbe, 0x1b, 0xc5, 0x41, 0x38, 0x96, 0x66, 0x7d, 0x2a, 0xc9, 0xde, 0x86,
	0x45, 0x41, 0xde, 0x7b, 0x56, 0x32, 0x44, 0xd2, 0xdf, 0xcd, 0x63, 0x6e, 0x4d, 0x8e, 0xf3, 0x16,
	0x14, 0x07, 0x63, 0x6b, 0x30, 0x8a, 0xdc, 0x2e, 0x1d, 0x24, 0xb3, 0x30, 0x18, 0xef, 0x89, 0x24,
	0x7a, 0x31, 0x8c, 0xad, 0xa1, 0x8b, 0x0b, 0x4e, 0x3a, 0xb2, 0x92, 0x09, 0x83, 0xf1, 0x81, 0xcc,
	0x91, 0x6d, 0x4f, 0x5c, 0x87, 0x07, 0xb4, 0x05, 0xa2, 0xed, 0x0b, 0x91, 0x14, 0x45, 0x3e, 0x8f,
	0xad, 0x7e, 0x10, 0x24, 0x2a, 0x32, 0x9f, 0xc7, 0x3b, 0x01, 0xb9, 0x03, 0x0f, 0x79, 0x18, 0x05,
	0xbe, 0xed, 0x21, 0x7d, 0x59, 0x32, 0x93, 0x34, 0x59, 0xca, 0xb8, 0xbe, 0x6c, 0xb8, 0xa8, 0x2c,
	0x65, 0x5c, 0x3f, 0x6d, 0x1a, 0x06, 0xc7, 0xa1, 0x3d, 0x50, 0xba, 0xb2, 0x24, 0xcd, 0x6e, 0xc0,
	0x5c, 0xc8, 0x51, 0xc0, 0x5e, 0x21, 0x2d, 0x1a, 0xa5, 0x90, 0x62, 0xe5, 0xbe, 0x63, 0xc5, 0x01,
	0xe9, 0xc9, 0xcc, 0x39, 0x91, 0xec, 0x04, 0x44, 0xe9, 0xda, 0x61, 0x6c, 0x0d, 0xb8, 0x3f, 0x42,
	0x9a, 0xad, 0x24, 0x28, 0x5d, 0x3b, 0x8c, 0xf7, 0xb8, 0x3f, 0x42, 0x82, 0x96, 0x64, 0xdc, 0xd2,
	0xd5, 0x4b, 0x25, 0xc5, 0x86, 0xc4, 0x7c, 0x20, 0x50, 0x3a, 0x8f, 0x90, 0xb0, 0x29, 0x99, 0x69,
	0x46, 0xf5, 0x9f, 0x68, 0xb0, 0xd8, 0x22, 0x45, 0x59, 0xcd, 0x71, 0x50, 0x95, 0xf8, 0x2d, 0x98,
	0xb7, 0xe9, 0xa7, 0x95, 0x79, 0x9e, 0x6e, 0x18, 0x93, 0xd5, 0x8c, 0x2d, 0x7b, 0xe0, 0x7a, 0x63,
	0xb3, 0x2c, 0xeb, 0xe2, 0x03, 0xf4, 0x0e, 0x2c, 0xf6, 0x47, 0x03, 0xdb, 0xb7, 0x42, 0x6e, 0x3b,
	0xf6, 0x91, 0xa7, 0xce, 0xd3, 0x02, 0xe6, 0x9a, 0x32, 0x93, 0x3d, 0x84, 0x79, 0x74, 0x3d, 0xc8,
	0xea, 0x59, 0xe6, 0x37, 0x2a, 0x78, 0x21, 0x00, 0x8a, 0x66, 0x7d, 0x0b, 0xb5, 0x29, 0x66, 0x99,
	0x6a, 0x61, 0xa2, 0x7a, 0x07, 0xe6, 0xa8, 0x4b, 0x56, 0x84, 0x7c, 0xb3, 0xd5, 0xe8, 0x54, 0xae,
	0xb0, 0x12, 0xcc, 0x8a, 0x5f, 0x4f, 0x2a, 0xda, 0xfa, 0xdb, 0xff, 0x10, 0x1f, 0x1f, 0x78, 0x4d,
	0x0e, 0x53, 0x97, 0xe3, 0xd4, 0xdd, 0xf4, 0x06, 0x18, 0xd5, 0xdf, 0x28, 0x40, 0xa9, 0xe9, 0xc7,
	0x3c, 0xec, 0xd9, 0x5d, 0xf1, 0x16, 0x96, 0x07, 0x76, 0xd7, 0x92, 0x33, 0x20, 0xd7, 0x8c, 0x84,
	0xea, 0x83, 0x3d, 0xbb, 0xab, 0x96, 0xe4, 0x46, 0xd2, 0x46, 0xdf, 0xab, 0x6d, 0xea, 0xb2, 0x81,
	0x61, 0xc2, 0x20, 0xad, 0xf3, 0x16, 0x2c, 0xb8, 0xc3, 0x47, 0x0a, 0x18, 0x27, 0x49, 0xff, 0xbc,
	0x39, 0xef, 0x0e, 0x1f, 0xd5, 0x54, 0x9e, 0xd8, 0x76, 0xb7, 0x87, 0xd2, 0x69, 0x69, 0x73, 0x45,
	0x29, 0x6a, 0xfc, 0x24, 0xd3, 0x38, 0xaf, 0x1a, 0x3f, 0x49, 0x1b, 0x1f, 0x41, 0x29, 0xad, 0x30,
	0x8b, 0x84, 0xc8, 0xd2, 0xd4, 0xae, 0xa4, 0xcf, 0x53, 0x2d, 0x71, 0xcc, 0x93, 0x6d, 0xc8, 0xd9,
	0xa8, 0x4f, 0x2e, 0x2e, 0xb6, 0xaf, 0xbb, 0x6a, 0x4a, 0x86, 0x99, 0x82, 0x65, 0x0e, 0x30, 0xa7,
	0xdf, 0x1d, 0x92, 0xb9, 0x99, 0x25, 0x1d, 0x53, 0xa5, 0x04, 0x5b, 0x3e, 0xd1, 0x93, 0x6f, 0xc0,
	0x9b, 0x9d, 0xc4, 0x4d, 0xb1, 0xbe, 0xb3, 0x79, 0xa0, 0xd3, 0xab, 0x4d, 0xde, 0xa7, 0xd8, 0xda,
	0x30, 0x2b, 0x02, 0x22, 0x9a, 0xab, 0x35, 0x08, 0x1e, 0x3b, 0x86, 0x6b, 0x99, 0x5e, 0x82, 0x23,
	0x41, 0xc1, 0x73, 0x62, 0x7b, 0xf3, 0x89, 0x7b, 0xe5, 0x44, 0x37, 0xd5, 0x8b, 0xbb, 0xb1, 0x23,
	0x5d, 0xb5, 0x36, 0xcc, 0xab, 0x49, 0x3f, 0xfb, 0x32, 0x8f, 0xfd, 0x08, 0xb0, 0x73, 0x2b, 0xe2,
	0xe1, 0x09, 0x0f, 0x2d, 0x69, 0x8a, 0x76, 0xe1, 0xca, 0x29, 0x42, 0xee, 0x4e, 0xf3, 0x40, 0x4f,
	0xd6, 0x43, 0xe0, 0x61, 0xec, 0x8f, 0x00, 0x44, 0x86, 0xb9, 0x28, 0xe0, 0xb5, 0x31, 0x85, 0x52,
	0x92, 0x1f, 0xc2, 0x92, 0x3b, 0xb4, 0x8e, 0xed, 0x98, 0x9f, 0xda, 0x63, 0xea, 0xa0, 0xf4, 0x0b,
	0x75, 0xb0, 0xe0, 0x0e, 0xb7, 0x09, 0x9a, 0x80, 0xbf, 0xfe, 0x3f, 0x6a, 0x78, 0xb0, 0xff, 0x9e,
	0x06, 0xff, 0x9d, 0x96, 0x41, 0xe6, 0xba, 0x7d, 0x14, 0x8c, 0x62, 0xdd, 0x4e, 0x76, 0x39, 0xdd,
	0x4e, 0xbd, 0xc5, 0x4f, 0x89, 0x43, 0x8a, 0xf4, 0xbe, 0x7d, 0xc2, 0xf5, 0x23, 0xce, 0x7d, 0x71,
	0xca, 0x70, 0xe7, 0x7b, 0x81, 0x47, 0x06, 0x25, 0x5c, 0xdf, 0x1c, 0x6f, 0x04, 0x67, 0xba, 0x1c,
	0x65, 0x72, 0xc2, 0x51, 0xaa, 0xd3, 0x8f, 0xe3, 0x61, 0xb4, 0x7e, 0xff, 0x7e, 0x77, 0x7c, 0x14,
	0x9c, 0x19, 0x03, 0x37, 0x0e, 0xb9, 0x11, 0x84, 0xc7, 0xf7, 0x3d, 0xdb, 0x3f, 0x1e, 0xd9, 0xc7,
	0xfc, 0xbe, 0x7c, 0xa8, 0xd7, 0x8c, 0x07, 0xf7, 0xcf, 0x22, 0xc7, 0x09, 0xba, 0xd1, 0x7d, 0xa2,
	0xea, 0xa3, 0xfb, 0xa4, 0x7f, 0xb6, 0x88, 0xa4, 0xb7, 0xce, 0x22, 0xc7, 0xe8, 0xc7, 0x03, 0xef,
	0xad, 0x8b, 0xfa, 0xa9, 0xfe, 0xce, 0x2c, 0xe4, 0x77, 0xec, 0xa8, 0xcf, 0xb6, 0x60, 0x2e, 0xea,
	0xdb, 0x6b, 0x8f, 0x9f, 0xc8, 0x5b, 0xa8, 0x64, 0x34, 0x20, 0x4a, 0xeb, 0xee, 0xb1, 0x60, 0x2a,
	0x6e, 0xb7, 0x77, 0x6a, 0x6b, 0x8f, 0x9f, 0xa8, 0xd7, 0xb7, 0x6f, 0x47, 0x7d, 0xdd, 0xc1, 0x22,
	0x41, 0x91, 0x62, 0x6b, 0xf6, 0x21, 0xe4, 0xa3, 0xbe, 0xfd, 0x80, 0xa8, 0xe5, 0x8d, 0x7b, 0x08,
	0xe5, 0xdd, 0x09, 0x28, 0xcb, 0xed, 0x9d, 0xda, 0x83, 0x0b, 0x61, 0x60, 0x4b, 0xf6, 0x01, 0xcc,
	0x0c, 0x9c, 0xc7, 0x12, 0x27, 0x7d, 0x13, 0x01, 0xbc, 0x33, 0x01, 0xe0, 0xe6, 0x5e, 0xfd, 0xf1,
	0x85, 0xed, 0x45, 0x3b, 0x36, 0x84, 0xf2, 0x90, 0x77, 0x83, 0x5e, 0xcf, 0xc2, 0x71, 0xa0, 0x06,
	0x2d, 0x71, 0x48, 0xcb, 0x82, 0xf9, 0x76, 0x6d, 0x14, 0xf7, 0x05, 0x6d, 0x2b, 0x98, 0x55, 0x1d,
	0x07, 0x95, 0x81, 0x46, 0x32, 0x39, 0xf4, 0x5a, 0x44, 0x16, 0x98, 0x84, 0x5e, 0x07, 0x0d, 0x64,
	0xba, 0x0d, 0x13, 0xa8, 0x8f, 0xb6, 0x18, 0xf0, 0x00, 0x64, 0xca, 0x12, 0xe3, 0x46, 0xff, 0xbc,
	0xc4, 0xcc, 0x28, 0xdb, 0xe1, 0xfa, 0x44, 0x87, 0x62, 0x12, 0x5f, 0xbd, 0xbf, 0x12, 0xf5, 0xb0,
	0xe7, 0x3c, 0x66, 0x27, 0xb0, 0x90, 0x4e, 0x50, 0x6c, 0x18, 0xfa, 0x61, 0x6d, 0x7c, 0x8c, 0x3d,
	0x3e, 0x9f, 0xe8, 0xf1, 0x83, 0xe9, 0x29, 0x8a, 0xdd, 0xfb, 0xea, 0x9d, 0xce, 0x27, 0x93, 0x14,
	0x3b, 0x1b, 0x40, 0x99, 0xaa, 0x12, 0x75, 0x30, 0x87, 0x97, 0xec, 0xa6, 0x91, 0xed, 0x82, 0xbc,
	0x3c, 0x91, 0x25, 0x7c, 0x8c, 0xc3, 0xb9, 0xcf, 0xde, 0xa7, 0x3c, 0x69, 0xa4, 0x86, 0x1a, 0x9d,
	0x81, 0x3d, 0x16, 0x34, 0xa0, 0x94, 0x31, 0x08, 0x1a, 0x4f, 0xf6, 0x28, 0x10, 0x7a, 0x94, 0x80,
	0xa8, 0x46, 0x70, 0xe3, 0x62, 0xe0, 0x13, 0x46, 0xcc, 0xda, 0x94, 0x11, 0xf3, 0xab, 0x50, 0xea,
	0xf2, 0x30, 0xb6, 0x12, 0xb1, 0x69, 0xde, 0x2c, 0x8a, 0x0c, 0x7c, 0x1f, 0x75, 0x28, 0x77, 0x53,
	0x26, 0x4f, 0xaa, 0x5d, 0xb3, 0x59, 0xd5, 0xbf, 0xad, 0x41, 0x65, 0xcb, 0xf5, 0x8f, 0x79, 0x88,
	0x74, 0x44, 0x67, 0x34, 0xf4, 0x38, 0xbb, 0x0f, 0x85, 0xde, 0x50, 0x3d, 0xc6, 0x39, 0x7c, 0x8c,
	0xa7, 0xeb, 0x10, 0xc3, 0x38, 0xd7, 0x1b, 0x62, 0x3f, 0x8f, 0xa0, 0x20, 0x96, 0x99, 0x87, 0xf4,
	0x0a, 0x2d, 0xae, 0xdd, 0x3e, 0xdf, 0x60, 0x47, 0x3a, 0x5c, 0x98, 0xaa, 0x6a, 0x75, 0x45, 0xb2,
	0x91, 0x4b, 0x50, 0xde, 0x3a, 0xe8, 0x58, 0xd2, 0x27, 0xaa, 0x72, 0x45, 0x65, 0x1c, 0x34, 0xac,
	0xcd, 0xfd, 0xad, 0xad, 0x8a, 0x56, 0xbd, 0x0b, 0x45, 0xd5, 0x5c, 0xf0, 0x9a, 0x7b, 0xf5, 0xc7,
	0x95, 0x2b, 0xe2, 0x59, 0x16, 0xa7, 0xb8, 0xa2, 0xa1, 0x77, 0x32, 0x6e, 0x76, 0x25, 0x57, 0xfd,
	0xcf, 0x35, 0x60, 0x99, 0xbe, 0xbf, 0xa6, 0xf0, 0xfb, 0x2e, 0xcc, 0xc5, 0x23, 0x34, 0x0f, 0xc8,
	0xe1, 0x7e, 0x5f, 0x3d, 0x37, 0x0f, 0x53, 0x56, 0x60, 0x9f, 0xc1, 0xfc, 0xc0, 0x3e, 0xb3, 0x70,
	0x23, 0x13, 0xcb, 0x86, 0x49, 0x47, 0xf6, 0xbb, 0x78, 0x28, 0xde, 0x62, 0x6f, 0x2a, 0x2f, 0x76,
	0x94, 0x60, 0x89, 0xda, 0x88, 0x19, 0x53, 0xc8, 0x86, 0x59, 0x1e, 0xd8, 0x67, 0x5b, 0x12, 0x54,
	0xf5, 0xff, 0xd5, 0xe0, 0xda, 0xc4, 0x1c, 0xa4, 0x32, 0xfe, 0x03, 0x58, 0x1c, 0xd8, 0xb1, 0xe0,
	0x1b, 0x8e, 0x71, 0x77, 0x48, 0x3c, 0x72, 0xf9, 0xf6, 0x2c, 0xa8, 0xda, 0x22, 0x15, 0xb1, 0x37,
	0x04, 0x0f, 0x1c, 0x8d, 0xbc, 0x58, 0xcd, 0x4e, 0x9a, 0x6d, 0xa9, 0xdc, 0x89, 0x45, 0x9a, 0xb9,
	0x7c, 0x91, 0x6e, 0x41, 0x5e, 0x6c, 0xa1, 0xb4, 0xea, 0x9c, 0xc5, 0x9d, 0x35, 0x31, 0x8b, 0xd5,
	0x95, 0x05, 0x86, 0x20, 0xc8, 0xa4, 0x41, 0x4a, 0xf2, 0x0e, 0x75, 0x82, 0xd8, 0xf6, 0x32, 0x3e,
	0x5a, 0xa4, 0x98, 0xec, 0x2b, 0x27, 0x1e, 0x69, 0xcb, 0x61, 0x3b, 0xd5, 0xdf, 0xc9, 0x01, 0xd0,
	0xf1, 0x47, 0x33, 0x73, 0x65, 0xd7, 0xaa, 0x4d, 0x1a, 0x93, 0xd3, 0x9d, 0x56, 0x86, 0x83, 0x94,
	0x62, 0x8f, 0xa1, 0x4c, 0xbf, 0xe8, 0xf8, 0xce, 0x48, 0xb3, 0xab, 0x14, 0x5a, 0x7a, 0x0e, 0x81,
	0x2a, 0x76, 0x48, 0x9b, 0x97, 0x71, 0xb4, 0xcd, 0x4f, 0x39, 0xda, 0xb2, 0x0f, 0x61, 0x31, 0x49,
	0xa4, 0x8e, 0x45, 0x8b, 0x6b, 0xb7, 0xb2, 0x70, 0xdb, 0xaa, 0x06, 0x2d, 0x7d, 0x94, 0x4d, 0x7e,
	0x9d, 0x03, 0x7c, 0x07, 0x16, 0x26, 0x40, 0xa1, 0x30, 0xad, 0x5d, 0xb3, 0xd6, 0x56, 0x1f, 0x3d,
	0xab, 0x5c, 0xa9, 0xfe, 0x35, 0x0d, 0x96, 0xda, 0xe3, 0xc1, 0x80, 0xc7, 0xa1, 0xdb, 0x95, 0x7e,
	0xba, 0x9f, 0x02, 0x58, 0xb6, 0x77, 0x2c, 0x78, 0x9e, 0xfe, 0x40, 0xd2, 0xcf, 0xb7, 0x8d, 0xa9,
	0x5a, 0x46, 0x4d, 0xd5, 0x98, 0x64, 0x86, 0x93, 0x86, 0xe2, 0x4c, 0x8e, 0x22, 0x24, 0xcf, 0x54,
	0x16, 0xbb, 0x0a, 0x79, 0x8b, 0xbc, 0xb7, 0x35, 0xe5, 0xbd, 0xbd, 0x04, 0x33, 0xa9, 0xd7, 0x76,
	0xce, 0x3d, 0xa9, 0xbe, 0x0d, 0xa5, 0x04, 0xb4, 0x98, 0x93, 0x14, 0x3c, 0x2e, 0x40, 0xa9, 0xd6,
	0x68, 0x3f, 0x58, 0x7b, 0xb6, 0xb9, 0xb1, 0x59, 0xd1, 0xaa, 0x0e, 0x5c, 0x97, 0x86, 0x23, 0x07,
	0xc8, 0x62, 0xaa, 0x8b, 0x79, 0x0f, 0xca, 0xc4, 0x73, 0x5a, 0x02, 0xe9, 0xc9, 0xbb, 0x59, 0xce,
	0x2c, 0xac, 0x09, 0x54, 0xbe, 0x19, 0x38, 0x9c, 0xbd, 0x0e, 0x85, 0xe1, 0xd8, 0x92, 0x86, 0x2d,
	0x19, 0xcb, 0xc3, 0xb9, 0xe1, 0xb8, 0x16, 0x1e, 0x47, 0xd5, 0x36, 0xbc, 0x32, 0xd5, 0x8b, 0xbc,
	0x3a, 0x68, 0x68, 0x15, 0x8f, 0x42, 0xdf, 0x3a, 0xb1, 0x3d, 0xe5, 0x14, 0x4d, 0x39, 0x2f, 0x6c,
	0x6f, 0xd2, 0xd4, 0x24, 0x37, 0x65, 0x6a, 0xf2, 0xa7, 0x33, 0x70, 0x23, 0x71, 0x26, 0x1e, 0x06,
	0x3e, 0xf7, 0xe3, 0xf6, 0x68, 0x30, 0xb0, 0xc3, 0x31, 0x7b, 0x92, 0xb5, 0x69, 0xdd, 0xa8, 0xe2,
	0xba, 0xbe, 0xc6, 0x6e, 0x77, 0xa6, 0x03, 0x01, 0xa9, 0x76, 0x2a, 0x72, 0xcf, 0x56, 0x2a, 0x3c,
	0x22, 0x59, 0x96, 0xa4, 0x1c, 0xd8, 0xdb, 0xa2, 0xe9, 0x94, 0x44, 0xe6, 0x3c, 0x90, 0x44, 0x5c,
	0xf4, 0x01, 0xe4, 0x23, 0x2e, 0xbd, 0x73, 0x4b, 0x29, 0xbe, 0xa9, 0xe9, 0xa1, 0x3d, 0x70, 0x82,
	0x81, 0x2e, 0x0a, 0xa5, 0x09, 0x8a, 0x1b, 0x4d, 0x0c, 0x43, 0x94, 0xb0, 0x06, 0x14, 0x06, 0x81,
	0x33, 0xf2, 0x24, 0x7d, 0x5f, 0x52, 0xf4, 0x07, 0x7b, 0x0b, 0x63, 0x34, 0x51, 0x91, 0x7c, 0xc6,
	0x54, 0xe4, 0x22, 0x77, 0x30, 0x0c, 0x42, 0x34, 0x17, 0x55, 0x6d, 0xd9, 0x0f, 0x29, 0xe2, 0x16,
	0x89, 0x98, 0x76, 0x11, 0xc4, 0x16, 0xab, 0x93, 0xbb, 0xd7, 0x2e, 0x49, 0xca, 0x6d, 0xf5, 0xee,
	0x1e, 0x79, 0xc1, 0x51, 0x22, 0x6d, 0x48, 0x06, 0x94, 0x08, 0x4a, 0x82, 0x53, 0xdf, 0x0b, 0x6c,
	0x47, 0x06, 0x60, 0x32, 0x28, 0x7e, 0xd7, 0x8f, 0x61, 0x4e, 0x3a, 0xaa, 0x17, 0x70, 0xd3, 0x2b,
	0xd3, 0x67, 0x3b, 0x8d, 0x13, 0xd3, 0xc9, 0x78, 0xda, 0xab, 0x11, 0x2b, 0x3f, 0x7b, 0xe9, 0xaa,
	0x4e, 0xb4, 0xe8, 0xe4, 0x7e, 0x1a, 0xa6, 0xec, 0xa1, 0xfa, 0x6f, 0xe5, 0x60, 0x69, 0xaa, 0x90,
	0x7d, 0x1f, 0x0a, 0x11, 0x6d, 0xb8, 0x3c, 0x9f, 0x37, 0x8d, 0x8b, 0xcf, 0x83, 0xf2, 0x75, 0x66,
	0xfa, 0x79, 0xd2, 0x79, 0x7a, 0x0b, 0x25, 0x44, 0xb6, 0x07, 0xc5, 0xd0, 0x3e, 0xb5, 0x52, 0x77,
	0x19, 0x15, 0x96, 0x86, 0x7d, 0x43, 0xac, 0x60, 0x68, 0x9f, 0xea, 0x9f, 0x37, 0x0f, 0xe8, 0xe9,
	0x98, 0xda, 0x89, 0x44, 0xfa, 0xa5, 0x9b, 0x85, 0xd0, 0x3e, 0x45, 0x5a, 0xe1, 0x97, 0x60, 0x9e,
	0x9c, 0x9a, 0xa4, 0xd4, 0x95, 0xf0, 0xf8, 0x9c, 0x81, 0xd2, 0xd8, 0x49, 0x29, 0x5d, 0x22, 0x76,
	0x9d, 0xda, 0x0b, 0xc1, 0xe5, 0x08, 0x18, 0x31, 0xea, 0x50, 0xcb, 0x08, 0x8e, 0x88, 0xec, 0xea,
	0x11, 0x2c, 0xec, 0x06, 0xb6, 0x93, 0x2e, 0xcd, 0xc7, 0x5f, 0x79, 0x69, 0x5e, 0xc7, 0xae, 0x97,
	0xd9, 0x8d, 0x4e, 0x76, 0x21, 0x30, 0xa4, 0x51, 0x60, 0x3b, 0xe9, 0x82, 0x54, 0xff, 0xc6, 0x6c,
	0x82, 0x2a, 0x36, 0x90, 0xea, 0x55, 0xa8, 0xe2, 0x9b, 0x00, 0x14, 0x0f, 0x0b, 0x39, 0xfd, 0x8b,
	0x30, 0x45, 0x5a, 0x2c, 0x2e, 0x3c, 0x99, 0x4e, 0x66, 0x2c, 0xbc, 0x4a, 0x98, 0x83, 0xd6, 0x52,
	0xca, 0x3c, 0x6e, 0xe6, 0x52, 0xf3, 0xb8, 0xfc, 0x94, 0x79, 0x1c, 0xfb, 0x13, 0x0d, 0x4a, 0x83,
	0x20, 0xe4, 0x56, 0xe2, 0xb0, 0x50, 0xdc, 0xf8, 0x2f, 0x49, 0x2e, 0xf8, 0xd7, 0x35, 0xf6, 0x53,
	0xad, 0x49, 0xd7, 0x54, 0x52, 0xea, 0x4e, 0xc0, 0xd1, 0x1b, 0x5a, 0xef, 0xb9, 0x82, 0xe6, 0x8b,
	0x5c, 0x87, 0xe3, 0x25, 0xf0, 0x8f, 0xbd, 0xc4, 0xe8, 0xff, 0x9e, 0x34, 0xc1, 0x17, 0x9c, 0x18,
	0xed, 0x6a, 0xc4, 0x63, 0x65, 0x9c, 0x6d, 0x1f, 0x63, 0x10, 0xb0, 0x88, 0xfb, 0x0e, 0xd9, 0xe5,
	0x4b, 0xdd, 0x73, 0xb7, 0x3f, 0xf2, 0x5f, 0x46, 0xa4, 0xa9, 0xa3, 0x43, 0x21, 0x1a, 0x8a, 0x9e,
	0x8e, 0xb8, 0x6e, 0x77, 0xe3, 0x91, 0xed, 0x79, 0xe3, 0x34, 0x70, 0x18, 0x05, 0x7d, 0x42, 0x89,
	0xa3, 0x1a, 0x3b, 0x02, 0x47, 0xad, 0xe1, 0x96, 0xed, 0x09, 0x84, 0x5f, 0x14, 0x45, 0x78, 0x7a,
	0xfe, 0x03, 0x6d, 0xc2, 0x8a, 0x6c, 0x66, 0xe3, 0x2f, 0xd2, 0x04, 0x7f, 0x5d, 0x63, 0x7f, 0x0e,
	0x05, 0x9f, 0xc3, 0x20, 0x72, 0xc9, 0x5e, 0xcb, 0x4f, 0x47, 0x95, 0x09, 0x95, 0x82, 0xa3, 0xd3,
	0xf9, 0x99, 0x1b, 0xc5, 0x91, 0x0a, 0x84, 0x33, 0x42, 0x1f, 0x02, 0xac, 0x2e, 0x26, 0xa3, 0xfc,
	0x0c, 0x30, 0x1a, 0x8e, 0xb8, 0x95, 0xd1, 0x28, 0xe4, 0xfa, 0x29, 0xd7, 0x1d, 0xd7, 0xc1, 0x79,
	0x78, 0x41, 0xc4, 0xd1, 0xd3, 0x23, 0x89, 0xfa, 0x26, 0x95, 0x7e, 0xa7, 0xf6, 0xd8, 0x48, 0xac,
	0xd9, 0x7e, 0x47, 0x83, 0xc5, 0x51, 0xc4, 0x2d, 0x69, 0x5b, 0xc9, 0xfd, 0x13, 0xc4, 0x0e, 0x89,
	0xf3, 0xb6, 0x87, 0x03, 0xef, 0x31, 0x27, 0x35, 0x60, 0x72, 0x53, 0xb4, 0x33, 0xc0, 0xb5, 0x4d,
	0x42, 0x71, 0x84, 0xa3, 0x64, 0x46, 0xa8, 0xfd, 0x3c, 0x8b, 0xd5, 0x30, 0x93, 0x4b, 0xa6, 0xbc,
	0x37, 0xa4, 0x3d, 0x5f, 0x6c, 0x87, 0xc7, 0x3c, 0x4e, 0xb4, 0x0c, 0xf3, 0xa3, 0x88, 0xd3, 0xc1,
	0x6f, 0xf8, 0x27, 0xd5, 0x3f, 0xa7, 0x25, 0xef, 0x90, 0x3a, 0xc2, 0xf2, 0x1d, 0x9a, 0x32, 0x92,
	0xd4, 0xbe, 0xc4, 0x48, 0x32, 0x77, 0x89, 0x91, 0xe4, 0xcc, 0xe5, 0x46, 0x92, 0xf9, 0xa9, 0x97,
	0xeb, 0x1f, 0xe5, 0xe0, 0x95, 0x7a, 0xe8, 0x9e, 0xf0, 0xb0, 0x49, 0xd3, 0xe8, 0x48, 0x41, 0x1c,
	0x7b, 0x0b, 0xe6, 0x1c, 0x2c, 0xb8, 0xe8, 0x1e, 0xc9, 0xa2, 0x9f, 0x75, 0x87, 0xde, 0x84, 0x79,
	0x8c, 0x78, 0x64, 0x85, 0x5c, 0x5c, 0x61, 0x69, 0xa5, 0x50, 0xc6, 0x3c, 0x13, 0xb3, 0xc4, 0x74,
	0x09, 0x16, 0x99, 0x48, 0x92, 0x0c, 0x16, 0x28, 0x4b, 0x7a, 0xa2, 0x5e, 0x93, 0x15, 0x1c, 0x37,
	0x1a, 0x7a, 0xf6, 0x98, 0x2a, 0x92, 0x2c, 0xf6, 0x2a, 0x15, 0xd5, 0xa9, 0x04, 0xeb, 0x0b, 0x80,
	0xfc, 0xc4, 0xed, 0xca, 0x31, 0x15, 0x25, 0x40, 0xcc, 0xc2, 0x41, 0x7d, 0x17, 0xf2, 0x68, 0x7d,
	0x51, 0x92, 0x91, 0x78, 0x2e, 0x9c, 0xbe, 0x61, 0x72, 0x9c, 0xc6, 0x5e, 0xe0, 0xf0, 0xf5, 0xb9,
	0x46, 0xab, 0xb6, 0xb1, 0xdb, 0x30, 0xb1, 0x5d, 0xf5, 0x01, 0x94, 0x33, 0x85, 0xac, 0x0c, 0x85,
	0x7a, 0xb3, 0x2d, 0xca, 0x49, 0x97, 0x4a, 0x75, 0xc9, 0x5c, 0x6c, 0x6b, 0xdf, 0xdc, 0x6c, 0x54,
	0x72, 0xd5, 0xdf, 0xce, 0xc3, 0x52, 0x9b, 0xfb, 0x8e, 0xa0, 0xdf, 0x15, 0xae, 0x3a, 0xfc, 0x12,
	0x7e, 0x43, 0x09, 0x1b, 0xd8, 0xbb, 0x4a, 0xe1, 0x8d, 0xb6, 0x74, 0xca, 0x52, 0x54, 0x5d, 0x8c,
	0x50, 0x3c, 0x70, 0xfc, 0x84, 0x67, 0x95, 0xdc, 0x63, 0x58, 0x54, 0xb2, 0xd2, 0x1e, 0x0a, 0x27,
	0xa5, 0xa5, 0xcc, 0x25, 0xd2, 0xd2, 0x75, 0x14, 0x5c, 0x6e, 0x3c, 0xc2, 0xfe, 0x0c, 0x76, 0x4f,
	0x89, 0xe6, 0xa8, 0xad, 0x24, 0xf8, 0xf4, 0x95, 0xda, 0x96, 0x25, 0xea, 0x89, 0xa3, 0x2d, 0x7f,
	0x3e, 0xb9, 0x6b, 0x98, 0x0b, 0xb2, 0xb6, 0x94, 0x82, 0x7e, 0x0f, 0xf2, 0xfd, 0x20, 0x52, 0x16,
	0xb1, 0x09, 0xa1, 0xb0, 0x93, 0xe8, 0xdd, 0x42, 0xbd, 0x79, 0x20, 0x40, 0x4e, 0x62, 0xac, 0x38,
	0x30, 0x4c, 0x6c, 0xc8, 0xb6, 0x21, 0x2f, 0x28, 0x07, 0xb2, 0x62, 0x5f, 0x9f, 0x7d, 0xb0, 0xf6,
	0xf0, 0xd1, 0xe3, 0x94, 0xee, 0x39, 0x08, 0xc2, 0x34, 0x7e, 0x83, 0x2f, 0x03, 0x60, 0x45, 0x31,
	0x47, 0x85, 0x07, 0xa1, 0x48, 0xc3, 0x44, 0x00, 0xac, 0x4d, 0x11, 0x85, 0x48, 0xf2, 0xa0, 0x42,
	0x26, 0x48, 0x62, 0xf3, 0x39, 0x1f, 0x33, 0xa3, 0xe6, 0xab, 0xb7, 0x5e, 0x60, 0xaa, 0x97, 0x7c,
	0xac, 0x1f, 0xbb, 0x27, 0x1c, 0x6f, 0x78, 0x9f, 0x9f, 0xa5, 0xfa, 0x7e, 0x12, 0xd2, 0x12, 0x59,
	0xdb, 0x81, 0x9c, 0x7b, 0x82, 0x07, 0x74, 0x7e, 0xa3, 0x8e, 0x30, 0xbf, 0x9b, 0x85, 0xf9, 0x40,
	0x6c, 0x95, 0x7b, 0x82, 0x9b, 0x54, 0x6b, 0xb4, 0xef, 0x91, 0x5d, 0xc4, 0x97, 0x82, 0x15, 0xb4,
	0xf1, 0x1f, 0x94, 0xa0, 0xb8, 0x1d, 0xf2, 0x21, 0x5a, 0x29, 0x6f, 0xc1, 0x1c, 0x61, 0x8d, 0xf3,
	0x27, 0xe2, 0x2d, 0xec, 0xf1, 0x0e, 0x7b, 0xb5, 0x93, 0x18, 0x3a, 0xa8, 0x57, 0x3e, 0xe2, 0x76,
	0x48, 0xe1, 0xbf, 0x64, 0x6b, 0x66, 0xc2, 0x3c, 0x89, 0xe6, 0x25, 0xa6, 0x4e, 0x0c, 0x8d, 0x92,
	0xc5, 0x44, 0xf3, 0x73, 0xd9, 0x52, 0xac, 0x9f, 0xb2, 0xdb, 0x24, 0x0b, 0x0a, 0x6c, 0x65, 0x98,
	0x65, 0x04, 0xb2, 0x4f, 0xd8, 0xf4, 0xd3, 0xc4, 0xe5, 0xf0, 0x02, 0x3e, 0x36, 0x11, 0xf2, 0xee,
	0x04, 0xa7, 0x7a, 0xcf, 0x0e, 0xf5, 0x15, 0x15, 0x6d, 0xf4, 0xae, 0xee, 0xfa, 0x2a, 0xaa, 0xa1,
	0x3c, 0xb6, 0xd4, 0xab, 0x91, 0x78, 0x2c, 0x72, 0x98, 0x0d, 0xf9, 0x31, 0x3f, 0x93, 0x34, 0xaa,
	0x12, 0x4d, 0x5d, 0x35, 0xf9, 0xf1, 0xc8, 0xb3, 0xc3, 0xc6, 0x59, 0x12, 0xf7, 0xea, 0x11, 0xd2,
	0x3b, 0x94, 0xad, 0xf3, 0x24, 0x7f, 0x8a, 0xea, 0x51, 0xd4, 0x9c, 0xea, 0x87, 0xa0, 0xb3, 0x0e,
	0x14, 0x3c, 0x34, 0x4e, 0xf3, 0xe4, 0xc1, 0x90, 0xea, 0x58, 0xb8, 0xba, 0x4b, 0xd9, 0x99, 0x8e,
	0xde, 0x68, 0x63, 0xdb, 0x94, 0x30, 0x96, 0x2d, 0x25, 0xc1, 0x6d, 0x98, 0x0a, 0x14, 0x3b, 0x95,
	0xd8, 0x84, 0x9c, 0xa9, 0x17, 0x0d, 0xb5, 0x97, 0x06, 0x62, 0x8e, 0x62, 0x6d, 0x77, 0xd7, 0xda,
	0x69, 0x76, 0xda, 0xca, 0xb3, 0x8b, 0xd5, 0x48, 0x43, 0x49, 0xef, 0x4a, 0xba, 0xfe, 0x51, 0x1c,
	0x0c, 0xbf, 0xa7, 0xb7, 0xe3, 0x60, 0x28, 0xe3, 0xbb, 0x05, 0x3e, 0xd7, 0xfb, 0x2e, 0x3e, 0x26,
	0x51, 0x3a, 0x16, 0xdb, 0xf3, 0xbe, 0x47, 0x68, 0x88, 0x7d, 0x0a, 0xf3, 0xc4, 0x48, 0x1f, 0xf1,
	0x5e, 0x10, 0x72, 0xe9, 0x82, 0x98, 0x7b, 0xb0, 0x9a, 0x90, 0x70, 0xef, 0x35, 0xb3, 0xae, 0x61,
	0x03, 0xf1, 0x5e, 0x12, 0x43, 0x4d, 0x2d, 0x70, 0x4f, 0xfa, 0x6e, 0x6c, 0x2c, 0x6b, 0x66, 0x19,
	0x0b, 0x36, 0x30, 0x9f, 0x1d, 0x02, 0x25, 0x2d, 0x1c, 0x09, 0x62, 0x50, 0x02, 0x2c, 0xfd, 0xc5,
	0xd8, 0xbb, 0x97, 0x01, 0x4e, 0x43, 0xd3, 0x49, 0xb8, 0xc4, 0xeb, 0xd7, 0x44, 0x36, 0xfb, 0x5b,
	0x1a, 0xc0, 0x59, 0x10, 0x5a, 0xae, 0x8f, 0x0c, 0x63, 0x49, 0x7a, 0xcd, 0x6d, 0xfc, 0x55, 0x22,
	0x20, 0xfe, 0x5d, 0x8d, 0xfd, 0xae, 0x46, 0x8b, 0x93, 0xac, 0x0a, 0xf9, 0x78, 0x88, 0x97, 0xdf,
	0xe7, 0x8a, 0x42, 0x4f, 0x68, 0x81, 0xc0, 0x8f, 0x69, 0x85, 0x7c, 0x3d, 0x18, 0x85, 0x7a, 0x70,
	0xea, 0xab, 0xa8, 0x2a, 0x92, 0xac, 0x90, 0x41, 0x37, 0x47, 0x18, 0x03, 0x30, 0x38, 0xea, 0x8d,
	0x22, 0x0c, 0xa0, 0x45, 0x14, 0x15, 0x2e, 0xa9, 0x64, 0x9f, 0x5c, 0x5f, 0xf5, 0x14, 0x07, 0xba,
	0x7d, 0x12, 0xb8, 0x8e, 0x68, 0xd4, 0x73, 0xd1, 0x91, 0x4f, 0x00, 0x8f, 0xb8, 0x77, 0xc2, 0x23,
	0x31, 0xa1, 0xe2, 0x59, 0x10, 0x36, 0x7d, 0x71, 0xdf, 0xff, 0xb6, 0x06, 0x65, 0x31, 0x9d, 0x60,
	0x14, 0xe3, 0x7c, 0xe0, 0x5f, 0xc9, 0xf9, 0x94, 0xce, 0x82, 0x70, 0x7f, 0x14, 0x3f, 0xe7, 0xe3,
	0xea, 0x5b, 0x90, 0xc7, 0x07, 0x6d, 0x1e, 0x92, 0x53, 0x2b, 0x63, 0x9d, 0x35, 0xcd, 0x76, 0x47,
	0xa4, 0x2b, 0x5a, 0xf5, 0xdf, 0x9f, 0x87, 0xe2, 0x96, 0xeb, 0x3b, 0x88, 0xae, 0xee, 0x67, 0x0c,
	0x41, 0xb5, 0x29, 0x43, 0xd0, 0xc4, 0x00, 0x3e, 0x97, 0x9a, 0x84, 0xb2, 0x17, 0x99, 0x37, 0x2f,
	0x37, 0x8d, 0xe1, 0xa4, 0x42, 0x9f, 0x82, 0x57, 0x1e, 0xd9, 0x11, 0x4f, 0x8c, 0x36, 0xa5, 0xa1,
	0xff, 0x49, 0x32, 0x4f, 0xd4, 0x91, 0x67, 0x1e, 0xbd, 0x3d, 0x69, 0x58, 0x7a, 0xec, 0x05, 0x47,
	0xa4, 0x13, 0x4d, 0x7c, 0x1b, 0x17, 0xb7, 0xbd, 0xe0, 0x28, 0x73, 0xb3, 0x97, 0x6b, 0xba, 0xa8,
	0x35, 0xf1, 0x96, 0x92, 0xb1, 0x01, 0x82, 0x13, 0xb5, 0xd9, 0xaf, 0x00, 0x20, 0x38, 0xc2, 0x4a,
	0xf4, 0x9c, 0xfd, 0x08, 0xe1, 0x7d, 0x7e, 0x11, 0x56, 0x7a, 0x48, 0x44, 0xac, 0x1d, 0x77, 0xfb,
	0x3c, 0x9a, 0x04, 0xaa, 0x2b, 0x2b, 0x7a, 0xca, 0x4f, 0x06, 0x69, 0x2c, 0x6b, 0xd5, 0xc5, 0x2d,
	0x59, 0x4b, 0x37, 0xf9, 0x71, 0xe3, 0xcc, 0xc4, 0x29, 0x98, 0x88, 0xaa, 0x2c, 0x00, 0x8c, 0x7d,
	0x97, 0x45, 0x8b, 0x92, 0x81, 0xbd, 0x68, 0x00, 0xef, 0x9c, 0x1b, 0x80, 0x32, 0xd0, 0xcb, 0x50,
	0xd2, 0x86, 0x59, 0x12, 0x30, 0xa9, 0x83, 0x1f, 0x28, 0xdd, 0x2d, 0x1a, 0x97, 0xcd, 0xaa, 0xe7,
	0xe1, 0xdb, 0xd8, 0xc7, 0xe3, 0x49, 0x45, 0xd7, 0xbb, 0x62, 0x9c, 0x09, 0x8d, 0x9e, 0x18, 0x59,
	0xaa, 0xbb, 0xee, 0x2a, 0xdb, 0x4d, 0xd2, 0xfd, 0xa2, 0xf3, 0xd3, 0x5f, 0xd2, 0xa0, 0x88, 0x3a,
	0x63, 0x57, 0x92, 0x74, 0xf9, 0xf5, 0x6b, 0xdf, 0x5a, 0x5b, 0x7b, 0xf8, 0xf0, 0xe9, 0xda, 0xea,
	0xc3, 0x27, 0xcf, 0x1e, 0x3f, 0x7a, 0xfa, 0xf4, 0xf1, 0xb3, 0xd5, 0xa7, 0x1b, 0x36, 0xf6, 0xf7,
	0xfd, 0xc9, 0xfe, 0x76, 0x2f, 0xee, 0x2f, 0x41, 0x5a, 0xb2, 0x43, 0x7d, 0x45, 0x46, 0xf2, 0xfc,
	0xa0, 0xcf, 0xed, 0x58, 0x77, 0xb8, 0x38, 0x2c, 0x72, 0xbe, 0x23, 0x5f, 0x90, 0x74, 0x11, 0xbf,
	0x6b, 0x98, 0x05, 0xee, 0x53, 0xb0, 0x0e, 0x03, 0xa0, 0x1b, 0x06, 0x51, 0x64, 0x39, 0xfc, 0x24,
	0x9a, 0x64, 0x04, 0x52, 0x5f, 0x8d, 0x12, 0x56, 0xa9, 0xf3, 0x93, 0x88, 0xdd, 0x85, 0xd2, 0xc0,
	0x3e, 0x93, 0x3e, 0x2b, 0x45, 0x19, 0xbb, 0xe0, 0x71, 0xd6, 0xf9, 0x63, 0x60, 0x9f, 0x91, 0xe7,
	0x49, 0x03, 0x66, 0xfa, 0xae, 0x8a, 0x18, 0x91, 0xb1, 0x44, 0x4b, 0xcc, 0x90, 0xef, 0xa4, 0x81,
	0xa5, 0x31, 0x4a, 0xaa, 0xeb, 0x67, 0xac, 0x06, 0x8d, 0xe5, 0x9c, 0x29, 0xda, 0xb3, 0x7b, 0x50,
	0xc4, 0x1e, 0x05, 0xf3, 0x88, 0x36, 0xaf, 0xeb, 0x85, 0x07, 0xab, 0x6b, 0x8f, 0x56, 0x57, 0x57,
	0x33, 0xbd, 0x16, 0x44, 0xaf, 0x82, 0x11, 0xfb, 0x08, 0x16, 0x06, 0xae, 0x6f, 0x25, 0x1e, 0x25,
	0x64, 0xda, 0x2a, 0x76, 0x31, 0x21, 0x15, 0xf6, 0xa4, 0xa7, 0x47, 0x2a, 0x54, 0x56, 0xaf, 0xb2,
	0x61, 0x96, 0x07, 0xae, 0xbf, 0x25, 0x5d, 0x3d, 0xd8, 0x17, 0xb0, 0xa0, 0x24, 0xd5, 0x04, 0x6b,
	0xfe, 0xf2, 0x3d, 0x93, 0x11, 0x31, 0xd9, 0xea, 0x79, 0x91, 0xb5, 0x82, 0x9e, 0x6e, 0x4d, 0x34,
	0x8e, 0x8c, 0x81, 0x7d, 0xe6, 0xfa, 0xf1, 0xdd, 0x54, 0x82, 0x8d, 0x5d, 0xfe, 0x6a, 0x0e, 0x4a,
	0x43, 0x1e, 0x0e, 0xac, 0x81, 0x1d, 0xbd, 0x44, 0x4b, 0x85, 0xfc, 0x7a, 0xfe, 0xd1, 0xea, 0xb7,
	0x1e, 0x6f, 0xfc, 0x4f, 0x84, 0x3f, 0xff, 0xbe, 0xc6, 0xfe, 0xae, 0x76, 0x90, 0xb1, 0x7c, 0xb6,
	0xa3, 0x97, 0x88, 0xcf, 0x86, 0x43, 0x22, 0x4c, 0x6d, 0xec, 0xf9, 0xbd, 0x28, 0x63, 0x1e, 0x2d,
	0x90, 0xa3, 0x40, 0x71, 0xb5, 0x56, 0x5d, 0x0f, 0x86, 0x02, 0xe9, 0x10, 0x75, 0xc0, 0x7d, 0xdd,
	0x0b, 0x82, 0x97, 0xa2, 0x88, 0xc2, 0x85, 0xe1, 0x5d, 0x49, 0xe2, 0xbd, 0xd2, 0x38, 0x02, 0x87,
	0x1b, 0x7a, 0x9d, 0x06, 0x2e, 0x58, 0xdf, 0xa7, 0x4f, 0x9f, 0x3e, 0x15, 0x53, 0x0a, 0xba, 0xb1,
	0xed, 0x61, 0xb8, 0x58, 0x81, 0x7d, 0xc7, 0xc1, 0x08, 0x8d, 0x37, 0x89, 0xb9, 0x43, 0x17, 0x7c,
	0xbc, 0xd9, 0x99, 0x31, 0x88, 0x2a, 0x5d, 0x8c, 0x17, 0x8e, 0x62, 0x1d, 0x74, 0xd7, 0x4e, 0xba,
	0x40, 0x63, 0x8d, 0xc1, 0x9e, 0x1d, 0xbd, 0x64, 0x87, 0x6a, 0x05, 0x04, 0xfd, 0x80, 0xd1, 0x7f,
	0x93, 0x70, 0xa3, 0xa9, 0x21, 0x38, 0xdd, 0xbe, 0x29, 0x0b, 0x70, 0x31, 0x82, 0x89, 0x29, 0x18,
	0x12, 0xac, 0x68, 0xf1, 0x21, 0xcc, 0x8c, 0x5c, 0x07, 0xad, 0x38, 0xf2, 0x29, 0x23, 0x81, 0x8e,
	0xbc, 0xcd, 0xfa, 0xb9, 0x96, 0xe9, 0x32, 0x1e, 0x36, 0xeb, 0x86, 0x29, 0x9a, 0xb2, 0x1a, 0xcc,
	0x1c, 0x4b, 0xb7, 0xe8, 0x7c, 0x8a, 0x96, 0xb7, 0xc3, 0x60, 0x34, 0xfc, 0x72, 0x10, 0xdb, 0x08,
	0xe2, 0xd8, 0x75, 0xaa, 0xbf, 0x9f, 0x83, 0xf9, 0x03, 0x41, 0x9e, 0x2b, 0x76, 0xe7, 0xd3, 0x2f,
	0x63, 0x77, 0x26, 0x85, 0x4e, 0xd3, 0xec, 0xce, 0x50, 0xc0, 0x49, 0xa8, 0x47, 0x34, 0xdc, 0x34,
	0x26, 0x90, 0x7f, 0x41, 0x72, 0xe4, 0x52, 0x52, 0x9a, 0xb1, 0x38, 0xc0, 0x17, 0x24, 0x21, 0x40,
	0x09, 0x50, 0x1c, 0xd0, 0xeb, 0x22, 0x11, 0x23, 0x11, 0x5b, 0xa6, 0x82, 0xc1, 0x86, 0xca, 0x50,
	0x94, 0xf0, 0xfe, 0xe7, 0x08, 0xac, 0x03, 0x80, 0xb3, 0xf9, 0x18, 0xad, 0x46, 0xb7, 0x6a, 0xaa,
	0x21, 0xd6, 0x4c, 0x17, 0x24, 0x83, 0x7a, 0x23, 0x85, 0x8b, 0xa8, 0x53, 0x19, 0x0e, 0x0e, 0x8d,
	0x4d, 0x65, 0x4f, 0x86, 0x34, 0x42, 0xad, 0xfe, 0x5a, 0x0e, 0x5e, 0xd9, 0xe6, 0x71, 0xc6, 0xb1,
	0x56, 0x2d, 0xda, 0xe0, 0x62, 0x34, 0xfd, 0x1c, 0xc7, 0xd4, 0x98, 0x44, 0x9b, 0x4f, 0x64, 0x23,
	0x34, 0xf3, 0x8e, 0x48, 0xbd, 0x88, 0x1e, 0x8a, 0x91, 0x8c, 0x7a, 0x91, 0x04, 0xb8, 0xfa, 0xae,
	0x9e, 0x02, 0x9d, 0x40, 0xdb, 0xe3, 0xaf, 0x86, 0xb5, 0x55, 0x90, 0x82, 0x89, 0xee, 0x1f, 0x7d,
	0xe5, 0xee, 0xbf, 0xa3, 0xab, 0x4e, 0x52, 0xec, 0x5c, 0xfd, 0x07, 0x1a, 0x5c, 0xdf, 0x0a, 0x42,
	0x3e, 0xb0, 0x7d, 0x5a, 0x07, 0x73, 0xe4, 0xf1, 0x36, 0x8f, 0x59, 0x13, 0x00, 0xd7, 0x96, 0x6e,
	0x09, 0x69, 0x2e, 0xde, 0x30, 0x2e, 0xaa, 0x6a, 0xec, 0x89, 0x7a, 0x48, 0x76, 0x97, 0xf6, 0x6a,
	0x9d, 0xcd, 0x1d, 0xab, 0xb6, 0xbb, 0x6b, 0x96, 0x06, 0x2a, 0x97, 0xad, 0xc0, 0x6c, 0x38, 0x4a,
	0x35, 0x77, 0xec, 0x3c, 0x14, 0x93, 0x2a, 0x54, 0x9f, 0x43, 0x29, 0x01, 0xc6, 0x5e, 0x87, 0x14,
	0x5c, 0xe5, 0xca, 0xed, 0xa5, 0x3f, 0xfd, 0xe9, 0x1f, 0xff, 0x54, 0xa3, 0x72, 0x41, 0x92, 0x65,
	0xca, 0x5b, 0x9f, 0x55, 0xb4, 0xa9, 0x72, 0x7f, 0x5c, 0xfd, 0x0b, 0x33, 0x70, 0xf5, 0x5c, 0x4f,
	0xec, 0x11, 0x94, 0x44, 0x5f, 0x59, 0x83, 0xa6, 0x9b, 0xe7, 0x07, 0x44, 0x5a, 0xba, 0xa2, 0xa8,
	0x89, 0x9a, 0x9e, 0xb7, 0x21, 0x17, 0x28, 0xc5, 0xc6, 0x75, 0x55, 0x7d, 0x3f, 0xca, 0xcc, 0x20,
	0x17, 0x44, 0xec, 0x7d, 0x98, 0xc5, 0xd0, 0x52, 0x52, 0xb4, 0x9b, 0xc0, 0xdd, 0x15, 0x99, 0xd9,
	0xd9, 0x62, 0x2d, 0x51, 0x3d, 0x25, 0x34, 0x32, 0xd5, 0x91, 0x54, 0x98, 0x58, 0x1c, 0xa4, 0x1d,
	0x1e, 0xa6, 0x31, 0x9d, 0xc8, 0xdd, 0xf4, 0x96, 0x6a, 0xd0, 0xa4, 0xec, 0x4c, 0x13, 0x55, 0xb3,
	0x1a, 0x4a, 0x4d, 0xee, 0xeb, 0xe4, 0xbe, 0x77, 0xfb, 0x06, 0xae, 0x52, 0x65, 0x9f, 0x90, 0xb4,
	0x60, 0x80, 0xc8, 0x7e, 0xf7, 0x06, 0xcc, 0xee, 0xd6, 0x36, 0x1a, 0xbb, 0x15, 0xed, 0x76, 0x19,
	0xab, 0xcc, 0xe2, 0xa0, 0x45, 0xbe, 0xf4, 0xbd, 0x53, 0xf9, 0x44, 0xc8, 0xdc, 0x86, 0x42, 0xb3,
	0xd5, 0x69, 0x6c, 0x37, 0xcc, 0xca, 0xcc, 0xed, 0x05, 0x2c, 0x29, 0xc8, 0x61, 0xac, 0x5f, 0x45,
	0x3b, 0x95, 0x32, 0x4b, 0x17, 0xba, 0xea, 0xc1, 0xb5, 0x0b, 0x16, 0x8d, 0xdd, 0x01, 0x08, 0x22,
	0xeb, 0x94, 0x4c, 0x8b, 0x71, 0x37, 0x8a, 0x66, 0x29, 0x88, 0xa4, 0xad, 0x31, 0xbb, 0x05, 0xc5,
	0x20, 0xb2, 0x3c, 0xd7, 0x1f, 0x9d, 0xe1, 0xda, 0x17, 0xcd, 0x42, 0x10, 0xa1, 0xe5, 0x31, 0x7b,
	0x15, 0x4a, 0x41, 0x64, 0x39, 0x68, 0x8c, 0x8c, 0xcb, 0x5d, 0x34, 0x8b, 0x41, 0x44, 0xc6, 0xc9,
	0xd5, 0xff, 0x34, 0x07, 0x37, 0x2e, 0x5e, 0x7a, 0xf6, 0x06, 0x94, 0x71, 0xf1, 0x51, 0x98, 0x45,
	0x5a, 0xda, 0x92, 0x09, 0x98, 0xd5, 0x12, 0x39, 0xec, 0xf9, 0xc4, 0xb9, 0x27, 0x19, 0xce, 0x9b,
	0x97, 0x6c, 0xe4, 0xcf, 0x3a, 0xf9, 0xd5, 0xff, 0x50, 0xfb, 0x97, 0x78, 0xa0, 0xd9, 0x7d, 0x60,
	0xf5, 0xfd, 0x46, 0xdb, 0x6a, 0xed, 0x77, 0xac, 0x14, 0x50, 0xee, 0xf6, 0x4d, 0xac, 0x78, 0xb5,
	0x1e, 0xf0, 0xc8, 0x7f, 0x2f, 0x56, 0x6f, 0x84, 0xe7, 0x5d, 0xd4, 0xa0, 0xf5, 0x59, 0x65, 0xe6,
	0x92, 0x06, 0xfe, 0xb8, 0xfa, 0x57, 0xd2, 0x85, 0x9b, 0x3a, 0x84, 0xec, 0x15, 0xe9, 0x91, 0x8d,
	0xfa, 0xb4, 0x75, 0xed, 0xbe, 0x74, 0xca, 0xee, 0xc0, 0xa2, 0xad, 0xcc, 0xe3, 0x33, 0x11, 0xed,
	0x12, 0xff, 0xa3, 0x85, 0xda, 0xd6, 0xd6, 0xa3, 0xc4, 0x80, 0x1e, 0x0d, 0xee, 0xd1, 0x3d, 0x2b,
	0x69, 0x84, 0xda, 0x38, 0x73, 0x21, 0x49, 0xa3, 0x2c, 0xf1, 0xf7, 0x34, 0x58, 0x4a, 0xc1, 0x66,
	0xd9, 0x81, 0x13, 0x84, 0x3b, 0xbc, 0x88, 0x1a, 0xff, 0x3e, 0x89, 0xf9, 0x23, 0x8e, 0x9e, 0xba,
	0x89, 0xcb, 0xb2, 0xe0, 0xf1, 0x7a, 0x6e, 0x98, 0x04, 0xd0, 0xe7, 0x69, 0xdf, 0xef, 0x45, 0x82,
	0x73, 0x5b, 0xb9, 0x3b, 0x25, 0x20, 0x9a, 0xa0, 0xe8, 0xb1, 0x73, 0xc3, 0x4c, 0x67, 0x89, 0x0b,
	0x53, 0xfd, 0xb7, 0x73, 0xb0, 0x7c, 0xd9, 0xed, 0xfb, 0xb3, 0x5d, 0xab, 0x06, 0x14, 0x89, 0xe4,
	0x0a, 0x42, 0xa9, 0x54, 0xaf, 0x5e, 0x8a, 0x17, 0x8c, 0x7d, 0x59, 0x73, 0x7d, 0xb6, 0xf1, 0xf1,
	0x61, 0x6d, 0xd7, 0x4c, 0x9a, 0xa6, 0x31, 0xef, 0x28, 0x94, 0x05, 0x25, 0xaa, 0x4f, 0xa0, 0xa8,
	0x9a, 0x60, 0x70, 0x13, 0xd1, 0x88, 0x98, 0xd3, 0xdd, 0x46, 0xbb, 0x6d, 0x75, 0x76, 0x6a, 0xad,
	0x8a, 0xc6, 0x2a, 0x30, 0xbf, 0x6d, 0x36, 0x6a, 0x9d, 0x86, 0x49, 0x39, 0xb9, 0xea, 0xdf, 0xd7,
	0x12, 0xdc, 0x2b, 0xfa, 0xad, 0x91, 0xef, 0xc8, 0x44, 0xe4, 0x43, 0x6d, 0x2a, 0xf2, 0x21, 0xc5,
	0xad, 0x39, 0x99, 0xd4, 0x1e, 0x63, 0x96, 0x68, 0xd7, 0x1f, 0xa9, 0x80, 0x83, 0x32, 0xb6, 0x96,
	0xc8, 0xc0, 0x76, 0x3b, 0x50, 0xc0, 0x42, 0x57, 0xe9, 0x5a, 0x95, 0x81, 0x7a, 0x26, 0xb0, 0x12,
	0xfa, 0x21, 0xa4, 0x81, 0x94, 0xfa, 0xf4, 0x49, 0x01, 0x7a, 0x8e, 0x0d, 0x73, 0x4e, 0xa4, 0x9b,
	0x0e, 0x7b, 0x13, 0xe6, 0xa5, 0xca, 0x82, 0xf4, 0x4c, 0x14, 0xc9, 0x42, 0x86, 0x88, 0xa0, 0x40,
	0x0c, 0xff, 0x49, 0x0e, 0xca, 0x99, 0x79, 0xb1, 0x0f, 0x60, 0x49, 0x36, 0x41, 0x5c, 0x17, 0xf1,
	0x58, 0x2a, 0x42, 0x5f, 0xb9, 0xf0, 0xa9, 0x54, 0x31, 0x10, 0xd5, 0x23, 0x7b, 0x0f, 0x0a, 0xf4,
	0x35, 0x0c, 0x52, 0x77, 0x65, 0xde, 0xc6, 0x74, 0xd5, 0x4c, 0x55, 0x85, 0x7d, 0x24, 0x23, 0x1a,
	0x49, 0x75, 0x42, 0xfe, 0x67, 0xc6, 0x11, 0x12, 0x63, 0x9a, 0x8c, 0x23, 0xa4, 0x00, 0x08, 0x58,
	0xca, 0xa4, 0x73, 0xf6, 0x6b, 0xc0, 0xca, 0x1a, 0x73, 0x2a, 0x00, 0x4c, 0x87, 0x72, 0x36, 0x0e,
	0x23, 0xa9, 0x12, 0xb2, 0x59, 0xd5, 0x9f, 0x40, 0x69, 0x67, 0xe4, 0xc7, 0x8d, 0x30, 0x0c, 0xc2,
	0xaf, 0x1d, 0xec, 0x56, 0xa0, 0xec, 0xe0, 0x78, 0x32, 0x6a, 0xb6, 0x09, 0x5e, 0x70, 0x7c, 0x61,
	0x08, 0xd8, 0x99, 0xe9, 0x10, 0xb0, 0xff, 0x54, 0x83, 0xc2, 0x96, 0x17, 0x9c, 0xee, 0x06, 0xc7,
	0xff, 0xf2, 0xbb, 0xae, 0xc3, 0xcc, 0x28, 0x94, 0x0e, 0x38, 0xc9, 0x47, 0x4b, 0x94, 0xa7, 0x6a,
	0xb5, 0x9d, 0x7e, 0xc6, 0x02, 0x55, 0xed, 0xc7, 0xdc, 0x17, 0x77, 0x89, 0x93, 0x10, 0xde, 0x0b,
	0x8e, 0x51, 0x8b, 0xee, 0xb3, 0xdd, 0xec, 0xbd, 0x98, 0x38, 0xc4, 0xec, 0xbd, 0x9d, 0xd1, 0xc0,
	0xf6, 0x75, 0x65, 0x45, 0x3d, 0x19, 0xb9, 0x22, 0xfd, 0x4c, 0x86, 0x91, 0x5e, 0xa4, 0xea, 0x1f,
	0x6b, 0x4a, 0x4f, 0x6e, 0x72, 0x8a, 0x56, 0x1f, 0xfd, 0x19, 0x04, 0x18, 0x5e, 0xa1, 0x0f, 0xc5,
	0x8c, 0x70, 0xa1, 0x66, 0xce, 0x47, 0x6a, 0x2a, 0x62, 0xa4, 0x26, 0xb1, 0x66, 0x17, 0x87, 0x6a,
	0xca, 0x5f, 0x1c, 0xaa, 0xa9, 0xfa, 0x0c, 0x16, 0x91, 0x34, 0xdf, 0x71, 0xa3, 0x18, 0x2d, 0xe6,
	0xd9, 0xbb, 0x90, 0x3f, 0x72, 0x33, 0x37, 0x66, 0xb2, 0x78, 0xc3, 0xf5, 0x4d, 0x2c, 0xaf, 0xee,
	0xc1, 0xd5, 0x73, 0x45, 0xec, 0x5d, 0x58, 0x0a, 0x6d, 0xff, 0x98, 0x5b, 0x82, 0xef, 0x26, 0x84,
	0x47, 0xf1, 0x8d, 0x16, 0x30, 0x7b, 0xcf, 0x3e, 0x23, 0x9f, 0xb3, 0x0a, 0xcc, 0xf8, 0xa3, 0x81,
	0x34, 0xdb, 0x13, 0x3f, 0xab, 0x67, 0x30, 0x6f, 0x92, 0x97, 0x07, 0xc5, 0xe0, 0x79, 0x1f, 0x4a,
	0x7d, 0x05, 0x39, 0x89, 0xc0, 0x32, 0xd9, 0xa1, 0x99, 0xd6, 0x38, 0x0f, 0x50, 0xe4, 0x44, 0x23,
	0x32, 0x03, 0xd0, 0x4c, 0xf1, 0x13, 0xdd, 0x7e, 0x47, 0x03, 0x2b, 0xfa, 0x02, 0x57, 0x43, 0x33,
	0x67, 0xa3, 0xd1, 0xa0, 0xfd, 0x45, 0xf5, 0x2f, 0xe4, 0xe0, 0xfa, 0xd4, 0x86, 0xd2, 0x10, 0x1e,
	0xa2, 0x9e, 0x95, 0x42, 0x35, 0x21, 0xf9, 0x2f, 0xc7, 0xb1, 0x60, 0x64, 0x47, 0x8a, 0x1a, 0xd0,
	0x50, 0x6c, 0x05, 0x36, 0x7a, 0x0a, 0x95, 0x4c, 0xec, 0x26, 0x6a, 0x96, 0xbb, 0xa8, 0xd9, 0x62,
	0x12, 0xcb, 0x89, 0x1a, 0x6e, 0xc1, 0xf2, 0xf9, 0x7d, 0x93, 0x00, 0x66, 0x2e, 0x02, 0xf0, 0xca,
	0xf4, 0x66, 0x12, 0x9c, 0x6f, 0x43, 0xe5, 0x34, 0x08, 0xa3, 0xd8, 0x1a, 0xf2, 0xb0, 0x17, 0x84,
	0x03, 0x1e, 0x92, 0x91, 0x7b, 0x79, 0xad, 0x62, 0x4c, 0x4d, 0xd3, 0x5c, 0xc2, 0x9a, 0x07, 0x49,
	0xc5, 0xea, 0xff, 0x92, 0x83, 0xa2, 0x12, 0x75, 0xb2, 0x95, 0x04, 0x61, 0x53, 0xcc, 0x32, 0x2d,
	0xfb, 0x74, 0x48, 0xbc, 0x4d, 0x51, 0xbb, 0x5e, 0x81, 0x7c, 0xf4, 0xd2, 0xa5, 0x68, 0xc4, 0x18,
	0x32, 0x0e, 0x93, 0xec, 0x55, 0x98, 0x23, 0xc5, 0x16, 0x69, 0x48, 0xd7, 0x67, 0x1e, 0xac, 0xae,
	0x9a, 0x32, 0x8b, 0x19, 0x93, 0x41, 0xed, 0x96, 0x12, 0x11, 0xeb, 0x25, 0x81, 0xed, 0x7e, 0x4f,
	0x83, 0x4a, 0x34, 0x8a, 0x86, 0xdc, 0x77, 0xb8, 0x63, 0x11, 0xd2, 0x96, 0xc8, 0x35, 0xc6, 0xab,
	0xe3, 0x33, 0x2f, 0xeb, 0x17, 0xec, 0xeb, 0x4a, 0x3e, 0x2b, 0x85, 0x23, 0x13, 0x1f, 0x25, 0xbb,
	0x27, 0xe8, 0x96, 0x28, 0x56, 0xfa, 0x02, 0xe9, 0x16, 0x24, 0x3f, 0x58, 0xe6, 0xa2, 0xd3, 0x0f,
	0x69, 0x5f, 0xe8, 0x4b, 0x34, 0x2f, 0xf9, 0x30, 0x9e, 0xf6, 0xc0, 0x5d, 0x4a, 0x46, 0x43, 0x2f,
	0x49, 0xb5, 0x7a, 0x61, 0x10, 0xb3, 0x79, 0x28, 0x6e, 0x35, 0x5b, 0xcd, 0xf6, 0x4e, 0xa3, 0x5e,
	0xd1, 0xaa, 0x3f, 0x80, 0xeb, 0x34, 0x4f, 0x8a, 0xc3, 0x9f, 0xa8, 0xc7, 0x5f, 0x87, 0xbc, 0x98,
	0xa6, 0x5c, 0xe3, 0xac, 0xdb, 0x27, 0xe6, 0x7f, 0xd5, 0xe0, 0x04, 0x7f, 0x33, 0x07, 0xf3, 0x13,
	0xf1, 0x93, 0x59, 0xc6, 0xf5, 0xb1, 0x24, 0xfd, 0x1c, 0x3f, 0x81, 0x42, 0x34, 0xca, 0x78, 0x86,
	0xaa, 0x88, 0x35, 0x09, 0x66, 0x7d, 0x9f, 0x42, 0x3a, 0x63, 0x15, 0xb9, 0x0c, 0xe7, 0x63, 0xdc,
	0x8b, 0x35, 0x3e, 0x0a, 0x46, 0x64, 0xd1, 0x83, 0x55, 0xd9, 0x32, 0x14, 0x14, 0x2e, 0x97, 0x6e,
	0x4c, 0x32, 0xc9, 0x7e, 0x98, 0x7c, 0x38, 0x84, 0xf0, 0xef, 0x16, 0xf6, 0xf8, 0x61, 0xd2, 0xe3,
	0x13, 0xf4, 0xcd, 0x8a, 0x78, 0x48, 0x8a, 0xa1, 0xf0, 0xc4, 0xed, 0x2a, 0xa3, 0x9f, 0x2c, 0x56,
	0x9f, 0x1a, 0x43, 0xfa, 0xbd, 0x90, 0xf6, 0xf9, 0x70, 0x60, 0xd2, 0x30, 0x79, 0xf2, 0xc5, 0xd5,
	0x3b, 0x97, 0x86, 0x93, 0xb7, 0x1d, 0x67, 0x32, 0xa4, 0x7a, 0xf5, 0x7f, 0xcd, 0x01, 0xdb, 0xf6,
	0x82, 0x23, 0xdb, 0x9b, 0x58, 0xd2, 0x7b, 0x13, 0xde, 0xa4, 0xcb, 0xc6, 0xf9, 0x2a, 0x59, 0xa7,
	0xd2, 0x1b, 0x30, 0x47, 0x5f, 0x7b, 0x94, 0xcf, 0x9b, 0x4c, 0x91, 0xcb, 0x17, 0x05, 0x9c, 0x4d,
	0x5c, 0xbe, 0x30, 0x29, 0xb6, 0x0c, 0xfd, 0xe5, 0xc9, 0xdf, 0x0b, 0x7f, 0xb3, 0x1f, 0x40, 0x29,
	0xea, 0x07, 0xa7, 0x56, 0x2f, 0x0c, 0x06, 0x72, 0x7e, 0x4a, 0x70, 0x3e, 0x31, 0xbf, 0x6f, 0xb6,
	0x26, 0xa6, 0xa5, 0x34, 0xa9, 0xfd, 0xe0, 0xd4, 0x3f, 0x2f, 0xd9, 0x2e, 0x8a, 0xfc, 0xad, 0x30,
	0x18, 0xb0, 0x5d, 0x28, 0x3a, 0x23, 0x12, 0x2b, 0x4a, 0x17, 0x14, 0x45, 0xaf, 0x14, 0xeb, 0x32,
	0x9f, 0xbd, 0xae, 0x7e, 0x25, 0x46, 0x6c, 0x93, 0x5b, 0x91, 0x40, 0x48, 0xcc, 0x9b, 0xd1, 0x7d,
	0x68, 0x6b, 0x9f, 0xbe, 0x31, 0xf1, 0x49, 0xcd, 0xc4, 0x0b, 0x31, 0x11, 0x02, 0xdb, 0x84, 0x57,
	0xce, 0xaf, 0x9e, 0xa0, 0xdc, 0xbe, 0x05, 0x0b, 0x59, 0xe8, 0xca, 0x1d, 0xfa, 0xda, 0x05, 0x8b,
	0x6d, 0x4e, 0xd6, 0xac, 0xfe, 0x86, 0x06, 0x95, 0xe9, 0xe0, 0xc5, 0xec, 0x63, 0x98, 0x57, 0xd1,
	0x8a, 0xf1, 0x33, 0x68, 0x5a, 0x56, 0x8a, 0x38, 0xb9, 0x84, 0xb7, 0x26, 0x3e, 0x83, 0xe6, 0x46,
	0x99, 0x98, 0xc6, 0x65, 0x05, 0xa3, 0x76, 0xcc, 0x93, 0xa8, 0x9e, 0xb9, 0x4c, 0x54, 0x4f, 0x65,
	0xb0, 0x3b, 0x93, 0x1a, 0xec, 0x56, 0xff, 0xbc, 0x06, 0x57, 0x05, 0x9f, 0x41, 0x6e, 0x1a, 0xca,
	0x7e, 0xf2, 0xa2, 0x7b, 0xf9, 0x5d, 0xa2, 0x76, 0x26, 0xec, 0x22, 0x93, 0x1b, 0xf2, 0xda, 0x44,
	0x10, 0x79, 0x37, 0x22, 0xde, 0x85, 0x5c, 0x41, 0x24, 0x9d, 0xa3, 0x70, 0xc8, 0xcc, 0xc5, 0x38,
	0xa4, 0xfa, 0xfb, 0x73, 0x00, 0xb5, 0x91, 0xe3, 0xc6, 0x8d, 0x13, 0x71, 0xce, 0xd2, 0xb0, 0xdc,
	0xb3, 0x18, 0xe9, 0x96, 0xc9, 0x8f, 0x85, 0xca, 0x09, 0xe1, 0x17, 0x42, 0x1f, 0xc2, 0x9c, 0xc4,
	0xb4, 0x33, 0x32, 0x30, 0x49, 0x0a, 0xc0, 0x20, 0xb4, 0xb7, 0xae, 0xa2, 0x9c, 0x9b, 0xb2, 0xea,
	0x24, 0x1f, 0x92, 0x9f, 0xe2, 0x43, 0x54, 0x61, 0xe6, 0xfb, 0x8d, 0x58, 0x58, 0x0b, 0x8f, 0x23,
	0xb6, 0x0f, 0x73, 0x84, 0x5d, 0xa5, 0x49, 0xe5, 0x85, 0x1f, 0x80, 0xa3, 0x1a, 0xf7, 0xb2, 0x5f,
	0xbb, 0xa3, 0x0b, 0x3c, 0x1c, 0x7a, 0x18, 0x26, 0x23, 0x30, 0x4c, 0x09, 0x86, 0x7d, 0x94, 0xc5,
	0x0b, 0xe4, 0xf5, 0xa4, 0x16, 0x76, 0x62, 0xd3, 0x6f, 0x22, 0x5e, 0xa0, 0x0f, 0x6c, 0x4c, 0x50,
	0xf4, 0x99, 0x00, 0xf8, 0x53, 0x74, 0x78, 0xf1, 0x1c, 0x1d, 0xce, 0x3e, 0xa6, 0x0d, 0x2c, 0x65,
	0xe3, 0xa1, 0x25, 0x63, 0xbf, 0x4f, 0x4a, 0x7e, 0x8f, 0x9f, 0xd8, 0x7e, 0x8c, 0x3c, 0xd2, 0x7d,
	0x31, 0xef, 0xfb, 0xdd, 0x30, 0xf0, 0xf5, 0x51, 0xe8, 0xa7, 0x4a, 0x79, 0x1c, 0x06, 0xed, 0x69,
	0xf5, 0x9f, 0xe7, 0x60, 0x4e, 0xb2, 0x77, 0x13, 0xf1, 0xe4, 0xe7, 0xa1, 0x68, 0x1e, 0xb6, 0xac,
	0xad, 0xdd, 0xfd, 0x4f, 0x2a, 0x1a, 0x7b, 0x0f, 0xde, 0x92, 0x5f, 0x66, 0xa9, 0x1d, 0x1c, 0x98,
	0xfb, 0x2f, 0x6a, 0xbb, 0xd6, 0x86, 0xd9, 0xa8, 0x3d, 0xb7, 0xb6, 0x77, 0x6b, 0xed, 0x76, 0xf2,
	0xf5, 0x9d, 0x1c, 0xbb, 0x05, 0xaf, 0x4c, 0x57, 0xdc, 0x36, 0x6b, 0xad, 0x4e, 0x65, 0x86, 0xbd,
	0x0a, 0x37, 0xa7, 0x8b, 0x54, 0xbb, 0x3c, 0xbb, 0x09, 0xd7, 0x36, 0xcd, 0xfd, 0xd6, 0x74, 0xab,
	0x59, 0x04, 0x38, 0x51, 0xa0, 0xda, 0xcc, 0x89, 0x36, 0x3b, 0x87, 0xe7, 0x7b, 0x2a, 0x88, 0x36,
	0x93, 0x05, 0xaa, 0x4d, 0x51, 0xb0, 0xba, 0x58, 0xb4, 0x89, 0xfc, 0x6e, 0x9d, 0xbe, 0x19, 0x83,
	0x39, 0x7b, 0xfb, 0xf5, 0xe6, 0x56, 0xb3, 0x51, 0xaf, 0x00, 0x5b, 0x82, 0x32, 0x66, 0x1d, 0xd4,
	0x0e, 0xdb, 0x8d, 0x7a, 0xa5, 0x9c, 0xb4, 0x6a, 0x77, 0x6a, 0xa6, 0x68, 0x35, 0x9f, 0xc9, 0xd9,
	0x3f, 0x38, 0x68, 0xd4, 0x2b, 0x0b, 0x18, 0x0d, 0x4b, 0x4e, 0xaf, 0x5e, 0xb7, 0x48, 0x18, 0xb7,
	0x88, 0xf3, 0xa2, 0x5c, 0xb3, 0xb1, 0xb7, 0xff, 0xa2, 0x21, 0x0b, 0x96, 0xaa, 0xff, 0xde, 0x1c,
	0x2c, 0x48, 0xc9, 0xb5, 0xbc, 0xb1, 0xb5, 0xf3, 0x34, 0xbe, 0xf4, 0xc3, 0xcf, 0x86, 0x3b, 0xbe,
	0xda, 0x49, 0x6c, 0x6c, 0xdf, 0x8b, 0xc4, 0x7d, 0xcd, 0xc6, 0x29, 0xfe, 0xa5, 0xf3, 0x5f, 0x6e,
	0xf8, 0x2e, 0x82, 0x78, 0x36, 0x79, 0x1a, 0xef, 0x26, 0xdf, 0xdb, 0x4d, 0x78, 0x91, 0xae, 0x8a,
	0x82, 0x91, 0x7c, 0x43, 0xa2, 0x1b, 0x84, 0x93, 0xe7, 0x73, 0x0b, 0xca, 0x92, 0xf2, 0xcc, 0x7c,
	0x83, 0x44, 0xd9, 0xbf, 0x26, 0x96, 0xef, 0xc9, 0xd8, 0xa4, 0xa7, 0xb3, 0xa8, 0x6b, 0x98, 0x40,
	0x29, 0x8c, 0xc0, 0xe8, 0x4c, 0x86, 0x6d, 0xcc, 0x5f, 0x16, 0xb6, 0x31, 0x65, 0xa2, 0x36, 0xec,
	0xc8, 0xed, 0x66, 0xfd, 0x3f, 0x33, 0x96, 0xbf, 0xdb, 0xa6, 0x99, 0x50, 0x4c, 0xd9, 0x38, 0x8f,
	0x9f, 0x4f, 0x79, 0xbf, 0xcf, 0x7e, 0x99, 0x4b, 0x22, 0x85, 0x11, 0x94, 0x36, 0x01, 0x3f, 0xdb,
	0x0b, 0xfe, 0x63, 0x80, 0xc4, 0x4b, 0x4f, 0xc5, 0xbb, 0x04, 0x23, 0x71, 0x88, 0x4b, 0x1d, 0x33,
	0x6a, 0x9e, 0x97, 0xfa, 0xf3, 0x25, 0xd6, 0x96, 0xca, 0xb4, 0x31, 0x03, 0x84, 0xed, 0xc0, 0x42,
	0xc4, 0x43, 0xd7, 0xf6, 0x2c, 0x49, 0xd1, 0x52, 0x60, 0xe3, 0x44, 0x27, 0xd9, 0xc6, 0x42, 0xbd,
	0x45, 0x76, 0x5c, 0xa8, 0xc8, 0xdf, 0xf9, 0x44, 0x2e, 0xee, 0x3c, 0xb5, 0xa4, 0x32, 0xf6, 0x39,
	0x5c, 0x93, 0xdb, 0x34, 0xb0, 0xfd, 0x51, 0xcf, 0x46, 0xa7, 0x69, 0xe5, 0xad, 0x9f, 0x18, 0xb2,
	0xcb, 0xd8, 0xb2, 0x7b, 0x99, 0x2a, 0x53, 0x50, 0x19, 0x41, 0xc9, 0xd6, 0x60, 0x35, 0x98, 0x15,
	0x68, 0x3b, 0x5a, 0x06, 0xe9, 0xe6, 0x72, 0x18, 0xf1, 0x30, 0x0d, 0x17, 0x81, 0xca, 0x32, 0xbb,
	0x8b, 0x31, 0x59, 0xcf, 0xcd, 0x96, 0x5a, 0xae, 0xdf, 0xfb, 0x87, 0x84, 0x1e, 0xdf, 0xae, 0xe9,
	0xd2, 0x2e, 0x79, 0xea, 0xa3, 0xbe, 0x13, 0x6e, 0xbe, 0x21, 0x54, 0x36, 0xc3, 0xc0, 0xff, 0x28,
	0x38, 0x32, 0x47, 0xbe, 0x34, 0xe4, 0x7c, 0x34, 0xf5, 0xfd, 0xae, 0x65, 0x63, 0xba, 0xca, 0x05,
	0x5f, 0x23, 0xcb, 0x7c, 0x37, 0x23, 0xf3, 0x61, 0xaa, 0x4e, 0x73, 0xaf, 0xb1, 0x7f, 0xd8, 0x99,
	0x24, 0x1a, 0x7e, 0x4b, 0x83, 0x57, 0xf6, 0xd0, 0x06, 0x7e, 0xcb, 0xe5, 0x9e, 0x53, 0xe7, 0x3d,
	0xd7, 0x47, 0xd3, 0x5c, 0x76, 0x07, 0x00, 0x55, 0xcf, 0x59, 0x09, 0x58, 0x09, 0x73, 0xf0, 0xe9,
	0xf9, 0x9e, 0x2a, 0xce, 0x44, 0xda, 0xd2, 0x8d, 0x0b, 0x41, 0x19, 0x98, 0x46, 0x32, 0x8e, 0x00,
	0xa0, 0x33, 0xcb, 0x1d, 0x28, 0x25, 0xf9, 0xac, 0x00, 0x33, 0xcd, 0x56, 0x87, 0x62, 0x80, 0xb4,
	0x3b, 0x66, 0x45, 0xab, 0xfe, 0x09, 0xc0, 0x22, 0x41, 0x4b, 0x3e, 0x06, 0x67, 0x40, 0xe1, 0xc4,
	0x0e, 0x33, 0x9e, 0x12, 0xd7, 0x71, 0x2f, 0x16, 0xd9, 0x3c, 0x55, 0x94, 0x01, 0x21, 0x54, 0x25,
	0xf6, 0x63, 0xfc, 0x42, 0x60, 0xe8, 0x76, 0xb3, 0x63, 0xbc, 0x6d, 0x4c, 0x42, 0x95, 0x49, 0x0c,
	0x8a, 0x94, 0x7c, 0x95, 0x41, 0xc2, 0xc3, 0x18, 0x8f, 0xf4, 0x55, 0x4f, 0x1e, 0xde, 0xd3, 0x8f,
	0xed, 0xd1, 0x31, 0x5a, 0x28, 0xca, 0x37, 0x05, 0x06, 0x49, 0x53, 0xf6, 0xe7, 0x73, 0x00, 0xc8,
	0xa2, 0x67, 0x3d, 0x86, 0x6e, 0x4d, 0xf7, 0x85, 0xa4, 0x0f, 0x76, 0xf5, 0xb7, 0x48, 0x81, 0xfd,
	0x47, 0x1a, 0xfb, 0x2f, 0x34, 0xd9, 0x1b, 0x85, 0x01, 0xa2, 0x3e, 0x5d, 0xf1, 0x26, 0xe3, 0xb7,
	0x1d, 0xee, 0xe9, 0x51, 0x8c, 0x84, 0xbc, 0xe3, 0x46, 0x24, 0x4a, 0x15, 0x2b, 0xaa, 0x1f, 0x90,
	0x2b, 0xb1, 0x4f, 0x31, 0x22, 0xec, 0x58, 0x8d, 0x52, 0xa7, 0x31, 0x45, 0xba, 0xed, 0x9d, 0xda,
	0x63, 0xe9, 0x4a, 0x8b, 0x21, 0x9a, 0x9a, 0xad, 0x0e, 0x9a, 0x82, 0xd3, 0xbb, 0x7c, 0x69, 0xb5,
	0x7a, 0xb3, 0xdd, 0x31, 0x9b, 0x1b, 0x87, 0x9d, 0xe6, 0x7e, 0xcb, 0xd0, 0xb7, 0x71, 0xca, 0xaa,
	0xb2, 0x74, 0xaf, 0x68, 0xb6, 0x3a, 0xf7, 0xf4, 0xad, 0xdd, 0xfd, 0x1a, 0xda, 0x7a, 0xb6, 0x3b,
	0xa6, 0x61, 0x96, 0x4e, 0xd4, 0xcc, 0xd8, 0x31, 0x94, 0xc9, 0x8d, 0xd7, 0x72, 0x78, 0x4f, 0x71,
	0xcb, 0x37, 0x2e, 0x3e, 0x19, 0xa9, 0xea, 0x79, 0x8b, 0x3c, 0x7f, 0x9d, 0xa4, 0x48, 0x7d, 0xb4,
	0x8b, 0x8c, 0x23, 0x69, 0x04, 0x86, 0x49, 0x67, 0x2e, 0xaa, 0xf3, 0x5e, 0xc4, 0x3e, 0x84, 0x92,
	0x13, 0x74, 0xe5, 0xc7, 0x40, 0x66, 0x27, 0x5d, 0x67, 0x32, 0x9f, 0x54, 0x51, 0x37, 0x4e, 0x81,
	0x48, 0x1b, 0xb1, 0x00, 0x66, 0x47, 0xbe, 0x2b, 0xa3, 0xb3, 0x2f, 0xae, 0xbd, 0x7a, 0xf1, 0xd1,
	0x38, 0x14, 0x55, 0xd2, 0xef, 0x7f, 0x6f, 0x05, 0xa1, 0xee, 0x8f, 0x06, 0x3c, 0x74, 0xbb, 0xb6,
	0x97, 0x2c, 0xcd, 0xfb, 0xfa, 0x80, 0xdb, 0x11, 0x7d, 0xde, 0x55, 0xc0, 0xa4, 0x4d, 0x71, 0x29,
	0x88, 0xb5, 0xc0, 0x07, 0x02, 0x48, 0xf5, 0xaf, 0xcf, 0x00, 0xa4, 0xe7, 0x8d, 0x1d, 0x42, 0x61,
	0x73, 0xff, 0xb0, 0xd5, 0x69, 0x98, 0x95, 0x2b, 0xb7, 0x77, 0x50, 0xd1, 0xb1, 0x21, 0xe5, 0xe0,
	0x12, 0xb0, 0xdc, 0x5b, 0xdb, 0x27, 0x2b, 0x02, 0x74, 0xd7, 0x90, 0x1f, 0x62, 0xe6, 0x0e, 0x6e,
	0xa7, 0xcf, 0x4f, 0x78, 0x98, 0x7e, 0x9e, 0x99, 0x3b, 0x06, 0xfb, 0x3b, 0x1a, 0xcc, 0x6e, 0xd7,
	0x0e, 0xb7, 0x1b, 0x15, 0xed, 0xf6, 0x1f, 0x6a, 0x08, 0xf6, 0x3f, 0xd3, 0x2e, 0xdc, 0x49, 0xee,
	0xc6, 0xf8, 0x31, 0x49, 0x5c, 0x8e, 0x7b, 0xba, 0x54, 0xc4, 0x89, 0x5d, 0xc5, 0xb3, 0x87, 0xee,
	0x01, 0x6e, 0x28, 0x4f, 0xa6, 0xf4, 0x40, 0xb5, 0x7d, 0x19, 0xd5, 0x4a, 0x2e, 0xac, 0x1b, 0xd2,
	0xc1, 0xb1, 0xc9, 0x5e, 0x77, 0x8c, 0xf5, 0x54, 0x50, 0xb4, 0x4c, 0x73, 0x15, 0x66, 0xc8, 0xf5,
	0xc6, 0xfa, 0xca, 0xc8, 0xf7, 0xdc, 0x97, 0x5c, 0x1d, 0xda, 0xe8, 0x9e, 0x64, 0x4f, 0x2f, 0x99,
	0xa8, 0xc1, 0xfe, 0x35, 0x0d, 0x66, 0x1b, 0x2f, 0x1a, 0xad, 0x4e, 0x25, 0x77, 0xfb, 0x0c, 0x67,
	0x14, 0x36, 0x26, 0xcf, 0x71, 0x98, 0xda, 0x74, 0xd2, 0x73, 0x4e, 0x07, 0x5d, 0xc5, 0x1b, 0xb5,
	0x45, 0x6f, 0x3c, 0xa4, 0xcf, 0x3f, 0x24, 0x41, 0x4d, 0x91, 0x75, 0x13, 0x93, 0x1c, 0xbf, 0x17,
	0x4a, 0x09, 0x86, 0xa3, 0xdb, 0x91, 0xee, 0xd9, 0x31, 0xf7, 0xbb, 0xe3, 0x89, 0x3b, 0x17, 0x19,
	0xd5, 0xbf, 0xa4, 0x41, 0x39, 0x73, 0x26, 0x04, 0x52, 0x6d, 0x37, 0x36, 0xf7, 0x5b, 0xf5, 0x36,
	0xc5, 0x02, 0xdd, 0x6b, 0xee, 0xee, 0x36, 0x55, 0x8e, 0x46, 0x39, 0x9b, 0xe6, 0xbe, 0xca, 0xc9,
	0x09, 0x62, 0xab, 0x55, 0x6b, 0x25, 0x19, 0x33, 0x82, 0xab, 0xdb, 0x68, 0x76, 0xda, 0x15, 0x10,
	0x38, 0x79, 0xe3, 0xb3, 0x4e, 0xa3, 0x5d, 0x29, 0xb3, 0x05, 0x28, 0x3d, 0x6f, 0xee, 0xee, 0x53,
	0x72, 0x5e, 0x24, 0xf7, 0x1a, 0xdb, 0x35, 0x4a, 0x2e, 0x88, 0xe4, 0x76, 0x53, 0x25, 0x17, 0xab,
	0xeb, 0x50, 0x4a, 0xb0, 0x4a, 0x8a, 0x46, 0x4b, 0x30, 0x8b, 0x17, 0xb4, 0xa2, 0x29, 0x8c, 0x9a,
	0x13, 0xc3, 0xc9, 0x5e, 0xee, 0xca, 0x4c, 0x75, 0x0b, 0x6e, 0xa1, 0x98, 0x0b, 0x3f, 0x42, 0x43,
	0x13, 0x8b, 0x12, 0x6c, 0x7b, 0x17, 0x0a, 0x72, 0x71, 0x25, 0xbf, 0xb8, 0x34, 0x75, 0x3d, 0x4c,
	0x55, 0x5e, 0xfd, 0xbf, 0x66, 0x60, 0xbe, 0x9e, 0x59, 0x2a, 0xf6, 0x9c, 0xc4, 0x85, 0x14, 0x27,
	0xfe, 0x5b, 0x78, 0x73, 0x1e, 0xb2, 0x07, 0xed, 0xd1, 0x00, 0xe3, 0xd1, 0x78, 0xe4, 0x49, 0x82,
	0xc7, 0x22, 0x92, 0xbb, 0x45, 0x31, 0xe1, 0xec, 0x49, 0x2c, 0x47, 0x92, 0xc6, 0x8f, 0x61, 0x36,
	0x13, 0xf8, 0x5c, 0xd9, 0x9f, 0xb1, 0x87, 0x9b, 0x6a, 0x17, 0xbf, 0x06, 0x40, 0x82, 0xc4, 0xfe,
	0x44, 0xcb, 0xc8, 0x65, 0x73, 0x13, 0xc8, 0xf8, 0x05, 0x01, 0x09, 0x7a, 0xfa, 0x68, 0x38, 0xe4,
	0xa1, 0x8e, 0xa2, 0x56, 0xfa, 0x8a, 0x72, 0x94, 0xed, 0x4c, 0x34, 0x57, 0xce, 0x1e, 0x93, 0xa8,
	0x39, 0xfd, 0xa0, 0xe1, 0x91, 0x2b, 0xc5, 0x06, 0x88, 0x5e, 0x6d, 0xdd, 0x0b, 0x4e, 0x27, 0x21,
	0x0a, 0x80, 0xef, 0x37, 0x7d, 0xc4, 0x79, 0x63, 0x6a, 0x89, 0x9f, 0x1b, 0x4c, 0x1a, 0xda, 0xdd,
	0x2e, 0x1f, 0xc6, 0xd3, 0x33, 0x3c, 0x72, 0x8f, 0x8f, 0x51, 0xfa, 0x80, 0x72, 0xb9, 0xe8, 0x3d,
	0xf5, 0xcd, 0x78, 0x84, 0x6c, 0x90, 0x48, 0x99, 0xfd, 0x00, 0xe6, 0xc5, 0x5f, 0xab, 0xcf, 0xdd,
	0xe3, 0x7e, 0x4c, 0x88, 0x38, 0x97, 0x86, 0x97, 0xda, 0xa1, 0xec, 0x73, 0x53, 0x52, 0x81, 0x7a,
	0xe4, 0xd4, 0x30, 0x8f, 0x4c, 0xd0, 0xcc, 0xb2, 0x48, 0xc8, 0x76, 0xe2, 0x2e, 0x5c, 0x4f, 0x0f,
	0x0f, 0xa2, 0x6f, 0x92, 0x0e, 0x4c, 0x12, 0x06, 0xda, 0xd7, 0x26, 0x0c, 0x28, 0x74, 0x62, 0x68,
	0xa5, 0x5f, 0xb5, 0x2a, 0x99, 0xc5, 0x28, 0x0e, 0x09, 0xfa, 0xab, 0x50, 0x72, 0xfd, 0x58, 0x16,
	0xce, 0xe0, 0xe7, 0xa2, 0x8a, 0xae, 0x1f, 0x63, 0x61, 0xf5, 0x2f, 0xe7, 0x60, 0x29, 0x1d, 0x13,
	0x35, 0x78, 0x36, 0xf1, 0x2e, 0x6b, 0x3f, 0xe3, 0x5d, 0xce, 0x3e, 0x64, 0x3f, 0xf7, 0x38, 0xd8,
	0x1b, 0x50, 0x46, 0xfc, 0x69, 0xa5, 0x5a, 0xca, 0x9c, 0x09, 0x98, 0x45, 0x15, 0xbe, 0x03, 0x2c,
	0x7b, 0x66, 0x64, 0xbd, 0x59, 0x29, 0x98, 0xce, 0x5e, 0x25, 0xf3, 0x6a, 0xb6, 0x22, 0xb5, 0x5e,
	0x87, 0x05, 0xf9, 0xc2, 0xd2, 0x79, 0x90, 0x51, 0x05, 0x5e, 0x31, 0x2e, 0xda, 0x0f, 0x73, 0x9e,
	0xea, 0xd2, 0xb9, 0xae, 0xfe, 0x4d, 0x0d, 0x96, 0x52, 0x01, 0x0a, 0xd9, 0x4d, 0x5c, 0xf4, 0x49,
	0x95, 0x6d, 0x98, 0x0d, 0x4e, 0x7d, 0x25, 0xc0, 0x48, 0x8d, 0xaf, 0x04, 0xd5, 0x9b, 0xf5, 0x49,
	0x45, 0x31, 0xe3, 0x69, 0x3f, 0x20, 0x89, 0x9f, 0xfc, 0x60, 0xe6, 0x11, 0xf7, 0x0c, 0x93, 0xda,
	0xb3, 0xcf, 0xb3, 0x6c, 0x1a, 0x7d, 0xec, 0x4e, 0x45, 0x49, 0x9d, 0xe0, 0x4b, 0xde, 0x9b, 0x64,
	0xd3, 0x12, 0x05, 0x38, 0x42, 0xbb, 0x44, 0xa6, 0xf8, 0x21, 0x5c, 0x9f, 0x9a, 0x4b, 0x84, 0xd1,
	0x4d, 0x56, 0x92, 0x8f, 0xa8, 0x69, 0x52, 0x56, 0x3f, 0x55, 0x2d, 0xf9, 0xac, 0xda, 0x07, 0x50,
	0x6a, 0x73, 0xfe, 0xb2, 0xe9, 0x3b, 0xfc, 0x8c, 0xad, 0x42, 0xb9, 0xdb, 0xe7, 0xdd, 0x97, 0x64,
	0x92, 0x24, 0xdb, 0x2e, 0x1a, 0x49, 0x85, 0x03, 0xdb, 0x0d, 0xcd, 0x6c, 0x95, 0x6a, 0x1b, 0x16,
	0x26, 0x4a, 0xd9, 0x9b, 0x82, 0x11, 0x73, 0xf8, 0x99, 0x95, 0xfd, 0x28, 0x93, 0xe0, 0xa7, 0x1c,
	0x7e, 0x26, 0x7d, 0x24, 0xde, 0x20, 0xcb, 0xf9, 0x09, 0xb7, 0x0b, 0xb2, 0x81, 0xa7, 0x0a, 0xa8,
	0x13, 0x3b, 0xe0, 0x61, 0x84, 0x7e, 0x2b, 0x5d, 0x8e, 0xdf, 0xb7, 0xfa, 0x8a, 0x81, 0x07, 0x7e,
	0x53, 0x03, 0x20, 0x21, 0xae, 0x95, 0x0a, 0xbf, 0xbe, 0xc0, 0xe5, 0x7e, 0x99, 0xc8, 0x4e, 0xec,
	0x43, 0xb3, 0x85, 0x6b, 0x1c, 0x3a, 0x3d, 0x49, 0x73, 0x8a, 0x27, 0x92, 0x5e, 0xcf, 0xc4, 0xbf,
	0x43, 0x54, 0xd0, 0x87, 0xe9, 0x30, 0x0c, 0x0a, 0xe9, 0x26, 0xcd, 0x5d, 0xda, 0x24, 0x55, 0xce,
	0x30, 0xb0, 0xf7, 0xf4, 0x4c, 0xa4, 0xd1, 0x12, 0x0d, 0xe2, 0x30, 0xf4, 0xab, 0xff, 0xb7, 0x06,
	0xac, 0xe1, 0x3b, 0x9d, 0x40, 0xfc, 0xc7, 0x23, 0xf9, 0x05, 0x48, 0xd6, 0x84, 0x42, 0x34, 0xc2,
	0xa8, 0xae, 0x64, 0x4a, 0xa3, 0xcc, 0x6c, 0x13, 0xd7, 0xd7, 0x4f, 0xfa, 0x1c, 0x69, 0x13, 0xf4,
	0x92, 0x53, 0x9f, 0x36, 0x92, 0x4d, 0x7a, 0x23, 0x0f, 0x05, 0xe5, 0x98, 0x60, 0xef, 0xc2, 0x92,
	0xa8, 0x60, 0x75, 0x3d, 0x3b, 0x8a, 0xb2, 0x5f, 0x2a, 0x5c, 0x10, 0xd9, 0x9b, 0x22, 0x17, 0x39,
	0x96, 0x4f, 0xce, 0x9f, 0x44, 0xf9, 0x34, 0x4d, 0x9e, 0xc4, 0xb7, 0x2f, 0x39, 0x89, 0xc9, 0x28,
	0xc2, 0xd1, 0xe4, 0xc7, 0x1c, 0x2b, 0x30, 0xe3, 0x05, 0xc7, 0x52, 0x38, 0x27, 0x7e, 0x56, 0x17,
	0x61, 0xbe, 0x31, 0x18, 0xc6, 0x63, 0xa9, 0x7a, 0xad, 0xfe, 0x8b, 0x3c, 0x2c, 0xb5, 0xda, 0xe6,
	0x6e, 0x36, 0xae, 0x99, 0x8a, 0xf9, 0xa2, 0xfd, 0xa2, 0x31, 0x5f, 0x72, 0x3f, 0x67, 0xcc, 0x97,
	0x0f, 0x60, 0xb6, 0x1b, 0x76, 0x1f, 0xae, 0x91, 0x3e, 0x29, 0x0d, 0x87, 0x2c, 0xa3, 0xc5, 0x6d,
	0x8e, 0xbb, 0x9e, 0xdb, 0xd5, 0x43, 0xee, 0x8c, 0x7c, 0xc7, 0x16, 0xd4, 0x10, 0x9e, 0x7c, 0xf1,
	0x86, 0x8a, 0x56, 0xec, 0x09, 0x94, 0x52, 0x5b, 0x60, 0xd2, 0xf1, 0xdf, 0x42, 0x10, 0xd7, 0xd8,
	0xd5, 0xb6, 0xfb, 0x13, 0x3e, 0x69, 0x57, 0x5e, 0x54, 0x21, 0xe3, 0x93, 0x76, 0xb8, 0x51, 0x44,
	0xb6, 0x27, 0xed, 0x5a, 0x19, 0xcc, 0x92, 0x69, 0x87, 0xdb, 0xd7, 0x81, 0xf9, 0x61, 0x18, 0x38,
	0xa3, 0x6e, 0x4c, 0x3e, 0xfe, 0x02, 0xe9, 0xe5, 0x53, 0xc4, 0xb4, 0x19, 0x38, 0x49, 0x53, 0x59,
	0x2f, 0x1b, 0x6d, 0x39, 0xd2, 0x87, 0x76, 0x28, 0xde, 0x5b, 0xc3, 0x2c, 0xcb, 0x62, 0x0c, 0x05,
	0xf0, 0x31, 0x2c, 0x06, 0x43, 0x4b, 0x29, 0x19, 0x05, 0xdc, 0xc2, 0xa4, 0x0b, 0xfb, 0xb4, 0xf5,
	0x59, 0x06, 0x68, 0x38, 0xf2, 0x29, 0x40, 0xf4, 0x7c, 0x30, 0x24, 0x11, 0x03, 0x82, 0xdc, 0x93,
	0x13, 0xc4, 0x07, 0xa7, 0x28, 0x1f, 0x9c, 0xa9, 0xdd, 0x37, 0xc4, 0xad, 0x46, 0x46, 0xf0, 0x15,
	0xec, 0x68, 0x89, 0x2d, 0xa8, 0x28, 0xd4, 0x99, 0x79, 0x23, 0x9f, 0x5c, 0x83, 0xa2, 0xaa, 0x8c,
	0xf4, 0xe3, 0xbe, 0xb9, 0x57, 0xdb, 0xb5, 0x30, 0x52, 0xfd, 0x15, 0xc6, 0x60, 0x71, 0xaf, 0xb6,
	0xdb, 0xdc, 0x6c, 0xee, 0x1f, 0xb6, 0x29, 0x0f, 0xc9, 0xce, 0xf6, 0x41, 0x63, 0xb3, 0xa9, 0x6a,
	0xe5, 0xaa, 0xab, 0x70, 0xe3, 0x80, 0xa3, 0x63, 0xc7, 0x96, 0x17, 0x9c, 0x76, 0xe4, 0x57, 0xa2,
	0xe4, 0xe7, 0x26, 0x43, 0x6e, 0x47, 0x32, 0x22, 0x0c, 0x06, 0x74, 0x13, 0xa9, 0xea, 0x06, 0x2c,
	0xd7, 0x47, 0x83, 0xe1, 0x01, 0xf9, 0x96, 0xec, 0xa1, 0xa3, 0x48, 0xe6, 0x2b, 0x21, 0xc3, 0x44,
	0xd6, 0x2d, 0x7e, 0xb2, 0xeb, 0x30, 0x3b, 0xb4, 0x47, 0x11, 0x97, 0x86, 0x6f, 0x94, 0xf8, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xcb, 0x62, 0x43, 0xe1, 0x8b, 0x00, 0x00,
}

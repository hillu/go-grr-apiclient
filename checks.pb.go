// Code generated by protoc-gen-go.
// source: checks.proto
// DO NOT EDIT!

package apiclient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SECTION: Defining checks.
// -------------------------
// Checks define a broad issue (e.g. system files with lax permissions).
// Methods define distinct cases where the issues is true (e.g. files with o+w,
//   files with g+w for many groups in xattrs).
// Probes define distinct ways of either detecting an issue, or detecting
//   aspects of an issue that need to be considered in combination.
// Filters define how host data should be processed to determine if an issue
//   exists.
type Match int32

const (
	// Quantifies how many results indicate a problem.
	Match_NONE Match = 0
	Match_ONE  Match = 1
	Match_ANY  Match = 2
	Match_ALL  Match = 3
	Match_SOME Match = 4
)

var Match_name = map[int32]string{
	0: "NONE",
	1: "ONE",
	2: "ANY",
	3: "ALL",
	4: "SOME",
}
var Match_value = map[string]int32{
	"NONE": 0,
	"ONE":  1,
	"ANY":  2,
	"ALL":  3,
	"SOME": 4,
}

func (x Match) Enum() *Match {
	p := new(Match)
	*p = x
	return p
}
func (x Match) String() string {
	return proto.EnumName(Match_name, int32(x))
}
func (x *Match) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Match_value, data, "Match")
	if err != nil {
		return err
	}
	*x = Match(value)
	return nil
}
func (Match) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type Probe_Mode int32

const (
	Probe_SERIAL   Probe_Mode = 0
	Probe_PARALLEL Probe_Mode = 1
)

var Probe_Mode_name = map[int32]string{
	0: "SERIAL",
	1: "PARALLEL",
}
var Probe_Mode_value = map[string]int32{
	"SERIAL":   0,
	"PARALLEL": 1,
}

func (x Probe_Mode) Enum() *Probe_Mode {
	p := new(Probe_Mode)
	*p = x
	return p
}
func (x Probe_Mode) String() string {
	return proto.EnumName(Probe_Mode_name, int32(x))
}
func (x *Probe_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Probe_Mode_value, data, "Probe_Mode")
	if err != nil {
		return err
	}
	*x = Probe_Mode(value)
	return nil
}
func (Probe_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 0} }

type Probe_ResultContext int32

const (
	Probe_UNKNOWN_RESULT_CONTEXT Probe_ResultContext = 0
	Probe_PARSER                 Probe_ResultContext = 1
	Probe_ANOMALY                Probe_ResultContext = 2
	Probe_RAW                    Probe_ResultContext = 3
)

var Probe_ResultContext_name = map[int32]string{
	0: "UNKNOWN_RESULT_CONTEXT",
	1: "PARSER",
	2: "ANOMALY",
	3: "RAW",
}
var Probe_ResultContext_value = map[string]int32{
	"UNKNOWN_RESULT_CONTEXT": 0,
	"PARSER":                 1,
	"ANOMALY":                2,
	"RAW":                    3,
}

func (x Probe_ResultContext) Enum() *Probe_ResultContext {
	p := new(Probe_ResultContext)
	*p = x
	return p
}
func (x Probe_ResultContext) String() string {
	return proto.EnumName(Probe_ResultContext_name, int32(x))
}
func (x *Probe_ResultContext) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Probe_ResultContext_value, data, "Probe_ResultContext")
	if err != nil {
		return err
	}
	*x = Probe_ResultContext(value)
	return nil
}
func (Probe_ResultContext) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 1} }

type Check struct {
	CheckId          *string   `protobuf:"bytes,1,opt,name=check_id,json=checkId" json:"check_id,omitempty"`
	Method           []*Method `protobuf:"bytes,2,rep,name=method" json:"method,omitempty"`
	Match            []Match   `protobuf:"varint,3,rep,name=match,enum=Match" json:"match,omitempty"`
	Target           *Target   `protobuf:"bytes,4,opt,name=target" json:"target,omitempty"`
	Hint             *Hint     `protobuf:"bytes,5,opt,name=hint" json:"hint,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Check) Reset()                    { *m = Check{} }
func (m *Check) String() string            { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()               {}
func (*Check) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Check) GetCheckId() string {
	if m != nil && m.CheckId != nil {
		return *m.CheckId
	}
	return ""
}

func (m *Check) GetMethod() []*Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *Check) GetMatch() []Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Check) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Check) GetHint() *Hint {
	if m != nil {
		return m.Hint
	}
	return nil
}

type Method struct {
	Probe            []*Probe `protobuf:"bytes,1,rep,name=probe" json:"probe,omitempty"`
	Match            []Match  `protobuf:"varint,2,rep,name=match,enum=Match" json:"match,omitempty"`
	Resource         []*Dict  `protobuf:"bytes,3,rep,name=resource" json:"resource,omitempty"`
	Target           *Target  `protobuf:"bytes,4,opt,name=target" json:"target,omitempty"`
	Hint             *Hint    `protobuf:"bytes,5,opt,name=hint" json:"hint,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Method) Reset()                    { *m = Method{} }
func (m *Method) String() string            { return proto.CompactTextString(m) }
func (*Method) ProtoMessage()               {}
func (*Method) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Method) GetProbe() []*Probe {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *Method) GetMatch() []Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Method) GetResource() []*Dict {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Method) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Method) GetHint() *Hint {
	if m != nil {
		return m.Hint
	}
	return nil
}

type Probe struct {
	Artifact         *string              `protobuf:"bytes,1,opt,name=artifact" json:"artifact,omitempty"`
	Parser           []string             `protobuf:"bytes,2,rep,name=parser" json:"parser,omitempty"`
	Mode             *Probe_Mode          `protobuf:"varint,3,opt,name=mode,enum=Probe_Mode,def=0" json:"mode,omitempty"`
	Baseline         []*Filter            `protobuf:"bytes,4,rep,name=baseline" json:"baseline,omitempty"`
	Filters          []*Filter            `protobuf:"bytes,5,rep,name=filters" json:"filters,omitempty"`
	Match            []Match              `protobuf:"varint,6,rep,name=match,enum=Match" json:"match,omitempty"`
	Target           *Target              `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
	Hint             *Hint                `protobuf:"bytes,8,opt,name=hint" json:"hint,omitempty"`
	ResultContext    *Probe_ResultContext `protobuf:"varint,9,opt,name=result_context,json=resultContext,enum=Probe_ResultContext,def=1" json:"result_context,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

const Default_Probe_Mode Probe_Mode = Probe_SERIAL
const Default_Probe_ResultContext Probe_ResultContext = Probe_PARSER

func (m *Probe) GetArtifact() string {
	if m != nil && m.Artifact != nil {
		return *m.Artifact
	}
	return ""
}

func (m *Probe) GetParser() []string {
	if m != nil {
		return m.Parser
	}
	return nil
}

func (m *Probe) GetMode() Probe_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Default_Probe_Mode
}

func (m *Probe) GetBaseline() []*Filter {
	if m != nil {
		return m.Baseline
	}
	return nil
}

func (m *Probe) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Probe) GetMatch() []Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Probe) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Probe) GetHint() *Hint {
	if m != nil {
		return m.Hint
	}
	return nil
}

func (m *Probe) GetResultContext() Probe_ResultContext {
	if m != nil && m.ResultContext != nil {
		return *m.ResultContext
	}
	return Default_Probe_ResultContext
}

type Filter struct {
	Type             *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Expression       *string `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
	Hint             *Hint   `protobuf:"bytes,5,opt,name=hint" json:"hint,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *Filter) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Filter) GetExpression() string {
	if m != nil && m.Expression != nil {
		return *m.Expression
	}
	return ""
}

func (m *Filter) GetHint() *Hint {
	if m != nil {
		return m.Hint
	}
	return nil
}

// SECTION: Reporting issues.
// --------------------------
// The result of a single check. A check without anomalies was run, but did not
// detect a problem.
type CheckResult struct {
	CheckId          *string    `protobuf:"bytes,1,opt,name=check_id,json=checkId" json:"check_id,omitempty"`
	Anomaly          []*Anomaly `protobuf:"bytes,2,rep,name=anomaly" json:"anomaly,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CheckResult) Reset()                    { *m = CheckResult{} }
func (m *CheckResult) String() string            { return proto.CompactTextString(m) }
func (*CheckResult) ProtoMessage()               {}
func (*CheckResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *CheckResult) GetCheckId() string {
	if m != nil && m.CheckId != nil {
		return *m.CheckId
	}
	return ""
}

func (m *CheckResult) GetAnomaly() []*Anomaly {
	if m != nil {
		return m.Anomaly
	}
	return nil
}

// The results of all checks performed on a host from a flow. This provides a
// manifest of completed checks, which can be used to:
// - open new issues, if the check results include anomalies.
// - update existing issues, if the check results vary from previous state.
// - close existing issues, if the check indicates issues weren't found.
type CheckResults struct {
	Kb               *KnowledgeBase `protobuf:"bytes,1,opt,name=kb" json:"kb,omitempty"`
	Result           []*CheckResult `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CheckResults) Reset()                    { *m = CheckResults{} }
func (m *CheckResults) String() string            { return proto.CompactTextString(m) }
func (*CheckResults) ProtoMessage()               {}
func (*CheckResults) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *CheckResults) GetKb() *KnowledgeBase {
	if m != nil {
		return m.Kb
	}
	return nil
}

func (m *CheckResults) GetResult() []*CheckResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Information about what checks are looking for, what actions can be taken to
// address an issue, and template text to present finding data in a usable,
// condensed form when reporting problems.
type Hint struct {
	Problem          *string `protobuf:"bytes,1,opt,name=problem" json:"problem,omitempty"`
	Fix              *string `protobuf:"bytes,2,opt,name=fix" json:"fix,omitempty"`
	Format           *string `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	Summary          *string `protobuf:"bytes,4,opt,name=summary" json:"summary,omitempty"`
	MaxResults       *uint64 `protobuf:"varint,5,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Hint) Reset()                    { *m = Hint{} }
func (m *Hint) String() string            { return proto.CompactTextString(m) }
func (*Hint) ProtoMessage()               {}
func (*Hint) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *Hint) GetProblem() string {
	if m != nil && m.Problem != nil {
		return *m.Problem
	}
	return ""
}

func (m *Hint) GetFix() string {
	if m != nil && m.Fix != nil {
		return *m.Fix
	}
	return ""
}

func (m *Hint) GetFormat() string {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return ""
}

func (m *Hint) GetSummary() string {
	if m != nil && m.Summary != nil {
		return *m.Summary
	}
	return ""
}

func (m *Hint) GetMaxResults() uint64 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

// SECTION: Selecting targets.
// ---------------------------
type Target struct {
	Cpe              []string `protobuf:"bytes,1,rep,name=cpe" json:"cpe,omitempty"`
	Os               []string `protobuf:"bytes,2,rep,name=os" json:"os,omitempty"`
	Label            []string `protobuf:"bytes,3,rep,name=label" json:"label,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *Target) GetCpe() []string {
	if m != nil {
		return m.Cpe
	}
	return nil
}

func (m *Target) GetOs() []string {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *Target) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

func init() {
	proto.RegisterType((*Check)(nil), "Check")
	proto.RegisterType((*Method)(nil), "Method")
	proto.RegisterType((*Probe)(nil), "Probe")
	proto.RegisterType((*Filter)(nil), "Filter")
	proto.RegisterType((*CheckResult)(nil), "CheckResult")
	proto.RegisterType((*CheckResults)(nil), "CheckResults")
	proto.RegisterType((*Hint)(nil), "Hint")
	proto.RegisterType((*Target)(nil), "Target")
	proto.RegisterEnum("Match", Match_name, Match_value)
	proto.RegisterEnum("Probe_Mode", Probe_Mode_name, Probe_Mode_value)
	proto.RegisterEnum("Probe_ResultContext", Probe_ResultContext_name, Probe_ResultContext_value)
}

func init() { proto.RegisterFile("checks.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x8f, 0x23, 0x47,
	0x15, 0xdf, 0xb6, 0x3d, 0x9e, 0x99, 0x9a, 0xdd, 0xd1, 0xa8, 0x14, 0x81, 0x59, 0x02, 0x3c, 0x39,
	0x84, 0xcc, 0x92, 0x49, 0xaf, 0xb2, 0x90, 0x7f, 0x2b, 0x85, 0x8d, 0x3d, 0x3b, 0x21, 0x4b, 0x3c,
	0xf6, 0xd0, 0xe3, 0xd5, 0xee, 0xe6, 0x32, 0x2a, 0x77, 0x3f, 0xbb, 0x8b, 0xed, 0xee, 0x72, 0xaa,
	0xaa, 0x77, 0x6c, 0x24, 0x4e, 0x7c, 0x06, 0xc4, 0x21, 0x47, 0xae, 0x48, 0xdc, 0xf8, 0x00, 0xc0,
	0xc7, 0xe0, 0x44, 0x3e, 0x01, 0x57, 0xc4, 0x01, 0xd5, 0xeb, 0x6a, 0x4f, 0xef, 0x06, 0x04, 0x91,
	0x40, 0xe4, 0xe6, 0x72, 0x57, 0xfd, 0xde, 0xab, 0xf7, 0xfb, 0xfd, 0x5e, 0x3d, 0x76, 0x3d, 0x4e,
	0x31, 0x7e, 0x6a, 0xc2, 0xa5, 0x56, 0x56, 0xdd, 0xbc, 0x21, 0x0a, 0x95, 0x8b, 0x6c, 0xed, 0x97,
	0xec, 0x67, 0x6a, 0x56, 0x7f, 0x7a, 0xe9, 0x69, 0xa1, 0x2e, 0x33, 0x4c, 0x16, 0x78, 0x31, 0x13,
	0x06, 0xfd, 0xbf, 0xfb, 0x06, 0x73, 0x51, 0x58, 0x19, 0x57, 0xeb, 0xfe, 0xe7, 0x6d, 0xb6, 0x75,
	0xec, 0x10, 0xf9, 0x84, 0xed, 0x10, 0xf4, 0x85, 0x4c, 0x7a, 0x01, 0x04, 0x87, 0xbb, 0xc3, 0x1f,
	0xfe, 0xe5, 0xef, 0x9f, 0xff, 0x29, 0x08, 0xf9, 0xd1, 0x00, 0x12, 0x69, 0xac, 0x2c, 0x16, 0xa5,
	0x34, 0xa9, 0x2c, 0x16, 0x20, 0x13, 0x2c, 0xac, 0x9c, 0x4b, 0xd4, 0x30, 0x57, 0x1a, 0x44, 0x01,
	0x22, 0x79, 0x26, 0x8d, 0xd2, 0xeb, 0x30, 0xda, 0x26, 0x94, 0x07, 0x09, 0x3f, 0x66, 0xdd, 0x1c,
	0x6d, 0xaa, 0x92, 0x5e, 0x0b, 0xda, 0x87, 0x7b, 0x77, 0xb6, 0xc3, 0x53, 0x5a, 0x0e, 0xfb, 0x84,
	0xfb, 0x32, 0xbf, 0x39, 0x80, 0x4b, 0xb1, 0x06, 0xab, 0x40, 0x14, 0x22, 0x5b, 0x1b, 0x04, 0x9b,
	0x22, 0xa4, 0xca, 0xd8, 0x30, 0xf2, 0x47, 0xf9, 0xaf, 0x03, 0xb6, 0x95, 0x0b, 0x1b, 0xa7, 0xbd,
	0x36, 0xb4, 0x0f, 0xf7, 0xef, 0x74, 0xc3, 0x53, 0xb7, 0x1a, 0xae, 0x09, 0xc3, 0xf0, 0x4f, 0xa7,
	0x29, 0x42, 0xac, 0x8a, 0x44, 0x5a, 0xa9, 0x0a, 0x90, 0x06, 0x12, 0xb4, 0x18, 0x5b, 0x4c, 0x40,
	0xce, 0x09, 0xcf, 0x2c, 0x31, 0x76, 0xa9, 0x26, 0x50, 0x94, 0xf9, 0x0c, 0x35, 0xa8, 0x39, 0xc5,
	0x00, 0x8d, 0xa6, 0xcc, 0xac, 0x01, 0x5c, 0x49, 0x63, 0x41, 0xcc, 0x2d, 0x6a, 0x58, 0x6a, 0x15,
	0xa3, 0x31, 0xb2, 0x58, 0x84, 0x70, 0x8e, 0xd6, 0xe5, 0x36, 0x18, 0x3f, 0x39, 0x82, 0xd9, 0x1a,
	0x12, 0x9c, 0x8b, 0x32, 0xb3, 0x61, 0x54, 0xe5, 0xc3, 0xc7, 0xac, 0x6b, 0x85, 0x5e, 0xa0, 0xed,
	0x75, 0x20, 0xa0, 0xeb, 0x4d, 0x69, 0x39, 0x7c, 0x83, 0x52, 0x7b, 0x8d, 0xbf, 0x3a, 0x92, 0xb9,
	0xb4, 0x60, 0x53, 0x69, 0x80, 0x6a, 0xe2, 0xd0, 0x7c, 0x36, 0x31, 0x54, 0x67, 0x4d, 0x18, 0x79,
	0x14, 0xfe, 0x09, 0xeb, 0xa4, 0xb2, 0xb0, 0xbd, 0x2d, 0x42, 0xdb, 0x0a, 0x3f, 0x92, 0x85, 0x1d,
	0xde, 0x23, 0xac, 0xf7, 0xf8, 0x3b, 0x53, 0x5c, 0xd9, 0x52, 0x64, 0x90, 0xa0, 0x89, 0xb5, 0x5c,
	0xba, 0xcb, 0x1a, 0x77, 0x13, 0xe1, 0x52, 0x9e, 0x65, 0x98, 0x1f, 0xc1, 0x5c, 0xae, 0x40, 0x14,
	0xc9, 0x6d, 0xa5, 0x61, 0x2e, 0x8b, 0x44, 0x16, 0x0b, 0x13, 0x46, 0x84, 0xd9, 0xff, 0x6b, 0x9b,
	0x75, 0xab, 0xe2, 0xf3, 0x0f, 0xd9, 0x96, 0x3b, 0x81, 0xbd, 0x80, 0x48, 0xe9, 0x86, 0x67, 0x6e,
	0x35, 0x3c, 0xa4, 0x40, 0x7d, 0x0e, 0x1b, 0x4e, 0x7c, 0x29, 0xc0, 0xa8, 0xbc, 0x22, 0x05, 0x12,
	0x61, 0x45, 0x18, 0x55, 0xc7, 0x1b, 0xc4, 0xb4, 0xbe, 0x62, 0xc4, 0x3c, 0x66, 0x3b, 0x1a, 0x8d,
	0x2a, 0x75, 0x8c, 0x24, 0x1a, 0x57, 0xcc, 0xfb, 0x32, 0xb6, 0xc3, 0xb7, 0x28, 0xb5, 0xdb, 0xfc,
	0x8d, 0x93, 0x95, 0xd5, 0x82, 0xae, 0x03, 0x87, 0x18, 0x2e, 0x42, 0x70, 0x45, 0x02, 0x8b, 0x2b,
	0x7b, 0x04, 0xb1, 0xca, 0x97, 0x42, 0x4b, 0xa3, 0x0a, 0xda, 0x70, 0x2b, 0x8c, 0x36, 0x68, 0x7c,
	0xf2, 0xaf, 0x28, 0x0f, 0x09, 0xf9, 0x90, 0x7f, 0xaf, 0x41, 0x79, 0x25, 0xe0, 0xff, 0x1f, 0xe7,
	0x7f, 0xdb, 0x65, 0x5b, 0xc4, 0x2d, 0x3f, 0x65, 0x3b, 0x42, 0x5b, 0x39, 0x17, 0xb1, 0xf5, 0xce,
	0x7e, 0x93, 0x42, 0xbc, 0xce, 0x6f, 0x39, 0x92, 0xea, 0x6f, 0x60, 0x53, 0x61, 0x1d, 0xf4, 0x33,
	0x99, 0xa0, 0xd9, 0x78, 0xd1, 0xd3, 0xbe, 0x81, 0xe0, 0x3f, 0x66, 0xdd, 0xa5, 0xd0, 0x06, 0x35,
	0x31, 0xbf, 0x3b, 0xbc, 0x4d, 0x60, 0xb7, 0xf8, 0x6b, 0x8f, 0x52, 0x19, 0xa7, 0x50, 0x7d, 0x33,
	0x60, 0x52, 0x55, 0x66, 0xc9, 0x46, 0x46, 0x0d, 0x28, 0x7f, 0x9c, 0xff, 0x26, 0x60, 0x9d, 0x5c,
	0x25, 0x8e, 0xa5, 0xe0, 0x70, 0xff, 0xce, 0x5e, 0x25, 0xc5, 0xf0, 0x54, 0x25, 0x78, 0xb7, 0x7b,
	0x7e, 0x12, 0x3d, 0x18, 0x8c, 0x86, 0x3f, 0x27, 0x70, 0xcb, 0xf5, 0x47, 0xea, 0x92, 0x3a, 0xc5,
	0x72, 0x99, 0xad, 0x61, 0x2e, 0x33, 0x8b, 0xda, 0x38, 0x29, 0x68, 0x29, 0x32, 0xd0, 0x65, 0x61,
	0x2a, 0x3e, 0x6d, 0xaa, 0x55, 0xb9, 0x48, 0x01, 0x45, 0x9c, 0xd6, 0xdb, 0xf0, 0xd3, 0xd2, 0xb5,
	0x2b, 0x91, 0x65, 0xeb, 0x10, 0xce, 0x84, 0x16, 0x59, 0x86, 0x19, 0x21, 0x49, 0x34, 0xcd, 0x9d,
	0xe0, 0x4a, 0xf8, 0x4c, 0x26, 0x25, 0x6d, 0x8d, 0x28, 0x39, 0xfe, 0xe7, 0x80, 0xed, 0xb8, 0x06,
	0x9a, 0xc9, 0x02, 0x7b, 0x1d, 0xdf, 0xc9, 0x3e, 0xa4, 0xfd, 0xc3, 0xdf, 0x07, 0x94, 0xde, 0xef,
	0x02, 0xfe, 0xdb, 0x60, 0x52, 0x20, 0x28, 0x0d, 0xb9, 0xd2, 0x58, 0x07, 0x86, 0xd2, 0x20, 0x29,
	0x00, 0x9d, 0xe0, 0x62, 0x0b, 0x35, 0x4e, 0x53, 0x7b, 0x22, 0xcb, 0xa8, 0xd6, 0x62, 0xe9, 0x94,
	0xbf, 0x54, 0x06, 0x54, 0x01, 0x02, 0xcc, 0xda, 0x58, 0xcc, 0x6f, 0x85, 0xf0, 0x60, 0xee, 0x14,
	0x2e, 0x0b, 0x4c, 0x8e, 0x5e, 0x38, 0x2f, 0x1b, 0x01, 0x9e, 0x89, 0xac, 0x14, 0xb6, 0x8e, 0x5c,
	0x5b, 0xe8, 0x08, 0xb4, 0xb0, 0x29, 0x6a, 0x47, 0x6d, 0xf1, 0x1c, 0x9b, 0x35, 0x12, 0x7f, 0xcc,
	0xb6, 0x7d, 0xb6, 0xbd, 0xad, 0xe7, 0x2f, 0xb7, 0xb1, 0xcb, 0x3f, 0xbb, 0x59, 0x55, 0x3d, 0x8a,
	0xfd, 0x82, 0x50, 0x6a, 0xb8, 0x46, 0x87, 0xe8, 0x7e, 0x65, 0x5b, 0xf7, 0xf6, 0xbf, 0x6f, 0xdd,
	0x24, 0xca, 0xff, 0xcc, 0xc6, 0x3b, 0xff, 0x7d, 0x1b, 0xf3, 0x3f, 0x04, 0x6c, 0xbf, 0xba, 0xee,
	0x45, 0xac, 0x0a, 0xd7, 0xa3, 0x7a, 0xbb, 0x64, 0x97, 0x97, 0xbc, 0x5d, 0x22, 0xfa, 0x78, 0x5c,
	0x7d, 0xbb, 0xdb, 0x3d, 0x1b, 0x44, 0xe7, 0x27, 0xd1, 0xf0, 0x17, 0x14, 0xfd, 0x92, 0x97, 0x95,
	0x29, 0x8d, 0x15, 0x0b, 0x74, 0x41, 0xeb, 0xca, 0xc9, 0xa2, 0x12, 0x5d, 0xed, 0xfd, 0x58, 0x65,
	0x19, 0xc6, 0x44, 0x84, 0x55, 0x4e, 0x56, 0xf4, 0xb0, 0xbb, 0x2d, 0x7e, 0xde, 0x80, 0xfb, 0x55,
	0x11, 0x4d, 0x4d, 0xb9, 0xc6, 0x85, 0x34, 0x16, 0x35, 0x26, 0x57, 0x28, 0xde, 0xfb, 0x61, 0x74,
	0x43, 0x37, 0xb3, 0xea, 0x03, 0xeb, 0x38, 0x57, 0x73, 0xc6, 0xbc, 0xaf, 0x0f, 0xae, 0xf1, 0xeb,
	0x6c, 0xe7, 0x6c, 0x10, 0x0d, 0x46, 0xa3, 0x93, 0xd1, 0x41, 0xd0, 0x3f, 0x65, 0x37, 0x9e, 0xbb,
	0x08, 0xbf, 0xc9, 0xbe, 0xf6, 0x70, 0xfc, 0xf1, 0x78, 0xf2, 0x68, 0x7c, 0x11, 0x9d, 0x9c, 0x3f,
	0x1c, 0x4d, 0x2f, 0x8e, 0x27, 0xe3, 0xe9, 0xc9, 0xe3, 0xe9, 0xc1, 0x35, 0x07, 0x53, 0x5d, 0xf3,
	0x20, 0xe0, 0x7b, 0x6c, 0x7b, 0x30, 0x9e, 0x9c, 0x0e, 0x46, 0x4f, 0x0e, 0x5a, 0x7c, 0x9b, 0xb5,
	0xa3, 0xc1, 0xa3, 0x83, 0x76, 0xff, 0xb3, 0x16, 0xeb, 0x56, 0x32, 0xe6, 0xf7, 0x58, 0xc7, 0xae,
	0x97, 0xe8, 0x3b, 0xdf, 0xeb, 0x54, 0x97, 0x57, 0xf9, 0x2b, 0x4e, 0x7c, 0xee, 0x7f, 0x57, 0x14,
	0x6f, 0x1a, 0xab, 0x20, 0x15, 0x45, 0xe2, 0x1b, 0x89, 0x0a, 0x23, 0x3a, 0xc8, 0x2d, 0x63, 0xb8,
	0x5a, 0x6a, 0xa7, 0x2d, 0x55, 0xf4, 0x5a, 0x04, 0x33, 0x25, 0x98, 0x31, 0x1f, 0x0d, 0x40, 0x97,
	0x19, 0x56, 0x0e, 0xad, 0x74, 0xec, 0x9c, 0xe2, 0x54, 0x06, 0x16, 0x75, 0xbe, 0x31, 0xe8, 0x52,
	0x18, 0xe3, 0xda, 0x94, 0x95, 0x39, 0xba, 0x32, 0x89, 0x1c, 0xc9, 0x47, 0xae, 0xa5, 0xf9, 0xf8,
	0x61, 0xd4, 0x88, 0xf3, 0x3f, 0x7d, 0x1a, 0xfe, 0x18, 0xb0, 0x3d, 0x1a, 0xfa, 0xaa, 0x92, 0xf3,
	0x27, 0x5f, 0x18, 0xfd, 0x7e, 0x44, 0x81, 0xde, 0xe5, 0x6f, 0x4f, 0x6b, 0x05, 0x80, 0x4c, 0x8e,
	0xae, 0xe6, 0x3e, 0x03, 0x97, 0xee, 0xb1, 0xf0, 0x5f, 0x0c, 0xcc, 0xd0, 0x8d, 0x85, 0xae, 0x7d,
	0x69, 0x8b, 0x49, 0x63, 0x08, 0x7c, 0xc2, 0xb6, 0xfd, 0x88, 0xea, 0xa7, 0xc0, 0x9d, 0x70, 0x50,
	0xad, 0xaf, 0xfa, 0xcb, 0x79, 0x6d, 0xac, 0x3a, 0x4f, 0xea, 0xc3, 0xb1, 0x70, 0x13, 0xa7, 0x9b,
	0x2d, 0xa5, 0x31, 0x25, 0x56, 0x5e, 0x37, 0x61, 0x54, 0xe3, 0xf5, 0x3f, 0x0b, 0xd8, 0xf5, 0xc6,
	0x2d, 0x0c, 0xbf, 0xc7, 0x5a, 0x4f, 0x67, 0x74, 0x81, 0xbd, 0x3b, 0xfb, 0xe1, 0xc7, 0xf5, 0xf8,
	0x3b, 0x14, 0x06, 0x87, 0xdf, 0xa1, 0x60, 0xdf, 0xe0, 0x5f, 0xbf, 0x8f, 0x56, 0xc8, 0xcc, 0x80,
	0x98, 0xa9, 0xd2, 0x36, 0x06, 0xce, 0xd6, 0xd3, 0x19, 0xff, 0x09, 0xeb, 0x56, 0xba, 0xf5, 0xb9,
	0x5e, 0x0f, 0x1b, 0xf8, 0xc3, 0xef, 0x12, 0xc4, 0xb7, 0xf9, 0xcb, 0x57, 0x35, 0xa9, 0xdd, 0x44,
	0x43, 0x30, 0x01, 0x45, 0x1e, 0xa1, 0xff, 0xab, 0x36, 0xeb, 0x38, 0xce, 0xf8, 0xfb, 0x6c, 0xdb,
	0x73, 0xe2, 0x6b, 0xfb, 0x0a, 0xe1, 0x7c, 0x8b, 0x7f, 0x73, 0xd0, 0xa4, 0xcf, 0xb1, 0xe7, 0xb2,
	0xa1, 0xcb, 0x86, 0x51, 0x7d, 0x86, 0x7f, 0xc0, 0xda, 0x73, 0xb9, 0xf2, 0xb2, 0xdb, 0xcc, 0x19,
	0x5f, 0x38, 0x9a, 0x56, 0xcf, 0xa3, 0x23, 0xbd, 0x81, 0xe2, 0x8e, 0xf2, 0x87, 0xac, 0x3b, 0x57,
	0x3a, 0x17, 0x96, 0xde, 0xd9, 0xdd, 0xe1, 0xfb, 0x04, 0xf2, 0x0e, 0x7f, 0x6b, 0x00, 0x16, 0xf3,
	0x65, 0xe6, 0x9e, 0x8d, 0x2b, 0xe1, 0x11, 0x0a, 0x6d, 0xaf, 0xe9, 0xa8, 0x47, 0x7c, 0x8f, 0xe9,
	0xc1, 0x1c, 0xb3, 0xa6, 0xcc, 0x73, 0xa1, 0xd7, 0x34, 0x0d, 0xed, 0x5e, 0x89, 0x73, 0xe0, 0xde,
	0x7e, 0x6d, 0xa1, 0x10, 0x39, 0x3d, 0x1c, 0xcf, 0x19, 0xa1, 0xca, 0x7b, 0x56, 0xcd, 0xfa, 0xb5,
	0x01, 0xfd, 0xcb, 0xe1, 0xf1, 0xf8, 0x27, 0x6c, 0x2f, 0x17, 0xab, 0x0b, 0x5f, 0x5d, 0xb2, 0x40,
	0x67, 0xf8, 0x1e, 0xc1, 0xff, 0x80, 0xbf, 0x79, 0x2a, 0x56, 0x32, 0x2f, 0xf3, 0xc6, 0x9b, 0xb0,
	0xd1, 0x8d, 0x55, 0x20, 0x8b, 0x38, 0x2b, 0x13, 0x74, 0x0d, 0xce, 0x9f, 0x0f, 0x23, 0x96, 0x8b,
	0x95, 0x17, 0x49, 0xff, 0x97, 0x2d, 0xd6, 0xad, 0xba, 0x3d, 0xff, 0x29, 0x6b, 0xc7, 0xcb, 0x6a,
	0x10, 0x6e, 0x64, 0x1f, 0xa1, 0xb1, 0x5a, 0xc6, 0x2f, 0x0e, 0xee, 0x8e, 0x5c, 0x03, 0x97, 0xd2,
	0xa6, 0x20, 0x8a, 0xb5, 0x67, 0xcb, 0x20, 0x1c, 0x9f, 0x9d, 0x80, 0x4c, 0x4c, 0x18, 0x39, 0x2c,
	0x7e, 0xc6, 0x5a, 0xca, 0xf8, 0xb9, 0xe8, 0x03, 0x42, 0xbc, 0xcb, 0xdf, 0xfd, 0x92, 0x88, 0x93,
	0x73, 0xaa, 0x8b, 0x09, 0xa3, 0x96, 0x32, 0x7c, 0xca, 0xb6, 0x32, 0x31, 0xc3, 0x8c, 0x46, 0xd9,
	0x86, 0x31, 0xbf, 0x24, 0x28, 0x61, 0x98, 0x30, 0xaa, 0xc0, 0xbe, 0xff, 0x36, 0xdb, 0xa2, 0xc7,
	0x98, 0xef, 0xb0, 0xce, 0x78, 0x32, 0x3e, 0x39, 0xb8, 0xe6, 0x7a, 0xa7, 0xfb, 0x11, 0xb8, 0x1f,
	0x83, 0xb1, 0xef, 0xa6, 0x83, 0xd1, 0xe8, 0xa0, 0xed, 0x36, 0x9d, 0x4f, 0x4e, 0x4f, 0x0e, 0x3a,
	0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x04, 0x5c, 0xb6, 0xc3, 0x7e, 0x0e, 0x00, 0x00,
}

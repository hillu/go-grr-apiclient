// Code generated by protoc-gen-go.
// source: config_file.proto
// DO NOT EDIT!

package apiclient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogTarget_LogTransport int32

const (
	LogTarget_UNKNOWN_LOG_TRANSPORT LogTarget_LogTransport = 0
	LogTarget_NONE                  LogTarget_LogTransport = 1
	LogTarget_FILE                  LogTarget_LogTransport = 2
	LogTarget_UDP                   LogTarget_LogTransport = 3
	LogTarget_TCP                   LogTarget_LogTransport = 4
	LogTarget_PIPE                  LogTarget_LogTransport = 5
	LogTarget_SCRIPT                LogTarget_LogTransport = 6
	LogTarget_MODULE                LogTarget_LogTransport = 7
	LogTarget_WALL                  LogTarget_LogTransport = 8
)

var LogTarget_LogTransport_name = map[int32]string{
	0: "UNKNOWN_LOG_TRANSPORT",
	1: "NONE",
	2: "FILE",
	3: "UDP",
	4: "TCP",
	5: "PIPE",
	6: "SCRIPT",
	7: "MODULE",
	8: "WALL",
}
var LogTarget_LogTransport_value = map[string]int32{
	"UNKNOWN_LOG_TRANSPORT": 0,
	"NONE":                  1,
	"FILE":                  2,
	"UDP":                   3,
	"TCP":                   4,
	"PIPE":                  5,
	"SCRIPT":                6,
	"MODULE":                7,
	"WALL":                  8,
}

func (x LogTarget_LogTransport) Enum() *LogTarget_LogTransport {
	p := new(LogTarget_LogTransport)
	*p = x
	return p
}
func (x LogTarget_LogTransport) String() string {
	return proto.EnumName(LogTarget_LogTransport_name, int32(x))
}
func (x *LogTarget_LogTransport) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogTarget_LogTransport_value, data, "LogTarget_LogTransport")
	if err != nil {
		return err
	}
	*x = LogTarget_LogTransport(value)
	return nil
}
func (LogTarget_LogTransport) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

type SudoersAlias_Type int32

const (
	SudoersAlias_USER  SudoersAlias_Type = 0
	SudoersAlias_RUNAS SudoersAlias_Type = 1
	SudoersAlias_HOST  SudoersAlias_Type = 2
	SudoersAlias_CMD   SudoersAlias_Type = 3
)

var SudoersAlias_Type_name = map[int32]string{
	0: "USER",
	1: "RUNAS",
	2: "HOST",
	3: "CMD",
}
var SudoersAlias_Type_value = map[string]int32{
	"USER":  0,
	"RUNAS": 1,
	"HOST":  2,
	"CMD":   3,
}

func (x SudoersAlias_Type) Enum() *SudoersAlias_Type {
	p := new(SudoersAlias_Type)
	*p = x
	return p
}
func (x SudoersAlias_Type) String() string {
	return proto.EnumName(SudoersAlias_Type_name, int32(x))
}
func (x *SudoersAlias_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SudoersAlias_Type_value, data, "SudoersAlias_Type")
	if err != nil {
		return err
	}
	*x = SudoersAlias_Type(value)
	return nil
}
func (SudoersAlias_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{9, 0} }

// Logging configuration.
type LogTarget struct {
	Facility         *string                 `protobuf:"bytes,1,opt,name=facility" json:"facility,omitempty"`
	Priority         *string                 `protobuf:"bytes,2,opt,name=priority" json:"priority,omitempty"`
	Transport        *LogTarget_LogTransport `protobuf:"varint,3,opt,name=transport,enum=LogTarget_LogTransport" json:"transport,omitempty"`
	Destination      *string                 `protobuf:"bytes,4,opt,name=destination" json:"destination,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *LogTarget) Reset()                    { *m = LogTarget{} }
func (m *LogTarget) String() string            { return proto.CompactTextString(m) }
func (*LogTarget) ProtoMessage()               {}
func (*LogTarget) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *LogTarget) GetFacility() string {
	if m != nil && m.Facility != nil {
		return *m.Facility
	}
	return ""
}

func (m *LogTarget) GetPriority() string {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return ""
}

func (m *LogTarget) GetTransport() LogTarget_LogTransport {
	if m != nil && m.Transport != nil {
		return *m.Transport
	}
	return LogTarget_UNKNOWN_LOG_TRANSPORT
}

func (m *LogTarget) GetDestination() string {
	if m != nil && m.Destination != nil {
		return *m.Destination
	}
	return ""
}

type LogConfig struct {
	Targets          []*LogTarget `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *LogConfig) Reset()                    { *m = LogConfig{} }
func (m *LogConfig) String() string            { return proto.CompactTextString(m) }
func (*LogConfig) ProtoMessage()               {}
func (*LogConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *LogConfig) GetTargets() []*LogTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

// NFS configuration files.
type NfsClient struct {
	Host             *string  `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Options          []string `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *NfsClient) Reset()                    { *m = NfsClient{} }
func (m *NfsClient) String() string            { return proto.CompactTextString(m) }
func (*NfsClient) ProtoMessage()               {}
func (*NfsClient) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *NfsClient) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *NfsClient) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type NfsExport struct {
	Share            *string      `protobuf:"bytes,1,opt,name=share" json:"share,omitempty"`
	Defaults         []string     `protobuf:"bytes,2,rep,name=defaults" json:"defaults,omitempty"`
	Clients          []*NfsClient `protobuf:"bytes,3,rep,name=clients" json:"clients,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *NfsExport) Reset()                    { *m = NfsExport{} }
func (m *NfsExport) String() string            { return proto.CompactTextString(m) }
func (*NfsExport) ProtoMessage()               {}
func (*NfsExport) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *NfsExport) GetShare() string {
	if m != nil && m.Share != nil {
		return *m.Share
	}
	return ""
}

func (m *NfsExport) GetDefaults() []string {
	if m != nil {
		return m.Defaults
	}
	return nil
}

func (m *NfsExport) GetClients() []*NfsClient {
	if m != nil {
		return m.Clients
	}
	return nil
}

// An sshd match block configuration. This is a subcomponent of an sshd config.
type SshdMatchBlock struct {
	Criterion        *string         `protobuf:"bytes,1,opt,name=criterion" json:"criterion,omitempty"`
	Config           *AttributedDict `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SshdMatchBlock) Reset()                    { *m = SshdMatchBlock{} }
func (m *SshdMatchBlock) String() string            { return proto.CompactTextString(m) }
func (*SshdMatchBlock) ProtoMessage()               {}
func (*SshdMatchBlock) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *SshdMatchBlock) GetCriterion() string {
	if m != nil && m.Criterion != nil {
		return *m.Criterion
	}
	return ""
}

func (m *SshdMatchBlock) GetConfig() *AttributedDict {
	if m != nil {
		return m.Config
	}
	return nil
}

// A sshd configuration containing the sshd settings, and any number of match
// groups.
type SshdConfig struct {
	Config           *AttributedDict   `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Matches          []*SshdMatchBlock `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SshdConfig) Reset()                    { *m = SshdConfig{} }
func (m *SshdConfig) String() string            { return proto.CompactTextString(m) }
func (*SshdConfig) ProtoMessage()               {}
func (*SshdConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *SshdConfig) GetConfig() *AttributedDict {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SshdConfig) GetMatches() []*SshdMatchBlock {
	if m != nil {
		return m.Matches
	}
	return nil
}

// A ntp configuration containing the all the ntp settings.
type NtpConfig struct {
	Config           *AttributedDict   `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Server           []*AttributedDict `protobuf:"bytes,2,rep,name=server" json:"server,omitempty"`
	Restrict         []*AttributedDict `protobuf:"bytes,3,rep,name=restrict" json:"restrict,omitempty"`
	Fudge            []*AttributedDict `protobuf:"bytes,4,rep,name=fudge" json:"fudge,omitempty"`
	Trap             []*AttributedDict `protobuf:"bytes,5,rep,name=trap" json:"trap,omitempty"`
	Peer             []*AttributedDict `protobuf:"bytes,6,rep,name=peer" json:"peer,omitempty"`
	Broadcast        []*AttributedDict `protobuf:"bytes,7,rep,name=broadcast" json:"broadcast,omitempty"`
	Manycastclient   []*AttributedDict `protobuf:"bytes,8,rep,name=manycastclient" json:"manycastclient,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *NtpConfig) Reset()                    { *m = NtpConfig{} }
func (m *NtpConfig) String() string            { return proto.CompactTextString(m) }
func (*NtpConfig) ProtoMessage()               {}
func (*NtpConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *NtpConfig) GetConfig() *AttributedDict {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NtpConfig) GetServer() []*AttributedDict {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *NtpConfig) GetRestrict() []*AttributedDict {
	if m != nil {
		return m.Restrict
	}
	return nil
}

func (m *NtpConfig) GetFudge() []*AttributedDict {
	if m != nil {
		return m.Fudge
	}
	return nil
}

func (m *NtpConfig) GetTrap() []*AttributedDict {
	if m != nil {
		return m.Trap
	}
	return nil
}

func (m *NtpConfig) GetPeer() []*AttributedDict {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *NtpConfig) GetBroadcast() []*AttributedDict {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *NtpConfig) GetManycastclient() []*AttributedDict {
	if m != nil {
		return m.Manycastclient
	}
	return nil
}

// A PAM configuration entry.
type PamConfigEntry struct {
	Service          *string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Type             *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Control          *string `protobuf:"bytes,3,opt,name=control" json:"control,omitempty"`
	ModulePath       *string `protobuf:"bytes,4,opt,name=module_path,json=modulePath" json:"module_path,omitempty"`
	ModuleArgs       *string `protobuf:"bytes,5,opt,name=module_args,json=moduleArgs" json:"module_args,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PamConfigEntry) Reset()                    { *m = PamConfigEntry{} }
func (m *PamConfigEntry) String() string            { return proto.CompactTextString(m) }
func (*PamConfigEntry) ProtoMessage()               {}
func (*PamConfigEntry) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *PamConfigEntry) GetService() string {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return ""
}

func (m *PamConfigEntry) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *PamConfigEntry) GetControl() string {
	if m != nil && m.Control != nil {
		return *m.Control
	}
	return ""
}

func (m *PamConfigEntry) GetModulePath() string {
	if m != nil && m.ModulePath != nil {
		return *m.ModulePath
	}
	return ""
}

func (m *PamConfigEntry) GetModuleArgs() string {
	if m != nil && m.ModuleArgs != nil {
		return *m.ModuleArgs
	}
	return ""
}

// A PAM configuration, containing all definitions of the services.
// and any references to external configs outside of the artifact.
type PamConfig struct {
	Entries          []*PamConfigEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	ExternalConfig   []string          `protobuf:"bytes,2,rep,name=external_config,json=externalConfig" json:"external_config,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PamConfig) Reset()                    { *m = PamConfig{} }
func (m *PamConfig) String() string            { return proto.CompactTextString(m) }
func (*PamConfig) ProtoMessage()               {}
func (*PamConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *PamConfig) GetEntries() []*PamConfigEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *PamConfig) GetExternalConfig() []string {
	if m != nil {
		return m.ExternalConfig
	}
	return nil
}

// Sudoers aliases.
type SudoersAlias struct {
	Type             *SudoersAlias_Type `protobuf:"varint,1,opt,name=type,enum=SudoersAlias_Type" json:"type,omitempty"`
	Name             *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Users            []string           `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	Runas            []string           `protobuf:"bytes,4,rep,name=runas" json:"runas,omitempty"`
	Hosts            []string           `protobuf:"bytes,5,rep,name=hosts" json:"hosts,omitempty"`
	Cmds             []string           `protobuf:"bytes,6,rep,name=cmds" json:"cmds,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SudoersAlias) Reset()                    { *m = SudoersAlias{} }
func (m *SudoersAlias) String() string            { return proto.CompactTextString(m) }
func (*SudoersAlias) ProtoMessage()               {}
func (*SudoersAlias) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *SudoersAlias) GetType() SudoersAlias_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SudoersAlias_USER
}

func (m *SudoersAlias) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SudoersAlias) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SudoersAlias) GetRunas() []string {
	if m != nil {
		return m.Runas
	}
	return nil
}

func (m *SudoersAlias) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *SudoersAlias) GetCmds() []string {
	if m != nil {
		return m.Cmds
	}
	return nil
}

// Default setting in sudoers.
type SudoersDefault struct {
	Scope            *string `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SudoersDefault) Reset()                    { *m = SudoersDefault{} }
func (m *SudoersDefault) String() string            { return proto.CompactTextString(m) }
func (*SudoersDefault) ProtoMessage()               {}
func (*SudoersDefault) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *SudoersDefault) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *SudoersDefault) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SudoersDefault) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Sudoers file entry.
type SudoersEntry struct {
	Users            []string `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Hosts            []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
	Cmdspec          []string `protobuf:"bytes,3,rep,name=cmdspec" json:"cmdspec,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SudoersEntry) Reset()                    { *m = SudoersEntry{} }
func (m *SudoersEntry) String() string            { return proto.CompactTextString(m) }
func (*SudoersEntry) ProtoMessage()               {}
func (*SudoersEntry) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *SudoersEntry) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SudoersEntry) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *SudoersEntry) GetCmdspec() []string {
	if m != nil {
		return m.Cmdspec
	}
	return nil
}

// Sudoers configuration.
type SudoersConfig struct {
	Defaults         []*SudoersDefault `protobuf:"bytes,1,rep,name=defaults" json:"defaults,omitempty"`
	Aliases          []*SudoersAlias   `protobuf:"bytes,2,rep,name=aliases" json:"aliases,omitempty"`
	Entries          []*SudoersEntry   `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	Includes         []string          `protobuf:"bytes,4,rep,name=includes" json:"includes,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SudoersConfig) Reset()                    { *m = SudoersConfig{} }
func (m *SudoersConfig) String() string            { return proto.CompactTextString(m) }
func (*SudoersConfig) ProtoMessage()               {}
func (*SudoersConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *SudoersConfig) GetDefaults() []*SudoersDefault {
	if m != nil {
		return m.Defaults
	}
	return nil
}

func (m *SudoersConfig) GetAliases() []*SudoersAlias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *SudoersConfig) GetEntries() []*SudoersEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *SudoersConfig) GetIncludes() []string {
	if m != nil {
		return m.Includes
	}
	return nil
}

func init() {
	proto.RegisterType((*LogTarget)(nil), "LogTarget")
	proto.RegisterType((*LogConfig)(nil), "LogConfig")
	proto.RegisterType((*NfsClient)(nil), "NfsClient")
	proto.RegisterType((*NfsExport)(nil), "NfsExport")
	proto.RegisterType((*SshdMatchBlock)(nil), "SshdMatchBlock")
	proto.RegisterType((*SshdConfig)(nil), "SshdConfig")
	proto.RegisterType((*NtpConfig)(nil), "NtpConfig")
	proto.RegisterType((*PamConfigEntry)(nil), "PamConfigEntry")
	proto.RegisterType((*PamConfig)(nil), "PamConfig")
	proto.RegisterType((*SudoersAlias)(nil), "SudoersAlias")
	proto.RegisterType((*SudoersDefault)(nil), "SudoersDefault")
	proto.RegisterType((*SudoersEntry)(nil), "SudoersEntry")
	proto.RegisterType((*SudoersConfig)(nil), "SudoersConfig")
	proto.RegisterEnum("LogTarget_LogTransport", LogTarget_LogTransport_name, LogTarget_LogTransport_value)
	proto.RegisterEnum("SudoersAlias_Type", SudoersAlias_Type_name, SudoersAlias_Type_value)
}

func init() { proto.RegisterFile("config_file.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x97, 0xdd, 0x92, 0x1a, 0xb9,
	0x15, 0xc7, 0x97, 0x01, 0x06, 0xd0, 0xac, 0xc7, 0x44, 0xc9, 0x96, 0x59, 0x27, 0x5e, 0xcb, 0xed,
	0x8f, 0x61, 0x6a, 0x67, 0x7b, 0x13, 0x6f, 0x36, 0x2e, 0x97, 0xcb, 0xae, 0xe2, 0x2b, 0x99, 0xb1,
	0x19, 0xa0, 0x1a, 0xc6, 0x93, 0xbb, 0x89, 0x68, 0x44, 0x23, 0xbb, 0x69, 0x75, 0x49, 0xc2, 0x36,
	0x95, 0xb7, 0xc8, 0x3b, 0xa4, 0x2a, 0x0f, 0x90, 0x47, 0xc8, 0x65, 0x6e, 0xf3, 0x00, 0x71, 0x72,
	0x99, 0x47, 0xc8, 0xc5, 0xd6, 0x91, 0xba, 0x1b, 0x98, 0x19, 0xec, 0xbb, 0x46, 0xd2, 0xff, 0x77,
	0x24, 0x9d, 0xa3, 0x73, 0x0e, 0xe8, 0x67, 0xbe, 0x88, 0xa6, 0x3c, 0xb8, 0x98, 0xf2, 0x90, 0xb9,
	0xb1, 0x14, 0x5a, 0xdc, 0x46, 0x6f, 0xc4, 0x58, 0x25, 0xdf, 0xfb, 0x8a, 0xcd, 0x69, 0xa4, 0xb9,
	0x6f, 0x7f, 0x3b, 0xff, 0xcc, 0xa3, 0x4a, 0x57, 0x04, 0x23, 0x2a, 0x03, 0xa6, 0xf1, 0x4b, 0x54,
	0x9e, 0x52, 0x9f, 0x87, 0x5c, 0x2f, 0x6b, 0x39, 0x92, 0xab, 0x57, 0x9a, 0xee, 0xc7, 0xff, 0xff,
	0xe7, 0x1f, 0xb9, 0x3a, 0x7e, 0x74, 0x3e, 0xa3, 0x9a, 0x84, 0x22, 0x20, 0x7a, 0x19, 0x33, 0x45,
	0xf4, 0x8c, 0x2b, 0xa2, 0x8d, 0x8a, 0xd0, 0x38, 0x0e, 0x39, 0x8c, 0x09, 0xd7, 0xcb, 0xf4, 0xb8,
	0x8f, 0xca, 0xb1, 0xe4, 0x42, 0x02, 0x6b, 0xc7, 0xb0, 0x7e, 0x30, 0xac, 0xef, 0xf0, 0xb7, 0x19,
	0x2b, 0x59, 0xc0, 0x3f, 0x05, 0x4c, 0x21, 0x78, 0x8c, 0x2a, 0x5a, 0xd2, 0x48, 0xc5, 0x42, 0xea,
	0x5a, 0x9e, 0xe4, 0xea, 0xfb, 0x8f, 0x6f, 0xb9, 0xd9, 0xde, 0xcd, 0x57, 0x3a, 0xdd, 0xfc, 0xd6,
	0x98, 0x7a, 0x88, 0xef, 0x1f, 0x8b, 0xf7, 0x60, 0x49, 0x11, 0x2a, 0x19, 0x51, 0x2c, 0xd2, 0x44,
	0x0b, 0x42, 0xc9, 0x84, 0x29, 0xcd, 0x23, 0xaa, 0xb9, 0x88, 0x5c, 0x6f, 0x85, 0xc5, 0x0d, 0xb4,
	0xb7, 0x36, 0x55, 0x2b, 0x98, 0x7d, 0xdf, 0x35, 0xb0, 0xaf, 0xf1, 0xad, 0xf3, 0x19, 0x93, 0xec,
	0x0a, 0xce, 0xf5, 0xd6, 0x35, 0xce, 0x9f, 0xd1, 0x97, 0xeb, 0x5b, 0xc1, 0x5f, 0xa3, 0xaf, 0xce,
	0x7a, 0xaf, 0x7a, 0xfd, 0xf3, 0xde, 0x45, 0xb7, 0xff, 0x87, 0x8b, 0x91, 0xd7, 0xe8, 0x0d, 0x07,
	0x7d, 0x6f, 0x54, 0xfd, 0x02, 0x97, 0x51, 0xa1, 0xd7, 0xef, 0x75, 0xaa, 0x39, 0xf8, 0xfa, 0xfd,
	0x49, 0xb7, 0x53, 0xdd, 0xc1, 0x25, 0x94, 0x3f, 0x6b, 0x0f, 0xaa, 0x79, 0xf8, 0x18, 0xb5, 0x06,
	0xd5, 0x02, 0xcc, 0x0d, 0x4e, 0x06, 0x9d, 0x6a, 0x11, 0x23, 0xb4, 0x3b, 0x6c, 0x79, 0x27, 0x83,
	0x51, 0x75, 0x17, 0xbe, 0x4f, 0xfb, 0xed, 0xb3, 0x6e, 0xa7, 0x5a, 0x82, 0x15, 0xe7, 0x8d, 0x6e,
	0xb7, 0x5a, 0x76, 0x5e, 0x19, 0x6f, 0xb6, 0x4c, 0x08, 0xe0, 0x17, 0xa8, 0x64, 0x2f, 0x54, 0xd5,
	0x72, 0x24, 0x5f, 0xdf, 0x7b, 0x8c, 0x56, 0xd7, 0xd5, 0xac, 0x99, 0x43, 0x61, 0x5c, 0xed, 0x8a,
	0x20, 0xe0, 0x51, 0x90, 0xdc, 0xbd, 0x72, 0xbd, 0x54, 0xe4, 0x3c, 0x45, 0x95, 0xde, 0x54, 0xb5,
	0x42, 0xce, 0x22, 0x8d, 0x31, 0x2a, 0xcc, 0x84, 0xd2, 0x36, 0x2c, 0x3c, 0xf3, 0x8d, 0x6b, 0xa8,
	0x24, 0x62, 0x38, 0xb4, 0xaa, 0xed, 0x90, 0x7c, 0xbd, 0xe2, 0xa5, 0x3f, 0x1d, 0xdf, 0x48, 0x3b,
	0x1f, 0xcc, 0x0d, 0xfc, 0x02, 0x15, 0xd5, 0x8c, 0x4a, 0x96, 0x68, 0xed, 0x0f, 0x7c, 0x1b, 0x95,
	0x27, 0x6c, 0x4a, 0x17, 0xa1, 0x4e, 0xd5, 0xd9, 0x6f, 0xfc, 0x00, 0x95, 0x7c, 0x63, 0x56, 0xd5,
	0xf2, 0xc9, 0xce, 0xb3, 0x9d, 0x78, 0xe9, 0x94, 0xf3, 0xf7, 0x1c, 0xda, 0x1f, 0xaa, 0xd9, 0xe4,
	0x94, 0x6a, 0x7f, 0xd6, 0x0c, 0x85, 0xff, 0x16, 0xbf, 0x44, 0x15, 0x5f, 0x72, 0xcd, 0x24, 0x78,
	0xcf, 0x46, 0xf0, 0x91, 0x39, 0xe8, 0x23, 0xfc, 0xa0, 0x65, 0x27, 0x28, 0xd1, 0x10, 0x7e, 0x5a,
	0xf2, 0x20, 0x60, 0x92, 0x50, 0x32, 0x07, 0x39, 0x19, 0x83, 0xde, 0xf5, 0x56, 0x72, 0xfc, 0x1a,
	0xed, 0xda, 0xb7, 0x64, 0xc2, 0x77, 0xef, 0xf1, 0x4d, 0xb7, 0xa1, 0xb5, 0xe4, 0xe3, 0x85, 0x66,
	0x93, 0x36, 0xf7, 0x75, 0xf3, 0x3b, 0x43, 0x3e, 0xc0, 0x0f, 0x47, 0x33, 0x46, 0xec, 0xd2, 0x85,
	0x34, 0x41, 0x40, 0xc4, 0x94, 0xe8, 0x19, 0xdb, 0x44, 0x27, 0x34, 0xe7, 0xaf, 0x39, 0x84, 0x60,
	0xdb, 0x89, 0x97, 0x4e, 0x33, 0x33, 0xb9, 0xeb, 0xcd, 0x3c, 0x30, 0x66, 0xbe, 0xc1, 0xbf, 0x1a,
	0x19, 0x22, 0x8f, 0x88, 0x52, 0xb3, 0xc9, 0xa6, 0xc1, 0x8c, 0x8e, 0x8f, 0x51, 0xc9, 0x58, 0x65,
	0xf6, 0x56, 0x81, 0xb7, 0x79, 0x47, 0xcd, 0x3b, 0x86, 0x77, 0x0b, 0x7f, 0x75, 0xba, 0xda, 0x1d,
	0x51, 0xcc, 0x37, 0x9e, 0x73, 0xbd, 0x54, 0xee, 0xfc, 0xad, 0x88, 0x2a, 0x3d, 0x1d, 0x27, 0xdb,
	0xec, 0x7e, 0x6e, 0x9b, 0xf7, 0x0d, 0xf6, 0x0e, 0xfe, 0x65, 0xb6, 0xcd, 0x48, 0xc7, 0xdb, 0x76,
	0xd9, 0x47, 0xbb, 0x8a, 0xc9, 0x77, 0x4c, 0x66, 0x9b, 0xbc, 0x44, 0x7b, 0x64, 0x68, 0x04, 0x7f,
	0x63, 0x97, 0x91, 0xb7, 0x6c, 0xf9, 0x5e, 0xc8, 0x4b, 0xa7, 0x56, 0xae, 0x97, 0x60, 0xf0, 0x19,
	0x2a, 0x4b, 0xa6, 0xb4, 0xe4, 0xbe, 0x4e, 0x42, 0xe6, 0x0a, 0xb2, 0x6e, 0x90, 0x0e, 0x26, 0xe9,
	0xc2, 0xad, 0xd0, 0x0c, 0x85, 0xbb, 0xa8, 0x38, 0x5d, 0x4c, 0x02, 0x56, 0x2b, 0x5c, 0xcf, 0x7c,
	0x68, 0x98, 0x77, 0xf1, 0x1d, 0xb3, 0x6a, 0x2b, 0xd0, 0x42, 0xf0, 0x09, 0x2a, 0x68, 0x49, 0xe3,
	0x5a, 0xf1, 0x7a, 0x58, 0xe6, 0x68, 0x58, 0xb4, 0x95, 0x65, 0x10, 0x80, 0x8a, 0x19, 0x93, 0xb5,
	0xdd, 0xcf, 0xa0, 0x60, 0xd1, 0x76, 0x14, 0xcc, 0xe2, 0x3f, 0xa2, 0xca, 0x58, 0x0a, 0x3a, 0xf1,
	0xa9, 0xd2, 0xb5, 0xd2, 0xf5, 0xbc, 0x43, 0xc3, 0xbb, 0x8f, 0xef, 0x65, 0x2b, 0xb7, 0x42, 0x57,
	0x30, 0x1c, 0xa0, 0xfd, 0x39, 0x8d, 0x96, 0xf0, 0x6d, 0xdf, 0x6c, 0xad, 0x7c, 0x3d, 0x3e, 0xab,
	0x32, 0x9b, 0xcb, 0xb7, 0xda, 0xb8, 0x84, 0x75, 0xfe, 0xb7, 0x83, 0xf6, 0x07, 0x74, 0x6e, 0x43,
	0xb5, 0x13, 0x69, 0xb9, 0x84, 0x77, 0x00, 0xa1, 0xc1, 0x7d, 0x76, 0xb9, 0x92, 0x41, 0x7c, 0x26,
	0x53, 0x24, 0xa2, 0x73, 0x66, 0x5e, 0x2a, 0x03, 0x11, 0x19, 0xb3, 0x50, 0x44, 0x81, 0x2d, 0x3c,
	0xa9, 0x1c, 0xff, 0x16, 0x15, 0xa0, 0xe6, 0x25, 0x45, 0x8c, 0x18, 0xcc, 0x6d, 0x5c, 0x03, 0x0c,
	0x8c, 0x93, 0xa9, 0x90, 0xb6, 0x7a, 0x19, 0x06, 0x38, 0x68, 0x19, 0x33, 0xdc, 0x41, 0x25, 0x5f,
	0x44, 0x5a, 0x8a, 0xd0, 0xd4, 0xaa, 0xca, 0xaa, 0x24, 0x81, 0x70, 0xcc, 0x66, 0xf4, 0x1d, 0x17,
	0x12, 0x12, 0xc5, 0xa0, 0x71, 0x7a, 0x85, 0x91, 0x6a, 0xf1, 0x31, 0xda, 0x9b, 0x8b, 0xc9, 0x22,
	0x64, 0x17, 0x31, 0xd5, 0xb3, 0xa4, 0x20, 0x1d, 0x18, 0xd4, 0x3d, 0x7c, 0x17, 0x50, 0x50, 0xe8,
	0x61, 0x0e, 0x0a, 0x1b, 0x9c, 0x04, 0x70, 0x56, 0xe2, 0x7a, 0xc8, 0x7e, 0x0c, 0xa8, 0x9e, 0xe1,
	0x93, 0x8c, 0x44, 0x65, 0xa0, 0x6a, 0x45, 0x43, 0xca, 0xde, 0x04, 0x90, 0xa8, 0x0c, 0x16, 0x73,
	0xc8, 0xac, 0x9f, 0x40, 0x35, 0x64, 0xa0, 0x9c, 0x7f, 0xe5, 0x50, 0x25, 0xbb, 0x6e, 0x3c, 0x45,
	0x25, 0xd8, 0x35, 0x67, 0x69, 0x99, 0xb9, 0xe9, 0x6e, 0xfa, 0xa2, 0xf9, 0xcc, 0x58, 0xf9, 0x11,
	0xff, 0xd0, 0x20, 0x21, 0x57, 0x3a, 0xcd, 0x8e, 0x2c, 0x5a, 0xcc, 0x99, 0xa4, 0x9a, 0x4d, 0x8c,
	0xa5, 0xcd, 0x0c, 0x9a, 0x20, 0x5d, 0x2f, 0x85, 0xe3, 0x3f, 0xa1, 0x9b, 0xec, 0x83, 0x66, 0x32,
	0xa2, 0xe1, 0x45, 0x96, 0x98, 0xf3, 0xf5, 0x4a, 0xf3, 0x89, 0xc1, 0xff, 0x06, 0x7f, 0xdf, 0x66,
	0x9a, 0xf2, 0x50, 0x01, 0x5f, 0xb2, 0x29, 0x93, 0x2c, 0xf2, 0x4d, 0x17, 0x41, 0x52, 0x5d, 0x62,
	0xc3, 0xdc, 0x19, 0x84, 0x51, 0x3a, 0x6e, 0x37, 0xeb, 0xfc, 0x25, 0x8f, 0xbe, 0x1c, 0x2e, 0x26,
	0x82, 0x49, 0xd5, 0x08, 0x39, 0x55, 0xf8, 0x59, 0xe2, 0xfa, 0x9c, 0xe9, 0x36, 0xb0, 0xbb, 0x3e,
	0xe9, 0x8e, 0x96, 0x31, 0x6b, 0xfe, 0xdc, 0xd8, 0xbe, 0x81, 0xf7, 0xcc, 0x98, 0x09, 0x88, 0x34,
	0x02, 0x0e, 0x50, 0x01, 0xc2, 0x2b, 0x89, 0x9b, 0x4b, 0x0b, 0x61, 0xc6, 0xf5, 0xcc, 0x02, 0xfc,
	0x14, 0x15, 0x17, 0x8a, 0x49, 0x5b, 0xeb, 0x2a, 0xab, 0x44, 0x7a, 0xa6, 0x98, 0x34, 0x17, 0x76,
	0x44, 0xf8, 0xd4, 0xc6, 0x1a, 0x57, 0xe4, 0x6c, 0xd8, 0xf1, 0x5c, 0xcf, 0x2a, 0xf0, 0x33, 0x54,
	0x94, 0x8b, 0x88, 0x2a, 0x93, 0x9f, 0x2a, 0xab, 0x74, 0xe4, 0xc1, 0xe0, 0x55, 0xad, 0x77, 0xd6,
	0x6b, 0x0c, 0x5d, 0xcf, 0x6a, 0xc0, 0x2e, 0x94, 0x71, 0x65, 0xf2, 0xd1, 0x9a, 0xdd, 0x63, 0xa1,
	0xf4, 0x55, 0xed, 0x71, 0x7f, 0x38, 0x72, 0x3d, 0xab, 0xc0, 0x4f, 0x51, 0xc1, 0x9f, 0x4f, 0x94,
	0x49, 0x3f, 0x6b, 0x66, 0x5b, 0x62, 0x3e, 0xa7, 0xd1, 0xe4, 0xaa, 0xb8, 0x75, 0xda, 0x76, 0x3d,
	0x23, 0x71, 0x5c, 0x54, 0x80, 0x9b, 0x83, 0xa6, 0x05, 0x8e, 0x52, 0xfd, 0x02, 0x57, 0x50, 0xd1,
	0x6c, 0xcc, 0xf6, 0x41, 0x60, 0xc7, 0xf6, 0x41, 0xad, 0xd3, 0x76, 0x35, 0xef, 0xfc, 0x17, 0xaa,
	0xbc, 0xbd, 0xf7, 0xb6, 0xed, 0x0f, 0x70, 0x03, 0x15, 0x95, 0x2f, 0xe2, 0xf4, 0x65, 0x67, 0x2f,
	0x6b, 0x08, 0x83, 0xab, 0xb7, 0x94, 0xb4, 0x13, 0xa4, 0xce, 0x82, 0x23, 0xf2, 0x42, 0x0a, 0xa1,
	0x0f, 0x5d, 0xcf, 0x2a, 0xf1, 0xcb, 0x0d, 0xe7, 0xfc, 0xce, 0x10, 0x7e, 0x8d, 0xdd, 0x1e, 0xe4,
	0x03, 0x0b, 0x60, 0xa9, 0xfe, 0x88, 0xf0, 0xc8, 0x0f, 0x17, 0x13, 0x68, 0x92, 0x22, 0x16, 0xd8,
	0x1c, 0x44, 0xea, 0xf7, 0x0e, 0x53, 0xff, 0xb5, 0x50, 0xf1, 0x1d, 0x0d, 0x17, 0x2c, 0x79, 0xe8,
	0x59, 0x5b, 0xf0, 0x1a, 0x06, 0xaf, 0xa1, 0x4d, 0x89, 0x88, 0x18, 0x61, 0x1f, 0xb8, 0x82, 0x76,
	0xcb, 0x6a, 0x9d, 0x7f, 0xe7, 0xb2, 0xd8, 0xb3, 0x09, 0x2c, 0x8b, 0x8a, 0xdc, 0xd5, 0xa8, 0x48,
	0xda, 0x65, 0xb9, 0x08, 0xd9, 0x46, 0xb3, 0x9c, 0x44, 0x45, 0x3b, 0x75, 0xac, 0x7d, 0x1f, 0x59,
	0xe6, 0x03, 0xc7, 0x5e, 0x2f, 0x25, 0x75, 0xdb, 0xb9, 0xd1, 0xf0, 0x30, 0xf3, 0xf1, 0x00, 0x95,
	0xc0, 0x61, 0x31, 0xf3, 0x93, 0xc0, 0xcc, 0x6e, 0xa9, 0x11, 0x9a, 0x97, 0xa4, 0x21, 0x45, 0xd3,
	0xa9, 0x66, 0xf6, 0x80, 0x07, 0xcf, 0x0f, 0x08, 0x8f, 0xcc, 0xa7, 0xb2, 0x07, 0x31, 0x56, 0x20,
	0x99, 0x59, 0x8c, 0xf3, 0x71, 0x07, 0xdd, 0x48, 0xce, 0x98, 0xe4, 0x8e, 0x37, 0x6b, 0x4d, 0x60,
	0x9a, 0x3c, 0x36, 0x9d, 0xdd, 0x7c, 0x6e, 0xac, 0x3e, 0xc1, 0x3f, 0x26, 0x03, 0x44, 0x31, 0xad,
	0x39, 0x64, 0xe9, 0xfa, 0x98, 0x47, 0x54, 0x2e, 0x49, 0xd2, 0x74, 0x12, 0x61, 0x2a, 0xdd, 0xf7,
	0xe6, 0x3e, 0x49, 0x4c, 0xb9, 0x54, 0x87, 0xee, 0x5a, 0x53, 0xd9, 0x47, 0x25, 0x0a, 0x6f, 0x2f,
	0xeb, 0x8c, 0x6e, 0x6c, 0xbc, 0xe7, 0x55, 0xcb, 0xd1, 0xb0, 0xab, 0xc8, 0x7b, 0xae, 0x67, 0x3c,
	0x22, 0x34, 0x3b, 0x8e, 0xf9, 0x4f, 0xe5, 0xa5, 0x14, 0x00, 0xa6, 0x89, 0x2f, 0xbf, 0x09, 0xb4,
	0x69, 0x2f, 0x03, 0x76, 0xec, 0xaa, 0xad, 0xc0, 0x34, 0xc3, 0xb5, 0x50, 0xd9, 0x86, 0x1a, 0x4b,
	0x1f, 0x74, 0x96, 0xe9, 0x4f, 0x92, 0xf1, 0x6d, 0x8c, 0x4c, 0xf8, 0x53, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf4, 0xbc, 0xcd, 0xa6, 0x01, 0x0e, 0x00, 0x00,
}
